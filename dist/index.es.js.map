{"version":3,"file":"index.es.js","sources":["../node_modules/spacetime/src/timezone/summerTime.js","../node_modules/spacetime/src/timezone/quick.js","../node_modules/spacetime/zonefile/_build.js","../node_modules/spacetime/zonefile/_prefixes.js","../node_modules/spacetime/zonefile/unpack.js","../node_modules/spacetime/src/timezone/guessTz.js","../node_modules/spacetime/src/timezone/parseOffset.js","../node_modules/spacetime/src/timezone/find.js","../node_modules/spacetime/src/fns.js","../node_modules/spacetime/src/input/helpers.js","../node_modules/spacetime/src/input/named-dates.js","../node_modules/spacetime/src/input/normalize.js","../node_modules/spacetime/src/data/milliseconds.js","../node_modules/spacetime/src/methods/set/walk.js","../node_modules/spacetime/src/data/monthLengths.js","../node_modules/spacetime/src/data/months.js","../node_modules/spacetime/src/input/formats/parseOffset.js","../node_modules/spacetime/src/input/formats/parseTime.js","../node_modules/spacetime/src/input/formats/_parsers.js","../node_modules/spacetime/src/input/formats/01-ymd.js","../node_modules/spacetime/src/input/formats/02-mdy.js","../node_modules/spacetime/src/input/formats/03-dmy.js","../node_modules/spacetime/src/input/formats/04-misc.js","../node_modules/spacetime/src/input/formats/index.js","../node_modules/spacetime/src/input/parse.js","../node_modules/spacetime/src/input/index.js","../node_modules/spacetime/src/data/days.js","../node_modules/spacetime/src/data/caseFormat.js","../node_modules/spacetime/src/methods/format/_offset.js","../node_modules/spacetime/src/methods/format/index.js","../node_modules/spacetime/src/methods/format/unixFmt.js","../node_modules/spacetime/src/methods/progress.js","../node_modules/spacetime/src/methods/nearest.js","../node_modules/spacetime/src/methods/diff/one.js","../node_modules/spacetime/src/methods/diff/waterfall.js","../node_modules/spacetime/src/methods/diff/index.js","../node_modules/spacetime/src/methods/since/_iso.js","../node_modules/spacetime/src/methods/since/getDiff.js","../node_modules/spacetime/src/methods/since/soften.js","../node_modules/spacetime/src/methods/since/index.js","../node_modules/spacetime/src/data/seasons.js","../node_modules/spacetime/src/data/quarters.js","../node_modules/spacetime/src/methods/startOf.js","../node_modules/spacetime/src/methods/every.js","../node_modules/spacetime/src/timezone/index.js","../node_modules/spacetime/src/methods.js","../node_modules/spacetime/src/methods/set/set.js","../node_modules/spacetime/src/data/ampm.js","../node_modules/spacetime/src/methods/query/01-time.js","../node_modules/spacetime/src/methods/query/02-date.js","../node_modules/spacetime/src/methods/query/03-year.js","../node_modules/spacetime/src/methods/query/index.js","../node_modules/spacetime/src/methods/set/_model.js","../node_modules/spacetime/src/methods/add.js","../node_modules/spacetime/src/methods/same.js","../node_modules/spacetime/src/methods/compare.js","../node_modules/spacetime/src/methods/i18n.js","../node_modules/spacetime/src/spacetime.js","../node_modules/spacetime/src/whereIts.js","../node_modules/spacetime/src/_version.js","../node_modules/spacetime/src/index.js","../node_modules/timezone-soft/builds/timezone-soft.mjs","../src/utils/timezone-list.ts","../src/hooks/useTimezoneSelect.ts","../src/components/index.vue"],"sourcesContent":["const MSEC_IN_HOUR = 60 * 60 * 1000\n\n//convert our local date syntax a javascript UTC date\nconst toUtc = (dstChange, offset, year) => {\n  const [month, rest] = dstChange.split('/')\n  const [day, hour] = rest.split(':')\n  return Date.UTC(year, month - 1, day, hour) - offset * MSEC_IN_HOUR\n}\n\n// compare epoch with dst change events (in utc)\nconst inSummerTime = (epoch, start, end, summerOffset, winterOffset) => {\n  const year = new Date(epoch).getUTCFullYear()\n  const startUtc = toUtc(start, winterOffset, year)\n  const endUtc = toUtc(end, summerOffset, year)\n  // simple number comparison now\n  return epoch >= startUtc && epoch < endUtc\n}\n\nexport default inSummerTime\n","import isSummer from './summerTime.js'\n\n// this method avoids having to do a full dst-calculation on every operation\n// it reproduces some things in ./index.js, but speeds up spacetime considerably\nconst quickOffset = s => {\n  let zones = s.timezones\n  let obj = zones[s.tz]\n  if (obj === undefined) {\n    console.warn(\"Warning: couldn't find timezone \" + s.tz)\n    return 0\n  }\n  if (obj.dst === undefined) {\n    return obj.offset\n  }\n\n  //get our two possible offsets\n  let jul = obj.offset\n  let dec = obj.offset + 1 // assume it's the same for now\n  if (obj.hem === 'n') {\n    dec = jul - 1\n  }\n  let split = obj.dst.split('->')\n  let inSummer = isSummer(s.epoch, split[0], split[1], jul, dec)\n  if (inSummer === true) {\n    return jul\n  }\n  return dec\n}\nexport default quickOffset\n","export default {\n  \"9|s\": \"2/dili,2/jayapura\",\n  \"9|n\": \"2/chita,2/khandyga,2/pyongyang,2/seoul,2/tokyo,11/palau,japan,rok\",\n  \"9.5|s|04/03:03->10/02:02\": \"4/adelaide,4/broken_hill,4/south,4/yancowinna\",\n  \"9.5|s\": \"4/darwin,4/north\",\n  \"8|s|03/08:01->10/04:00\": \"12/casey\",\n  \"8|s\": \"2/kuala_lumpur,2/makassar,2/singapore,4/perth,2/ujung_pandang,4/west,singapore\",\n  \"8|n\": \"2/brunei,2/choibalsan,2/hong_kong,2/irkutsk,2/kuching,2/macau,2/manila,2/shanghai,2/taipei,2/ulaanbaatar,2/chongqing,2/chungking,2/harbin,2/macao,2/ulan_bator,hongkong,prc,roc\",\n  \"8.75|s\": \"4/eucla\",\n  \"7|s\": \"12/davis,2/jakarta,9/christmas\",\n  \"7|n\": \"2/bangkok,2/barnaul,2/hovd,2/krasnoyarsk,2/novokuznetsk,2/novosibirsk,2/phnom_penh,2/pontianak,2/ho_chi_minh,2/tomsk,2/vientiane,2/saigon\",\n  \"6|s\": \"12/vostok\",\n  \"6|n\": \"2/almaty,2/bishkek,2/dhaka,2/omsk,2/qyzylorda,2/qostanay,2/thimphu,2/urumqi,9/chagos,2/dacca,2/kashgar,2/thimbu\",\n  \"6.5|n\": \"2/yangon,9/cocos,2/rangoon\",\n  \"5|s\": \"12/mawson,9/kerguelen\",\n  \"5|n\": \"2/aqtau,2/aqtobe,2/ashgabat,2/atyrau,2/dushanbe,2/karachi,2/oral,2/samarkand,2/tashkent,2/yekaterinburg,9/maldives,2/ashkhabad\",\n  \"5.75|n\": \"2/katmandu,2/kathmandu\",\n  \"5.5|n\": \"2/kolkata,2/colombo,2/calcutta\",\n  \"4|s\": \"9/reunion\",\n  \"4|n\": \"2/baku,2/dubai,2/muscat,2/tbilisi,2/yerevan,8/astrakhan,8/samara,8/saratov,8/ulyanovsk,8/volgograd,2/volgograd,9/mahe,9/mauritius\",\n  \"4.5|n|03/22:00->09/21:24\": \"2/tehran,iran\",\n  \"4.5|n\": \"2/kabul\",\n  \"3|s\": \"12/syowa,9/antananarivo\",\n  \"3|n|03/27:03->10/30:04\": \"2/famagusta,2/nicosia,8/athens,8/bucharest,8/helsinki,8/kiev,8/mariehamn,8/riga,8/sofia,8/tallinn,8/uzhgorod,8/vilnius,8/zaporozhye,8/nicosia\",\n  \"3|n|03/27:02->10/30:03\": \"8/chisinau,8/tiraspol\",\n  \"3|n|03/27:00->10/29:24\": \"2/beirut\",\n  \"3|n|03/27:00->10/28:01\": \"2/gaza,2/hebron\",\n  \"3|n|03/25:02->10/30:02\": \"2/jerusalem,2/tel_aviv,israel\",\n  \"3|n|03/25:00->10/27:24\": \"2/damascus\",\n  \"3|n|02/25:00->10/28:01\": \"2/amman\",\n  \"3|n\": \"0/addis_ababa,0/asmara,0/asmera,0/dar_es_salaam,0/djibouti,0/juba,0/kampala,0/mogadishu,0/nairobi,2/aden,2/baghdad,2/bahrain,2/kuwait,2/qatar,2/riyadh,8/istanbul,8/kirov,8/minsk,8/moscow,8/simferopol,9/comoro,9/mayotte,2/istanbul,turkey,w-su\",\n  \"2|s|03/27:02->10/30:02\": \"12/troll\",\n  \"2|s\": \"0/gaborone,0/harare,0/johannesburg,0/lubumbashi,0/lusaka,0/maputo,0/maseru,0/mbabane\",\n  \"2|n|03/27:02->10/30:03\": \"0/ceuta,arctic/longyearbyen,8/amsterdam,8/andorra,8/belgrade,8/berlin,8/bratislava,8/brussels,8/budapest,8/busingen,8/copenhagen,8/gibraltar,8/ljubljana,8/luxembourg,8/madrid,8/malta,8/monaco,8/oslo,8/paris,8/podgorica,8/prague,8/rome,8/san_marino,8/sarajevo,8/skopje,8/stockholm,8/tirane,8/vaduz,8/vatican,8/vienna,8/warsaw,8/zagreb,8/zurich,3/jan_mayen,poland\",\n  \"2|n\": \"0/blantyre,0/bujumbura,0/cairo,0/khartoum,0/kigali,0/tripoli,8/kaliningrad,egypt,libya\",\n  \"1|s\": \"0/brazzaville,0/kinshasa,0/luanda,0/windhoek\",\n  \"1|n|03/27:03->05/08:02\": \"0/casablanca,0/el_aaiun\",\n  \"1|n|03/27:01->10/30:02\": \"3/canary,3/faroe,3/madeira,8/dublin,8/guernsey,8/isle_of_man,8/jersey,8/lisbon,8/london,3/faeroe,eire,8/belfast,gb-eire,gb,portugal\",\n  \"1|n\": \"0/algiers,0/bangui,0/douala,0/lagos,0/libreville,0/malabo,0/ndjamena,0/niamey,0/porto-novo,0/tunis\",\n  \"14|n\": \"11/kiritimati\",\n  \"13|s|04/04:04->09/26:03\": \"11/apia\",\n  \"13|s|01/15:02->11/05:03\": \"11/tongatapu\",\n  \"13|n\": \"11/enderbury,11/fakaofo\",\n  \"12|s|04/03:03->09/25:02\": \"12/mcmurdo,11/auckland,12/south_pole,nz\",\n  \"12|s|01/17:03->11/14:02\": \"11/fiji\",\n  \"12|n\": \"2/anadyr,2/kamchatka,2/srednekolymsk,11/funafuti,11/kwajalein,11/majuro,11/nauru,11/tarawa,11/wake,11/wallis,kwajalein\",\n  \"12.75|s|04/03:03->04/03:02\": \"11/chatham,nz-chat\",\n  \"11|s|04/03:03->10/02:02\": \"12/macquarie\",\n  \"11|s\": \"11/bougainville\",\n  \"11|n\": \"2/magadan,2/sakhalin,11/efate,11/guadalcanal,11/kosrae,11/noumea,11/pohnpei,11/ponape\",\n  \"11.5|n|04/03:03->10/02:02\": \"11/norfolk\",\n  \"10|s|04/03:03->10/02:02\": \"4/currie,4/hobart,4/melbourne,4/sydney,4/act,4/canberra,4/nsw,4/tasmania,4/victoria\",\n  \"10|s\": \"12/dumontdurville,4/brisbane,4/lindeman,11/port_moresby,4/queensland\",\n  \"10|n\": \"2/ust-nera,2/vladivostok,2/yakutsk,11/guam,11/saipan,11/chuuk,11/truk,11/yap\",\n  \"10.5|s|04/03:01->10/02:02\": \"4/lord_howe,4/lhi\",\n  \"0|n|03/27:00->10/30:01\": \"1/scoresbysund,3/azores\",\n  \"0|n\": \"0/abidjan,0/accra,0/bamako,0/banjul,0/bissau,0/conakry,0/dakar,0/freetown,0/lome,0/monrovia,0/nouakchott,0/ouagadougou,0/sao_tome,1/danmarkshavn,3/reykjavik,3/st_helena,13/gmt,13/utc,0/timbuktu,13/greenwich,13/uct,13/universal,13/zulu,gmt-0,gmt+0,gmt0,greenwich,iceland,uct,universal,utc,zulu\",\n  \"-9|n|03/13:02->11/06:02\": \"1/adak,1/atka,us/aleutian\",\n  \"-9|n\": \"11/gambier\",\n  \"-9.5|n\": \"11/marquesas\",\n  \"-8|n|03/13:02->11/06:02\": \"1/anchorage,1/juneau,1/metlakatla,1/nome,1/sitka,1/yakutat,us/alaska\",\n  \"-8|n\": \"11/pitcairn\",\n  \"-7|n|03/13:02->11/06:02\": \"1/los_angeles,1/santa_isabel,1/tijuana,1/vancouver,1/ensenada,6/pacific,10/bajanorte,us/pacific-new,us/pacific\",\n  \"-7|n|03/08:02->11/01:01\": \"1/dawson,1/whitehorse,6/yukon\",\n  \"-7|n\": \"1/creston,1/dawson_creek,1/fort_nelson,1/hermosillo,1/phoenix,us/arizona\",\n  \"-6|s|04/02:22->09/03:22\": \"11/easter,7/easterisland\",\n  \"-6|n|04/03:02->10/30:02\": \"1/chihuahua,1/mazatlan,10/bajasur\",\n  \"-6|n|03/13:02->11/06:02\": \"1/boise,1/cambridge_bay,1/denver,1/edmonton,1/inuvik,1/ojinaga,1/yellowknife,1/shiprock,6/mountain,navajo,us/mountain\",\n  \"-6|n\": \"1/belize,1/costa_rica,1/el_salvador,1/guatemala,1/managua,1/regina,1/swift_current,1/tegucigalpa,11/galapagos,6/east-saskatchewan,6/saskatchewan\",\n  \"-5|s\": \"1/lima,1/rio_branco,1/porto_acre,5/acre\",\n  \"-5|n|04/03:02->10/30:02\": \"1/bahia_banderas,1/merida,1/mexico_city,1/monterrey,10/general\",\n  \"-5|n|03/13:02->11/06:02\": \"1/chicago,1/matamoros,1/menominee,1/rainy_river,1/rankin_inlet,1/resolute,1/winnipeg,1/indiana/knox,1/indiana/tell_city,1/north_dakota/beulah,1/north_dakota/center,1/north_dakota/new_salem,1/knox_in,6/central,us/central,us/indiana-starke\",\n  \"-5|n|03/12:03->11/05:01\": \"1/north_dakota\",\n  \"-5|n\": \"1/bogota,1/cancun,1/cayman,1/coral_harbour,1/eirunepe,1/guayaquil,1/jamaica,1/panama,1/atikokan,jamaica\",\n  \"-4|s|05/13:23->08/13:01\": \"12/palmer\",\n  \"-4|s|04/02:24->09/04:00\": \"1/santiago,7/continental\",\n  \"-4|s|03/26:24->10/02:00\": \"1/asuncion\",\n  \"-4|s|02/16:24->11/03:00\": \"1/campo_grande,1/cuiaba\",\n  \"-4|s\": \"1/la_paz,1/manaus,5/west\",\n  \"-4|n|03/13:02->11/06:02\": \"1/detroit,1/grand_turk,1/indianapolis,1/iqaluit,1/louisville,1/montreal,1/nassau,1/new_york,1/nipigon,1/pangnirtung,1/port-au-prince,1/thunder_bay,1/toronto,1/indiana/marengo,1/indiana/petersburg,1/indiana/vevay,1/indiana/vincennes,1/indiana/winamac,1/kentucky/monticello,1/fort_wayne,1/indiana/indianapolis,1/kentucky/louisville,6/eastern,us/east-indiana,us/eastern,us/michigan\",\n  \"-4|n|03/13:00->11/06:01\": \"1/havana,cuba\",\n  \"-4|n|03/12:03->11/05:01\": \"1/indiana,1/kentucky\",\n  \"-4|n\": \"1/anguilla,1/antigua,1/aruba,1/barbados,1/blanc-sablon,1/boa_vista,1/caracas,1/curacao,1/dominica,1/grenada,1/guadeloupe,1/guyana,1/kralendijk,1/lower_princes,1/marigot,1/martinique,1/montserrat,1/port_of_spain,1/porto_velho,1/puerto_rico,1/santo_domingo,1/st_barthelemy,1/st_kitts,1/st_lucia,1/st_thomas,1/st_vincent,1/tortola,1/virgin\",\n  \"-3|s\": \"1/argentina,1/buenos_aires,1/catamarca,1/cordoba,1/fortaleza,1/jujuy,1/mendoza,1/montevideo,1/punta_arenas,1/sao_paulo,12/rothera,3/stanley,1/argentina/la_rioja,1/argentina/rio_gallegos,1/argentina/salta,1/argentina/san_juan,1/argentina/san_luis,1/argentina/tucuman,1/argentina/ushuaia,1/argentina/comodrivadavia,1/argentina/buenos_aires,1/argentina/catamarca,1/argentina/cordoba,1/argentina/jujuy,1/argentina/mendoza,1/argentina/rosario,1/rosario,5/east\",\n  \"-3|n|03/13:02->11/06:02\": \"1/glace_bay,1/goose_bay,1/halifax,1/moncton,1/thule,3/bermuda,6/atlantic\",\n  \"-3|n\": \"1/araguaina,1/bahia,1/belem,1/cayenne,1/maceio,1/paramaribo,1/recife,1/santarem\",\n  \"-2|n|03/26:22->10/29:23\": \"1/nuuk,1/godthab\",\n  \"-2|n|03/13:02->11/06:02\": \"1/miquelon\",\n  \"-2|n\": \"1/noronha,3/south_georgia,5/denoronha\",\n  \"-2.5|n|03/13:02->11/06:02\": \"1/st_johns,6/newfoundland\",\n  \"-1|n\": \"3/cape_verde\",\n  \"-11|n\": \"11/midway,11/niue,11/pago_pago,11/samoa,us/samoa\",\n  \"-10|n\": \"11/honolulu,11/johnston,11/rarotonga,11/tahiti,us/hawaii\"\n}","//prefixes for iana names..\nexport default [\n  'africa',\n  'america',\n  'asia',\n  'atlantic',\n  'australia',\n  'brazil',\n  'canada',\n  'chile',\n  'europe',\n  'indian',\n  'mexico',\n  'pacific',\n  'antarctica',\n  'etc'\n]\n","import data from './_build.js'\nimport prefixes from './_prefixes.js'\n\nlet all = {}\nObject.keys(data).forEach((k) => {\n  let split = k.split('|')\n  let obj = {\n    offset: Number(split[0]),\n    hem: split[1]\n  }\n  if (split[2]) {\n    obj.dst = split[2]\n  }\n  let names = data[k].split(',')\n  names.forEach((str) => {\n    str = str.replace(/(^[0-9]+)\\//, (before, num) => {\n      num = Number(num)\n      return prefixes[num] + '/'\n    })\n    all[str] = obj\n  })\n})\n\nall.utc = {\n  offset: 0,\n  hem: 'n' //default to northern hemisphere - (sorry!)\n}\n\n//add etc/gmt+n\nfor (let i = -14; i <= 14; i += 0.5) {\n  let num = i\n  if (num > 0) {\n    num = '+' + num\n  }\n  let name = 'etc/gmt' + num\n  all[name] = {\n    offset: i * -1, //they're negative!\n    hem: 'n' //(sorry)\n  }\n  name = 'utc/gmt' + num //this one too, why not.\n  all[name] = {\n    offset: i * -1,\n    hem: 'n'\n  }\n}\n\nexport default all\n","//find the implicit iana code for this machine.\n//safely query the Intl object\n//based on - https://bitbucket.org/pellepim/jstimezonedetect/src\nconst fallbackTZ = 'utc' //\n\n//this Intl object is not supported often, yet\nconst safeIntl = () => {\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {\n    return null\n  }\n  let format = Intl.DateTimeFormat()\n  if (typeof format === 'undefined' || typeof format.resolvedOptions === 'undefined') {\n    return null\n  }\n  let timezone = format.resolvedOptions().timeZone\n  if (!timezone) {\n    return null\n  }\n  return timezone.toLowerCase()\n}\n\nconst guessTz = () => {\n  let timezone = safeIntl()\n  if (timezone === null) {\n    return fallbackTZ\n  }\n  return timezone\n}\n//do it once per computer\nexport default guessTz\n","const isOffset = /(\\-?[0-9]+)h(rs)?/i\nconst isNumber = /(\\-?[0-9]+)/\nconst utcOffset = /utc([\\-+]?[0-9]+)/i\nconst gmtOffset = /gmt([\\-+]?[0-9]+)/i\n\nconst toIana = function (num) {\n  num = Number(num)\n  if (num >= -13 && num <= 13) {\n    num = num * -1 //it's opposite!\n    num = (num > 0 ? '+' : '') + num //add plus sign\n    return 'etc/gmt' + num\n  }\n  return null\n}\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'utc+5'\n  m = tz.match(utcOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'GMT-5' (not opposite)\n  m = tz.match(gmtOffset)\n  if (m !== null) {\n    let num = Number(m[1]) * -1\n    return toIana(num)\n  }\n  // '+5'\n  m = tz.match(isNumber)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  return null\n}\nexport default parseOffset\n","import tzs from '../../zonefile/unpack.js'\nimport guessTz from './guessTz.js'\nimport parseOffset from './parseOffset.js'\nconst local = guessTz()\n\n//add all the city names by themselves\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || ''\n  city = city.replace(/_/g, ' ')\n  h[city] = k\n  return h\n}, {})\n\n//try to match these against iana form\nconst normalize = (tz) => {\n  tz = tz.replace(/ time/g, '')\n  tz = tz.replace(/ (standard|daylight|summer)/g, '')\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1')\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1')\n  tz = tz.replace(/\\beuropean/g, 'europe')\n  tz = tz.replace(/\\islands/g, 'island')\n  return tz\n}\n\n// try our best to reconcile the timzone to this given string\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    return local\n  }\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\")\n  }\n  let tz = str.trim()\n  // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n  tz = tz.toLowerCase()\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //lookup more loosely..\n  tz = normalize(tz)\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //try city-names\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz]\n  }\n  // //try to parse '-5h'\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz)\n    if (id) {\n      return id\n    }\n  }\n\n  throw new Error(\n    \"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\"\n  )\n}\nexport default lookupTz\n","//git:blame @JuliasCaesar https://www.timeanddate.com/date/leapyear.html\nexport function isLeapYear(year) { return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 }\n// unsurprisingly-nasty `typeof date` call\nexport function isDate(d) { return Object.prototype.toString.call(d) === '[object Date]' && !isNaN(d.valueOf()) }\nexport function isArray(input) { return Object.prototype.toString.call(input) === '[object Array]' }\nexport function isObject(input) { return Object.prototype.toString.call(input) === '[object Object]' }\nexport function isBoolean(input) { return Object.prototype.toString.call(input) === '[object Boolean]' }\n\nexport function zeroPad(str, len = 2) {\n  let pad = '0'\n  str = str + ''\n  return str.length >= len ? str : new Array(len - str.length + 1).join(pad) + str\n}\n\nexport function titleCase(str) {\n  if (!str) {\n    return ''\n  }\n  return str[0].toUpperCase() + str.substr(1)\n}\n\nexport function ordinal(i) {\n  let j = i % 10\n  let k = i % 100\n  if (j === 1 && k !== 11) {\n    return i + 'st'\n  }\n  if (j === 2 && k !== 12) {\n    return i + 'nd'\n  }\n  if (j === 3 && k !== 13) {\n    return i + 'rd'\n  }\n  return i + 'th'\n}\n\n//strip 'st' off '1st'..\nexport function toCardinal(str) {\n  str = String(str)\n  str = str.replace(/([0-9])(st|nd|rd|th)$/i, '$1')\n  return parseInt(str, 10)\n}\n\n//used mostly for cleanup of unit names, like 'months'\nexport function normalize(str = '') {\n  str = str.toLowerCase().trim()\n  str = str.replace(/ies$/, 'y') //'centuries'\n  str = str.replace(/s$/, '')\n  str = str.replace(/-/g, '')\n  if (str === 'day' || str === 'days') {\n    return 'date'\n  }\n  if (str === 'min' || str === 'mins') {\n    return 'minute'\n  }\n  return str\n}\n\nexport function getEpoch(tmp) {\n  //support epoch\n  if (typeof tmp === 'number') {\n    return tmp\n  }\n  //suport date objects\n  if (isDate(tmp)) {\n    return tmp.getTime()\n  }\n  if (tmp.epoch) {\n    return tmp.epoch\n  }\n  return null\n}\n\n//make sure this input is a spacetime obj\nexport function beADate(d, s) {\n  if (isObject(d) === false) {\n    return s.clone().set(d)\n  }\n  return d\n}\n\nexport function formatTimezone(offset, delimiter = '') {\n  const sign = offset > 0 ? '+' : '-'\n  const absOffset = Math.abs(offset)\n  const hours = zeroPad(parseInt('' + absOffset, 10))\n  const minutes = zeroPad((absOffset % 1) * 60)\n  return `${sign}${hours}${delimiter}${minutes}`\n}\n","const defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//support [2016, 03, 01] format\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s\n  }\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0\n    s = s[order[i]](num)\n  }\n  return s\n}\n\n//support {year:2016, month:3} format\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s\n  }\n  obj = Object.assign({}, defaults, today, obj)\n  let keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i]\n    //make sure we have this method\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue\n    }\n    //make sure the value is a number\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue\n    }\n    let num = obj[unit] || today[unit] || defaults[unit] || 0\n    s = s[unit](num)\n  }\n  return s\n}\n\n// this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000\n  // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.')\n    console.warn('       -   did input seconds instead of milliseconds?')\n  }\n  s.epoch = input\n  return s\n}\n\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n}\n","// pull in 'today' data for the baseline moment\nconst getNow = function (s) {\n  s.epoch = Date.now()\n  Object.keys(s._today || {}).forEach((k) => {\n    if (typeof s[k] === 'function') {\n      s = s[k](s._today[k])\n    }\n  })\n  return s\n}\n\nconst dates = {\n  now: (s) => {\n    return getNow(s)\n  },\n  today: (s) => {\n    return getNow(s)\n  },\n  tonight: (s) => {\n    s = getNow(s)\n    s = s.hour(18) //6pm\n    return s\n  },\n  tomorrow: (s) => {\n    s = getNow(s)\n    s = s.add(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  yesterday: (s) => {\n    s = getNow(s)\n    s = s.subtract(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  christmas: (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 25, 18, 0, 0]) // Dec 25\n    return s\n  },\n  'new years': (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 31, 18, 0, 0]) // Dec 31\n    return s\n  }\n}\ndates['new years eve'] = dates['new years']\nexport default dates\n","//little cleanup..\nconst normalize = function (str) {\n  // remove all day-names\n  str = str.replace(/\\b(mon|tues?|wed|wednes|thur?s?|fri|sat|satur|sun)(day)?\\b/i, '')\n  //remove ordinal ending\n  str = str.replace(/([0-9])(th|rd|st|nd)/, '$1')\n  str = str.replace(/,/g, '')\n  str = str.replace(/ +/g, ' ').trim()\n  return str\n}\n\nexport default normalize\n","let o = {\n  millisecond: 1\n}\no.second = 1000\no.minute = 60000\no.hour = 3.6e6 // dst is supported post-hoc\no.day = 8.64e7 //\no.date = o.day\no.month = 8.64e7 * 29.5 //(average)\no.week = 6.048e8\no.year = 3.154e10 // leap-years are supported post-hoc\n//add plurals\nObject.keys(o).forEach(k => {\n  o[k + 's'] = o[k]\n})\nexport default o\n","import ms from '../../data/milliseconds.js'\n\n//basically, step-forward/backward until js Date object says we're there.\nconst walk = (s, n, fn, unit, previous) => {\n  let current = s.d[fn]()\n  if (current === n) {\n    return //already there\n  }\n  let startUnit = previous === null ? null : s.d[previous]()\n  let original = s.epoch\n  //try to get it as close as we can\n  let diff = n - current\n  s.epoch += ms[unit] * diff\n  //DST edge-case: if we are going many days, be a little conservative\n  // console.log(unit, diff)\n  if (unit === 'day') {\n    // s.epoch -= ms.minute\n    //but don't push it over a month\n    if (Math.abs(diff) > 28 && n < 28) {\n      s.epoch += ms.hour\n    }\n  }\n  // 1st time: oops, did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n    // s.epoch += ms[unit] * diff * 0.89 // maybe try and make it close...?\n  }\n  //repair it if we've gone too far or something\n  //(go by half-steps, just in case)\n  const halfStep = ms[unit] / 2\n  while (s.d[fn]() < n) {\n    s.epoch += halfStep\n  }\n\n  while (s.d[fn]() > n) {\n    s.epoch -= halfStep\n  }\n  // 2nd time: did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n  }\n}\n//find the desired date by a increment/check while loop\nconst units = {\n  year: {\n    valid: (n) => n > -4000 && n < 4000,\n    walkTo: (s, n) => walk(s, n, 'getFullYear', 'year', null)\n  },\n  month: {\n    valid: (n) => n >= 0 && n <= 11,\n    walkTo: (s, n) => {\n      let d = s.d\n      let current = d.getMonth()\n      let original = s.epoch\n      let startUnit = d.getFullYear()\n      if (current === n) {\n        return\n      }\n      //try to get it as close as we can..\n      let diff = n - current\n      s.epoch += ms.day * (diff * 28) //special case\n      //oops, did we change the year? revert it.\n      if (startUnit !== s.d.getFullYear()) {\n        s.epoch = original\n      }\n      //increment by day\n      while (s.d.getMonth() < n) {\n        s.epoch += ms.day\n      }\n      while (s.d.getMonth() > n) {\n        s.epoch -= ms.day\n      }\n    }\n  },\n  date: {\n    valid: (n) => n > 0 && n <= 31,\n    walkTo: (s, n) => walk(s, n, 'getDate', 'day', 'getMonth')\n  },\n  hour: {\n    valid: (n) => n >= 0 && n < 24,\n    walkTo: (s, n) => walk(s, n, 'getHours', 'hour', 'getDate')\n  },\n  minute: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => walk(s, n, 'getMinutes', 'minute', 'getHours')\n  },\n  second: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.seconds(n).epoch\n    }\n  },\n  millisecond: {\n    valid: (n) => n >= 0 && n < 1000,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.milliseconds(n).epoch\n    }\n  }\n}\n\nconst walkTo = (s, wants) => {\n  let keys = Object.keys(units)\n  let old = s.clone()\n  for (let i = 0; i < keys.length; i++) {\n    let k = keys[i]\n    let n = wants[k]\n    if (n === undefined) {\n      n = old[k]()\n    }\n    if (typeof n === 'string') {\n      n = parseInt(n, 10)\n    }\n    //make-sure it's valid\n    if (!units[k].valid(n)) {\n      s.epoch = null\n      if (s.silent === false) {\n        console.warn('invalid ' + k + ': ' + n)\n      }\n      return\n    }\n    units[k].walkTo(s, n)\n  }\n  return\n}\n\nexport default walkTo\n","const monthLengths = [\n  31, // January - 31 days\n  28, // February - 28 days in a common year and 29 days in leap years\n  31, // March - 31 days\n  30, // April - 30 days\n  31, // May - 31 days\n  30, // June - 30 days\n  31, // July - 31 days\n  31, // August - 31 days\n  30, // September - 30 days\n  31, // October - 31 days\n  30, // November - 30 days\n  31 // December - 31 days\n]\nexport default monthLengths\n\n// 28 - feb\n// 30 - april, june, sept, nov\n// 31 - jan, march, may, july, aug, oct, dec\n","let shortMonths = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec'\n]\nlet longMonths = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december'\n]\n\nfunction buildMapping() {\n  const obj = {\n    sep: 8 //support this format\n  }\n  for (let i = 0; i < shortMonths.length; i++) {\n    obj[shortMonths[i]] = i\n  }\n  for (let i = 0; i < longMonths.length; i++) {\n    obj[longMonths[i]] = i\n  }\n  return obj\n}\n\nexport function short() { return shortMonths }\nexport function long() { return longMonths }\nexport function mapping() { return buildMapping() }\nexport function set(i18n) {\n  shortMonths = i18n.short || shortMonths\n  longMonths = i18n.long || longMonths\n}\n","//pull-apart ISO offsets, like \"+0100\"\nconst parseOffset = (s, offset) => {\n  if (!offset) {\n    return s\n  }\n\n  // according to ISO8601, tz could be hh:mm, hhmm or hh\n  // so need few more steps before the calculation.\n  let num = 0\n\n  // for (+-)hh:mm\n  if (/^[\\+-]?[0-9]{2}:[0-9]{2}$/.test(offset)) {\n    //support \"+01:00\"\n    if (/:00/.test(offset) === true) {\n      offset = offset.replace(/:00/, '')\n    }\n    //support \"+01:30\"\n    if (/:30/.test(offset) === true) {\n      offset = offset.replace(/:30/, '.5')\n    }\n  }\n\n  // for (+-)hhmm\n  if (/^[\\+-]?[0-9]{4}$/.test(offset)) {\n    offset = offset.replace(/30$/, '.5')\n  }\n  num = parseFloat(offset)\n\n  //divide by 100 or 10 - , \"+0100\", \"+01\"\n  if (Math.abs(num) > 100) {\n    num = num / 100\n  }\n  //this is a fancy-move\n  if (num === 0 || offset === 'Z' || offset === 'z') {\n    s.tz = 'etc/gmt'\n    return s\n  }\n  //okay, try to match it to a utc timezone\n  //remember - this is opposite! a -5 offset maps to Etc/GMT+5  ¯\\_(:/)_/¯\n  //https://askubuntu.com/questions/519550/why-is-the-8-timezone-called-gmt-8-in-the-filesystem\n  num *= -1\n\n  if (num >= 0) {\n    num = '+' + num\n  }\n  let tz = 'etc/gmt' + num\n  let zones = s.timezones\n\n  if (zones[tz]) {\n    // log a warning if we're over-writing a given timezone?\n    // console.log('changing timezone to: ' + tz)\n    s.tz = tz\n  }\n  return s\n}\nexport default parseOffset\n","// truncate any sub-millisecond values\nconst parseMs = function (str = '') {\n  str = String(str)\n  //js does not support sub-millisecond values \n  // so truncate these - 2021-11-02T19:55:30.087772\n  if (str.length > 3) {\n    str = str.substr(0, 3)\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00'\n  } else if (str.length === 2) {\n    str = str + '0'\n  }\n  return Number(str) || 0\n}\n\nconst parseTime = (s, str = '') => {\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase()\n  //formal time format - 04:30.23\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\\.]?([0-9]{1,4})?/)\n  if (arr !== null) {\n    //validate it a little\n    let h = Number(arr[1])\n    if (h < 0 || h > 24) {\n      return s.startOf('day')\n    }\n    let m = Number(arr[2]) //don't accept '5:3pm'\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day')\n    }\n    s = s.hour(h)\n    s = s.minute(m)\n    s = s.seconds(arr[3] || 0)\n    s = s.millisecond(parseMs(arr[4]))\n    //parse-out am/pm\n    let ampm = str.match(/[\\b0-9] ?(am|pm)\\b/)\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1])\n    }\n    return s\n  }\n\n  //try an informal form - 5pm (no minutes)\n  arr = str.match(/([0-9]+) ?(am|pm)/)\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1])\n    //validate it a little..\n    if (h > 12 || h < 1) {\n      return s.startOf('day')\n    }\n    s = s.hour(arr[1] || 0)\n    s = s.ampm(arr[2])\n    s = s.startOf('hour')\n    return s\n  }\n\n  //no time info found, use start-of-day\n  s = s.startOf('day')\n  return s\n}\nexport default parseTime\n","import monthLengths from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\nimport { mapping } from '../../data/months.js'\nlet months = mapping()\n\nimport parseOffset from './parseOffset.js'\nimport parseTime from './parseTime.js'\n\n//given a month, return whether day number exists in it\nconst validate = (obj) => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false\n  }\n  //support leap-year in february\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true\n    } else {\n      return obj.date <= 28\n    }\n  }\n  //is this date too-big for this month?\n  let max = monthLengths[obj.month] || 0\n  if (obj.date <= max) {\n    return true\n  }\n  return false\n}\n\nconst parseYear = (str = '', today) => {\n  str = str.trim()\n  // parse '86 shorthand\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''))\n    if (num > 50) {\n      return 1900 + num\n    }\n    return 2000 + num\n  }\n  let year = parseInt(str, 10)\n  // use a given year from options.today\n  if (!year && today) {\n    year = today.year\n  }\n  // fallback to this year\n  year = year || new Date().getFullYear()\n  return year\n}\n\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim()\n  if (str === 'sept') {\n    return months.sep\n  }\n  return months[str]\n}\n\nexport {\n  parseOffset,\n  parseTime,\n  parseYear,\n  parseMonth,\n  validate\n}","import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js'\n\nexport default [\n  // =====\n  //  y-m-d\n  // =====\n  //iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n  {\n    reg: /^(\\-?0?0?[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9\\-\\+:]+)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: m[3]\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      parseOffset(s, m[5])\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  //short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: parseInt(m[3], 10)\n      }\n      if (obj.month >= 12) {\n        //support yyyy/dd/mm (weird, but ok)\n        obj.date = parseInt(m[2], 10)\n        obj.month = parseInt(m[3], 10) - 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //text-month \"2015-feb-25\"\n  {\n    reg: /^([0-9]{4})[\\-\\/\\. ]([a-z]+)[\\-\\/\\. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[1], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[3] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n","import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  m-d-y\n  // =====\n  //mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n  {\n    reg: /^([0-9]{1,2})[\\-\\/.]([0-9]{1,2})[\\-\\/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n    parse: (s, arr) => {\n      let month = parseInt(arr[1], 10) - 1\n      let date = parseInt(arr[2], 10)\n      //support dd/mm/yyy\n      if (s.british || month >= 12) {\n        date = parseInt(arr[1], 10)\n        month = parseInt(arr[2], 10) - 1\n      }\n      let obj = {\n        date,\n        month,\n        year: parseYear(arr[3], s._today) || new Date().getFullYear()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  //alt short format - \"feb-25-2015\"\n  {\n    reg: /^([a-z]+)[\\-\\/\\. ]([0-9]{1,2})[\\-\\/\\. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  //Long \"Mar 25 2015\"\n  //February 22, 2017 15:30:00\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  // 'Sun Mar 14 15:09:48 +0000 2021'\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9:]+)?( \\+[0-9]{4})?( [0-9]{4})?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[5], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[3])\n      return s\n    }\n  }\n]\n","import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  d-m-y\n  // =====\n  //common british format - \"25-feb-2015\"\n  {\n    reg: /^([0-9]{1,2})[\\-\\/]([a-z]+)[\\-\\/]?([0-9]{4})?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[3], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[1] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  // \"25 Mar 2015\"\n  {\n    reg: /^([0-9]{1,2})( [a-z]+)( [0-9]{4}| '[0-9]{2})? ?([0-9]{1,2}:[0-9]{2}:?[0-9]{0,2}? ?(am|pm|gmt))?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[3], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[1])\n      }\n      if (!obj.month || validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  // 01-jan-2020\n  {\n    reg: /^([0-9]{1,2})[\\. -/]([a-z]+)[\\. -/]([0-9]{4})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        date: Number(m[1]),\n        month: parseMonth(m[2]),\n        year: Number(m[3])\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = s.startOf('day')\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n","import walkTo from '../../methods/set/walk.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  // no dates\n  // =====\n\n  // '2012-06' month-only\n  {\n    reg: /^([0-9]{4})[\\-\\/]([0-9]{2})$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //February 2017 (implied date)\n  {\n    reg: /^([a-z]+) ([0-9]{4})$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[2], s._today),\n        month: parseMonth(arr[1]),\n        date: s._today.date || 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  {\n    // 'q2 2002'\n    reg: /^(q[0-9])( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let quarter = arr[1] || ''\n      s = s.quarter(quarter)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // 'summer 2002'\n    reg: /^(spring|summer|winter|fall|autumn)( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let season = arr[1] || ''\n      s = s.season(season)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // '200bc'\n    reg: /^[0-9,]+ ?b\\.?c\\.?$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //make year-negative\n      str = str.replace(/^([0-9,]+) ?b\\.?c\\.?$/i, '-$1')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '200ad'\n    reg: /^[0-9,]+ ?(a\\.?d\\.?|c\\.?e\\.?)$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //remove commas\n      str = str.replace(/,/g, '')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '1992'\n    reg: /^[0-9]{4}( ?a\\.?d\\.?)?$/i,\n    parse: (s, arr) => {\n      let today = s._today\n      // using today's date, but a new month is awkward.\n      if (today.month && !today.date) {\n        today.date = 1\n      }\n      let d = new Date()\n      let obj = {\n        year: parseYear(arr[0], today),\n        month: today.month || d.getMonth(),\n        date: today.date || d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  }\n]\n","import ymd from './01-ymd.js'\nimport mdy from './02-mdy.js'\nimport dmy from './03-dmy.js'\nimport misc from './04-misc.js'\n\nexport default [].concat(ymd, mdy, dmy, misc)\n","import parsers from './formats/index.js'\n\nconst parseString = function (s, input, givenTz) {\n  // let parsers = s.parsers || []\n  //try each text-parse template, use the first good result\n  for (let i = 0; i < parsers.length; i++) {\n    let m = input.match(parsers[i].reg)\n    if (m) {\n      // console.log(parsers[i].reg)\n      let res = parsers[i].parse(s, m, givenTz)\n      if (res !== null && res.isValid()) {\n        return res\n      }\n    }\n  }\n  if (s.silent === false) {\n    console.warn(\"Warning: couldn't parse date-string: '\" + input + \"'\")\n  }\n  s.epoch = null\n  return s\n}\nexport default parseString\n","import { isObject, isDate, isArray } from '../fns.js'\nimport fns from './helpers.js'\nconst { parseArray, parseObject, parseNumber } = fns\nimport namedDates from './named-dates.js'\nimport normalize from './normalize.js'\nimport parseString from './parse.js'\n//we have to actually parse these inputs ourselves\n//  -  can't use built-in js parser ;(\n//=========================================\n// ISO Date\t  \"2015-03-25\"\n// Short Date\t\"03/25/2015\" or \"2015/03/25\"\n// Long Date\t\"Mar 25 2015\" or \"25 Mar 2015\"\n// Full Date\t\"Wednesday March 25 2015\"\n//=========================================\n\nconst defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//find the epoch from different input styles\nconst parseInput = (s, input) => {\n  let today = s._today || defaults\n  //if we've been given a epoch number, it's easy\n  if (typeof input === 'number') {\n    return parseNumber(s, input)\n  }\n  //set tmp time\n  s.epoch = Date.now()\n  // overwrite tmp time with 'today' value, if exists\n  if (s._today && isObject(s._today) && Object.keys(s._today).length > 0) {\n    let res = parseObject(s, today, defaults)\n    if (res.isValid()) {\n      s.epoch = res.epoch\n    }\n  }\n  // null input means 'now'\n  if (input === null || input === undefined || input === '') {\n    return s //k, we're good.\n  }\n  //support input of Date() object\n  if (isDate(input) === true) {\n    s.epoch = input.getTime()\n    return s\n  }\n  //support [2016, 03, 01] format\n  if (isArray(input) === true) {\n    s = parseArray(s, input, today)\n    return s\n  }\n  //support {year:2016, month:3} format\n  if (isObject(input) === true) {\n    //support spacetime object as input\n    if (input.epoch) {\n      s.epoch = input.epoch\n      s.tz = input.tz\n      return s\n    }\n    s = parseObject(s, input, today)\n    return s\n  }\n  //input as a string..\n  if (typeof input !== 'string') {\n    return s\n  }\n  //little cleanup..\n  input = normalize(input)\n  //try some known-words, like 'now'\n  if (namedDates.hasOwnProperty(input) === true) {\n    s = namedDates[input](s)\n    return s\n  }\n  //try each text-parse template, use the first good result\n  return parseString(s, input)\n}\nexport default parseInput\n","let shortDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']\nlet longDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\n\nexport function short() { return shortDays }\nexport function long() { return longDays }\nexport function set(i18n) {\n  shortDays = i18n.short || shortDays\n  longDays = i18n.long || longDays\n}\nexport const aliases = {\n  mo: 1,\n  tu: 2,\n  we: 3,\n  th: 4,\n  fr: 5,\n  sa: 6,\n  su: 7,\n  tues: 2,\n  weds: 3,\n  wedn: 3,\n  thur: 4,\n  thurs: 4\n}\n","let titleCaseEnabled = true\n\nexport function useTitleCase() {\n  return titleCaseEnabled\n}\n\nexport function set(val) {\n  titleCaseEnabled = val\n}\n","import { formatTimezone } from '../../fns.js'\n\n// create the timezone offset part of an iso timestamp\n// it's kind of nuts how involved this is\n// \"+01:00\", \"+0100\", or simply \"+01\"\nconst isoOffset = s => {\n  let offset = s.timezone().current.offset\n  return !offset ? 'Z' : formatTimezone(offset, ':')\n}\n\nexport default isoOffset\n","import { titleCase, zeroPad, ordinal } from '../../fns.js'\nimport { short } from '../../data/months.js'\nimport { short as _short } from '../../data/days.js'\nimport { useTitleCase } from '../../data/caseFormat.js'\nimport isoOffset from './_offset.js'\n\nconst applyCaseFormat = (str) => {\n  if (useTitleCase()) {\n    return titleCase(str)\n  }\n  return str\n}\n\n// iso-year padding\nconst padYear = (num) => {\n  if (num >= 0) {\n    return zeroPad(num, 4)\n  } else {\n    num = Math.abs(num)\n    return '-' + zeroPad(num, 4)\n  }\n}\n\nconst format = {\n  day: (s) => applyCaseFormat(s.dayName()),\n  'day-short': (s) => applyCaseFormat(_short()[s.day()]),\n  'day-number': (s) => s.day(),\n  'day-ordinal': (s) => ordinal(s.day()),\n  'day-pad': (s) => zeroPad(s.day()),\n\n  date: (s) => s.date(),\n  'date-ordinal': (s) => ordinal(s.date()),\n  'date-pad': (s) => zeroPad(s.date()),\n\n  month: (s) => applyCaseFormat(s.monthName()),\n  'month-short': (s) => applyCaseFormat(short()[s.month()]),\n  'month-number': (s) => s.month(),\n  'month-ordinal': (s) => ordinal(s.month()),\n  'month-pad': (s) => zeroPad(s.month()),\n  'iso-month': (s) => zeroPad(s.month() + 1), //1-based months\n\n  year: (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return year\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'year-short': (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return `'${String(s.year()).substr(2, 4)}`\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'iso-year': (s) => {\n    let year = s.year()\n    let isNegative = year < 0\n    let str = zeroPad(Math.abs(year), 4) //0-padded\n    if (isNegative) {\n      //negative years are for some reason 6-digits ('-00008')\n      str = zeroPad(str, 6)\n      str = '-' + str\n    }\n    return str\n  },\n\n  time: (s) => s.time(),\n  'time-24': (s) => `${s.hour24()}:${zeroPad(s.minute())}`,\n\n  hour: (s) => s.hour12(),\n  'hour-pad': (s) => zeroPad(s.hour12()),\n  'hour-24': (s) => s.hour24(),\n  'hour-24-pad': (s) => zeroPad(s.hour24()),\n\n  minute: (s) => s.minute(),\n  'minute-pad': (s) => zeroPad(s.minute()),\n  second: (s) => s.second(),\n  'second-pad': (s) => zeroPad(s.second()),\n  millisecond: (s) => s.millisecond(),\n  'millisecond-pad': (s) => zeroPad(s.millisecond(), 3),\n\n  ampm: (s) => s.ampm(),\n  quarter: (s) => 'Q' + s.quarter(),\n  season: (s) => s.season(),\n  era: (s) => s.era(),\n  json: (s) => s.json(),\n  timezone: (s) => s.timezone().name,\n  offset: (s) => isoOffset(s),\n\n  numeric: (s) => `${s.year()}/${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, // yyyy/mm/dd\n  'numeric-us': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}/${s.year()}`, // mm/dd/yyyy\n  'numeric-uk': (s) => `${zeroPad(s.date())}/${zeroPad(s.month() + 1)}/${s.year()}`, //dd/mm/yyyy\n  'mm/dd': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, //mm/dd\n\n  // ... https://en.wikipedia.org/wiki/ISO_8601 ;(((\n  iso: (s) => {\n    let year = s.format('iso-year')\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let hour = zeroPad(s.h24())\n    let minute = zeroPad(s.minute())\n    let second = zeroPad(s.second())\n    let ms = zeroPad(s.millisecond(), 3)\n    let offset = isoOffset(s)\n    return `${year}-${month}-${date}T${hour}:${minute}:${second}.${ms}${offset}` //2018-03-09T08:50:00.000-05:00\n  },\n  'iso-short': (s) => {\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let year = padYear(s.year())\n    return `${year}-${month}-${date}` //2017-02-15\n  },\n  'iso-utc': (s) => {\n    return new Date(s.epoch).toISOString() //2017-03-08T19:45:28.367Z\n  },\n\n  //i made these up\n  nice: (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-24': (s) =>\n    `${short()[s.month()]} ${ordinal(s.date())}, ${s.hour24()}:${zeroPad(\n      s.minute()\n    )}`,\n  'nice-year': (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.year()}`,\n  'nice-day': (s) =>\n    `${_short()[s.day()]} ${applyCaseFormat(short()[s.month()])} ${ordinal(\n      s.date()\n    )}`,\n  'nice-full': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-full-24': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(\n      s.date()\n    )}, ${s.hour24()}:${zeroPad(s.minute())}`\n}\n//aliases\nconst aliases = {\n  'day-name': 'day',\n  'month-name': 'month',\n  'iso 8601': 'iso',\n  'time-h24': 'time-24',\n  'time-12': 'time',\n  'time-h12': 'time',\n  tz: 'timezone',\n  'day-num': 'day-number',\n  'month-num': 'month-number',\n  'month-iso': 'iso-month',\n  'year-iso': 'iso-year',\n  'nice-short': 'nice',\n  'nice-short-24': 'nice-24',\n  mdy: 'numeric-us',\n  dmy: 'numeric-uk',\n  ymd: 'numeric',\n  'yyyy/mm/dd': 'numeric',\n  'mm/dd/yyyy': 'numeric-us',\n  'dd/mm/yyyy': 'numeric-us',\n  'little-endian': 'numeric-uk',\n  'big-endian': 'numeric',\n  'day-nice': 'nice-day'\n}\nObject.keys(aliases).forEach((k) => (format[k] = format[aliases[k]]))\n\nconst printFormat = (s, str = '') => {\n  //don't print anything if it's an invalid date\n  if (s.isValid() !== true) {\n    return ''\n  }\n  //support .format('month')\n  if (format.hasOwnProperty(str)) {\n    let out = format[str](s) || ''\n    if (str !== 'json') {\n      out = String(out)\n      if (str !== 'ampm') {\n        out = applyCaseFormat(out)\n      }\n    }\n    return out\n  }\n  //support '{hour}:{minute}' notation\n  if (str.indexOf('{') !== -1) {\n    let sections = /\\{(.+?)\\}/g\n    str = str.replace(sections, (_, fmt) => {\n      fmt = fmt.toLowerCase().trim()\n      if (format.hasOwnProperty(fmt)) {\n        let out = String(format[fmt](s))\n        if (fmt !== 'ampm') {\n          return applyCaseFormat(out)\n        }\n        return out\n      }\n      return ''\n    })\n    return str\n  }\n\n  return s.format('iso-short')\n}\nexport default printFormat\n","import { zeroPad as pad } from '../../fns.js'\nimport { formatTimezone } from '../../fns.js'\n//parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\n//time-symbols we support\nconst mapping = {\n  G: (s) => s.era(),\n  GG: (s) => s.era(),\n  GGG: (s) => s.era(),\n  GGGG: (s) => (s.era() === 'AD' ? 'Anno Domini' : 'Before Christ'),\n  //year\n  y: (s) => s.year(),\n  yy: (s) => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)))\n  },\n  yyy: (s) => s.year(),\n  yyyy: (s) => s.year(),\n  yyyyy: (s) => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n\n  //quarter\n  Q: (s) => s.quarter(),\n  QQ: (s) => s.quarter(),\n  QQQ: (s) => s.quarter(),\n  QQQQ: (s) => s.quarter(),\n\n  //month\n  M: (s) => s.month() + 1,\n  MM: (s) => pad(s.month() + 1),\n  MMM: (s) => s.format('month-short'),\n  MMMM: (s) => s.format('month'),\n\n  //week\n  w: (s) => s.week(),\n  ww: (s) => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n\n  //date of month\n  d: (s) => s.date(),\n  dd: (s) => pad(s.date()),\n  //date of year\n  D: (s) => s.dayOfYear(),\n  DD: (s) => pad(s.dayOfYear()),\n  DDD: (s) => pad(s.dayOfYear(), 3),\n\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n\n  //day\n  E: (s) => s.format('day-short'),\n  EE: (s) => s.format('day-short'),\n  EEE: (s) => s.format('day-short'),\n  EEEE: (s) => s.format('day'),\n  EEEEE: (s) => s.format('day')[0],\n  e: (s) => s.day(),\n  ee: (s) => s.day(),\n  eee: (s) => s.format('day-short'),\n  eeee: (s) => s.format('day'),\n  eeeee: (s) => s.format('day')[0],\n\n  //am/pm\n  a: (s) => s.ampm().toUpperCase(),\n  aa: (s) => s.ampm().toUpperCase(),\n  aaa: (s) => s.ampm().toUpperCase(),\n  aaaa: (s) => s.ampm().toUpperCase(),\n\n  //hour\n  h: (s) => s.h12(),\n  hh: (s) => pad(s.h12()),\n  H: (s) => s.hour(),\n  HH: (s) => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n\n  m: (s) => s.minute(),\n  mm: (s) => pad(s.minute()),\n  s: (s) => s.second(),\n  ss: (s) => pad(s.second()),\n\n  //milliseconds\n  SSS: (s) => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: (s) => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: (s) => s.timezone().name,\n  zz: (s) => s.timezone().name,\n  zzz: (s) => s.timezone().name,\n  zzzz: (s) => s.timezone().name,\n  Z: (s) => formatTimezone(s.timezone().current.offset),\n  ZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZZ: (s) => formatTimezone(s.timezone().current.offset, ':')\n}\n\nconst addAlias = (char, to, n) => {\n  let name = char\n  let toName = to\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName]\n    name += char\n    toName += to\n  }\n}\naddAlias('q', 'Q', 4)\naddAlias('L', 'M', 4)\naddAlias('Y', 'y', 4)\naddAlias('c', 'e', 4)\naddAlias('k', 'H', 2)\naddAlias('K', 'h', 2)\naddAlias('S', 's', 2)\naddAlias('v', 'z', 4)\naddAlias('V', 'Z', 4)\n\n// support unix-style escaping with ' character\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o]\n        }\n        if (arr[o] === `'`) {\n          arr[o] = null\n          break\n        }\n        arr[o] = null\n      }\n    }\n  }\n  return arr.filter((ch) => ch)\n}\n\n//combine consecutive chars, like 'yyyy' as one.\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i]\n    // greedy-forward\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o]\n        arr[o] = null\n      } else {\n        break\n      }\n    }\n  }\n  // '' means one apostrophe\n  arr = arr.filter((ch) => ch)\n  arr = arr.map((str) => {\n    if (str === `''`) {\n      str = `'`\n    }\n    return str\n  })\n  return arr\n}\n\nconst unixFmt = (s, str) => {\n  let arr = str.split('')\n  // support character escaping\n  arr = escapeChars(arr)\n  //combine 'yyyy' as string.\n  arr = combineRepeated(arr)\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || ''\n    } else {\n      // 'unescape'\n      if (/^'.{1,}'$/.test(c)) {\n        c = c.replace(/'/g, '')\n      }\n      txt += c\n    }\n    return txt\n  }, '')\n}\nexport default unixFmt\n","import { normalize } from '../fns.js'\nconst units = ['year', 'season', 'quarter', 'month', 'week', 'day', 'quarterHour', 'hour', 'minute']\n\nconst doUnit = function (s, k) {\n  let start = s.clone().startOf(k)\n  let end = s.clone().endOf(k)\n  let duration = end.epoch - start.epoch\n  let percent = (s.epoch - start.epoch) / duration\n  return parseFloat(percent.toFixed(2))\n}\n\n//how far it is along, from 0-1\nconst progress = (s, unit) => {\n  if (unit) {\n    unit = normalize(unit)\n    return doUnit(s, unit)\n  }\n  let obj = {}\n  units.forEach(k => {\n    obj[k] = doUnit(s, k)\n  })\n  return obj\n}\n\nexport default progress\n","import { normalize } from '../fns.js'\n\n//round to either current, or +1 of this unit\nconst nearest = (s, unit) => {\n  //how far have we gone?\n  let prog = s.progress()\n  unit = normalize(unit)\n  //fix camel-case for this one\n  if (unit === 'quarterhour') {\n    unit = 'quarterHour'\n  }\n  if (prog[unit] !== undefined) {\n    // go forward one?\n    if (prog[unit] > 0.5) {\n      s = s.add(1, unit)\n    }\n    // go to start\n    s = s.startOf(unit)\n  } else if (s.silent === false) {\n    console.warn(\"no known unit '\" + unit + \"'\")\n  }\n  return s\n}\nexport default nearest\n","//increment until dates are the same\nconst climb = (a, b, unit) => {\n  let i = 0\n  a = a.clone()\n  while (a.isBefore(b)) {\n    //do proper, expensive increment to catch all-the-tricks\n    a = a.add(1, unit)\n    i += 1\n  }\n  //oops, we went too-far..\n  if (a.isAfter(b, unit)) {\n    i -= 1\n  }\n  return i\n}\n\n// do a thurough +=1 on the unit, until they match\n// for speed-reasons, only used on day, month, week.\nconst diffOne = (a, b, unit) => {\n  if (a.isBefore(b)) {\n    return climb(a, b, unit)\n  } else {\n    return climb(b, a, unit) * -1 //reverse it\n  }\n}\n\nexport default diffOne\n","import diffOne from './one.js'\n\n// don't do anything too fancy here.\n// 2020 - 2019 may be 1 year, or 0 years\n// - '1 year difference' means 366 days during a leap year\nconst fastYear = (a, b) => {\n  let years = b.year() - a.year()\n  // should we decrement it by 1?\n  a = a.year(b.year())\n  if (a.isAfter(b)) {\n    years -= 1\n  }\n  return years\n}\n\n// use a waterfall-method for computing a diff of any 'pre-knowable' units\n// compute years, then compute months, etc..\n// ... then ms-math for any very-small units\nconst diff = function (a, b) {\n  // an hour is always the same # of milliseconds\n  // so these units can be 'pre-calculated'\n  let msDiff = b.epoch - a.epoch\n  let obj = {\n    milliseconds: msDiff,\n    seconds: parseInt(msDiff / 1000, 10)\n  }\n  obj.minutes = parseInt(obj.seconds / 60, 10)\n  obj.hours = parseInt(obj.minutes / 60, 10)\n\n  //do the year\n  let tmp = a.clone()\n  obj.years = fastYear(tmp, b)\n  tmp = a.add(obj.years, 'year')\n\n  //there's always 12 months in a year...\n  obj.months = obj.years * 12\n  tmp = a.add(obj.months, 'month')\n  obj.months += diffOne(tmp, b, 'month')\n\n  // there's always atleast 52 weeks in a year..\n  // (month * 4) isn't as close\n  obj.weeks = obj.years * 52\n  tmp = a.add(obj.weeks, 'week')\n  obj.weeks += diffOne(tmp, b, 'week')\n\n  // there's always atleast 7 days in a week\n  obj.days = obj.weeks * 7\n  tmp = a.add(obj.days, 'day')\n  obj.days += diffOne(tmp, b, 'day')\n\n  return obj\n}\nexport default diff\n","import { beADate, normalize } from '../../fns.js'\nimport waterfall from './waterfall.js'\n\nconst reverseDiff = function (obj) {\n  Object.keys(obj).forEach((k) => {\n    obj[k] *= -1\n  })\n  return obj\n}\n\n// this method counts a total # of each unit, between a, b.\n// '1 month' means 28 days in february\n// '1 year' means 366 days in a leap year\nconst main = function (a, b, unit) {\n  b = beADate(b, a)\n  //reverse values, if necessary\n  let reversed = false\n  if (a.isAfter(b)) {\n    let tmp = a\n    a = b\n    b = tmp\n    reversed = true\n  }\n  //compute them all (i know!)\n  let obj = waterfall(a, b)\n  if (reversed) {\n    obj = reverseDiff(obj)\n  }\n  //return just the requested unit\n  if (unit) {\n    //make sure it's plural-form\n    unit = normalize(unit)\n    if (/s$/.test(unit) !== true) {\n      unit += 's'\n    }\n    if (unit === 'dates') {\n      unit = 'days'\n    }\n    return obj[unit]\n  }\n  return obj\n}\n\nexport default main\n","/*\nISO 8601 duration format\n// https://en.wikipedia.org/wiki/ISO_8601#Durations\n\"P3Y6M4DT12H30M5S\"\nP the start of the duration representation.\nY the number of years.\nM the number of months.\nW the number of weeks.\nD the number of days.\nT of the representation.\nH the number of hours.\nM the number of minutes.\nS the number of seconds.\n*/\n\nconst fmt = (n) => Math.abs(n) || 0\n\nconst toISO = function (diff) {\n  let iso = 'P'\n  iso += fmt(diff.years) + 'Y'\n  iso += fmt(diff.months) + 'M'\n  iso += fmt(diff.days) + 'DT'\n  iso += fmt(diff.hours) + 'H'\n  iso += fmt(diff.minutes) + 'M'\n  iso += fmt(diff.seconds) + 'S'\n  return iso\n}\nexport default toISO","\n//get number of hours/minutes... between the two dates\nfunction getDiff(a, b) {\n  const isBefore = a.isBefore(b)\n  const later = isBefore ? b : a\n  let earlier = isBefore ? a : b\n  earlier = earlier.clone()\n  const diff = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }\n  Object.keys(diff).forEach((unit) => {\n    if (earlier.isSame(later, unit)) {\n      return\n    }\n    let max = earlier.diff(later, unit)\n    earlier = earlier.add(max, unit)\n    diff[unit] = max\n  })\n  //reverse it, if necessary\n  if (isBefore) {\n    Object.keys(diff).forEach((u) => {\n      if (diff[u] !== 0) {\n        diff[u] *= -1\n      }\n    })\n  }\n  return diff\n}\nexport default getDiff","//our conceptual 'break-points' for each unit\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n}\n\n// Expects a plural unit arg\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    unit = unit.slice(0, -1)\n  }\n  return value + ' ' + unit\n}\n\nconst toSoft = function (diff) {\n  let rounded = null\n  let qualified = null\n  let abbreviated = []\n  let englishValues = []\n  //go through each value and create its text-representation\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit])\n    if (value === 0) {\n      return\n    }\n    abbreviated.push(value + unit[0])\n    const englishValue = pluralize(value, unit)\n    englishValues.push(englishValue)\n    if (!rounded) {\n      rounded = qualified = englishValue\n      if (i > 4) {\n        return\n      }\n      //is it a 'almost' something, etc?\n      const nextUnit = units[i + 1]\n      const nextValue = Math.abs(diff[nextUnit])\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit)\n        qualified = 'almost ' + rounded\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = 'over ' + englishValue\n      }\n    }\n  })\n  return { qualified, rounded, abbreviated, englishValues }\n}\nexport default toSoft","import { beADate } from '../../fns.js'\nimport toISO from './_iso.js'\nimport getDiff from './getDiff.js'\nimport soften from './soften.js'\n//by spencermountain + Shaun Grady\n\n//create the human-readable diff between the two dates\nconst since = (start, end) => {\n  end = beADate(end, start)\n  const diff = getDiff(start, end)\n  const isNow = Object.keys(diff).every((u) => !diff[u])\n  if (isNow === true) {\n    return {\n      diff,\n      rounded: 'now',\n      qualified: 'now',\n      precise: 'now',\n      abbreviated: [],\n      iso: 'P0Y0M0DT0H0M0S',\n      direction: 'present',\n    }\n  }\n  let precise\n  let direction = 'future'\n\n  let { rounded, qualified, englishValues, abbreviated } = soften(diff)\n\n  //make them into a string\n  precise = englishValues.splice(0, 2).join(', ')\n  //handle before/after logic\n  if (start.isAfter(end) === true) {\n    rounded += ' ago'\n    qualified += ' ago'\n    precise += ' ago'\n    direction = 'past'\n  } else {\n    rounded = 'in ' + rounded\n    qualified = 'in ' + qualified\n    precise = 'in ' + precise\n  }\n  // https://en.wikipedia.org/wiki/ISO_8601#Durations\n  // P[n]Y[n]M[n]DT[n]H[n]M[n]S \n  let iso = toISO(diff)\n  return {\n    diff,\n    rounded,\n    qualified,\n    precise,\n    abbreviated,\n    iso,\n    direction,\n  }\n}\n\nexport default since\n","//https://www.timeanddate.com/calendar/aboutseasons.html\n// Spring - from March 1 to May 31;\n// Summer - from June 1 to August 31;\n// Fall (autumn) - from September 1 to November 30; and,\n// Winter - from December 1 to February 28 (February 29 in a leap year).\nconst north = [\n  ['spring', 2, 1],\n  ['summer', 5, 1],\n  ['fall', 8, 1],\n  ['autumn', 8, 1],\n  ['winter', 11, 1] //dec 1\n];\nconst south = [\n  ['fall', 2, 1],\n  ['autumn', 2, 1],\n  ['winter', 5, 1],\n  ['spring', 8, 1],\n  ['summer', 11, 1] //dec 1\n];\n\nexport default { north, south }","export default [\n  null,\n  [0, 1], //jan 1\n  [3, 1], //apr 1\n  [6, 1], //july 1\n  [9, 1] //oct 1\n]\n","import seasons from '../data/seasons.js'\nimport quarters from '../data/quarters.js'\nimport walkTo from './set/walk.js'\nimport { normalize } from '../fns.js'\n\nconst units = {\n  minute: (s) => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarterhour: (s) => {\n    let minute = s.minutes()\n    if (minute >= 45) {\n      s = s.minutes(45)\n    } else if (minute >= 30) {\n      s = s.minutes(30)\n    } else if (minute >= 15) {\n      s = s.minutes(15)\n    } else {\n      s = s.minutes(0)\n    }\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  hour: (s) => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  day: (s) => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  week: (s) => {\n    let original = s.clone()\n    s = s.day(s._weekStart) //monday\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week')\n    }\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  month: (s) => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarter: (s) => {\n    let q = s.quarter()\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      })\n    }\n    return s\n  },\n  season: (s) => {\n    let current = s.season()\n    let hem = 'north'\n    if (s.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year()\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1\n        }\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        })\n        return s\n      }\n    }\n    return s\n  },\n  year: (s) => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  decade: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    let decade = parseInt(year / 10, 10) * 10\n    s = s.year(decade)\n    return s\n  },\n  century: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    // near 0AD goes '-1 | +1'\n    let decade = parseInt(year / 100, 10) * 100\n    s = s.year(decade)\n    return s\n  }\n}\nunits.date = units.day\n\nconst startOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    return units[unit](s)\n  }\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit)\n    return units.season(s)\n  }\n  return s\n}\n\n//piggy-backs off startOf\nconst endOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s) // startof\n    s = s.add(1, unit)\n    s = s.subtract(1, 'millisecond')\n    return s\n  }\n  return s\n}\nexport {\n  startOf,\n  endOf\n}\n","import { normalize } from '../fns.js'\nimport { short, long } from '../data/days.js'\n\n//is it 'wednesday'?\nconst isDay = function (unit) {\n  if (short().find((s) => s === unit)) {\n    return true\n  }\n  if (long().find((s) => s === unit)) {\n    return true\n  }\n  return false\n}\n\n// return a list of the weeks/months/days between a -> b\n// returns spacetime objects in the timezone of the input\nconst every = function (start, unit, end) {\n  if (!unit || !end) {\n    return []\n  }\n  //cleanup unit param\n  unit = normalize(unit)\n  //cleanup to param\n  end = start.clone().set(end)\n  //swap them, if they're backwards\n  if (start.isAfter(end)) {\n    let tmp = start\n    start = end\n    end = tmp\n  }\n\n  //support 'every wednesday'\n  let d = start.clone()\n  if (isDay(unit)) {\n    d = d.next(unit)\n    unit = 'week'\n  } else {\n    let first = d.startOf(unit)\n    if (first.isBefore(start)) {\n      d = d.next(unit)\n    }\n  }\n  //okay, actually start doing it\n  let result = []\n  while (d.isBefore(end)) {\n    result.push(d)\n    d = d.add(1, unit)\n  }\n  return result\n}\nexport default every\n","import findTz from './find.js'\nimport inSummerTime from './summerTime.js'\n\nconst parseDst = dst => {\n  if (!dst) {\n    return []\n  }\n  return dst.split('->')\n}\n\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1)\n  str = str.replace(/\\/gmt/, '/GMT')\n  str = str.replace(/[\\/_]([a-z])/gi, s => {\n    return s.toUpperCase()\n  })\n  return str\n}\n\n//get metadata about this timezone\nconst timezone = s => {\n  let zones = s.timezones\n  let tz = s.tz\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones)\n  }\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\")\n    }\n    return {\n      current: {\n        epochShift: 0\n      }\n    }\n  }\n  let found = zones[tz]\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  }\n\n  if (result.hasDst) {\n    let arr = parseDst(found.dst)\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    }\n  }\n  //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n  let summer = found.offset // (july)\n  let winter = summer // (january) assume it's the same for now\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1\n    }\n  }\n\n  //find out which offset to use right now\n  //use 'summer' time july-time\n  if (result.hasDst === false) {\n    result.current.offset = summer\n    result.current.isDST = false\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer\n    result.current.isDST = result.hemisphere === 'North' //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter\n    result.current.isDST = result.hemisphere === 'South' //dst 'on' in summer in south\n  }\n  return result\n}\nexport default timezone\n","import format from './methods/format/index.js'\nimport unixFmt from './methods/format/unixFmt.js'\nimport progress from './methods/progress.js'\nimport nearest from './methods/nearest.js'\nimport diff from './methods/diff/index.js'\nimport since from './methods/since/index.js'\nimport { startOf as _startOf, endOf as _endOf } from './methods/startOf.js'\nimport every from './methods/every.js'\nimport timezone from './timezone/index.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport { isLeapYear } from './fns.js'\nimport { short, long } from './data/days.js'\nconst units = [\n  'century',\n  'decade',\n  'year',\n  'month',\n  'date',\n  'day',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n]\n\n//the spacetime instance methods (also, the API)\nconst methods = {\n  set: function (input, tz) {\n    let s = this.clone()\n    s = handleInput(s, input, null)\n    if (tz) {\n      this.tz = findTz(tz)\n    }\n    return s\n  },\n  timezone: function () {\n    return timezone(this)\n  },\n  isDST: function () {\n    return timezone(this).current.isDST\n  },\n  hasDST: function () {\n    return timezone(this).hasDst\n  },\n  offset: function () {\n    return timezone(this).current.offset * 60\n  },\n  hemisphere: function () {\n    return timezone(this).hemisphere\n  },\n  format: function (fmt) {\n    return format(this, fmt)\n  },\n  unixFmt: function (fmt) {\n    return unixFmt(this, fmt)\n  },\n  startOf: function (unit) {\n    return _startOf(this, unit)\n  },\n  endOf: function (unit) {\n    return _endOf(this, unit)\n  },\n  leapYear: function () {\n    let year = this.year()\n    return isLeapYear(year)\n  },\n  progress: function (unit) {\n    return progress(this, unit)\n  },\n  nearest: function (unit) {\n    return nearest(this, unit)\n  },\n  diff: function (d, unit) {\n    return diff(this, d, unit)\n  },\n  since: function (d) {\n    if (!d) {\n      d = this.clone().set()\n    }\n    return since(this, d)\n  },\n  next: function (unit) {\n    let s = this.add(1, unit)\n    return s.startOf(unit)\n  },\n  //the start of the previous year/week/century\n  last: function (unit) {\n    let s = this.subtract(1, unit)\n    return s.startOf(unit)\n  },\n  isValid: function () {\n    //null/undefined epochs\n    if (!this.epoch && this.epoch !== 0) {\n      return false\n    }\n    return !isNaN(this.d.getTime())\n  },\n  //travel to this timezone\n  goto: function (tz) {\n    let s = this.clone()\n    s.tz = findTz(tz, s.timezones) //science!\n    return s\n  },\n  //get each week/month/day between a -> b\n  every: function (unit, to) {\n    // allow swapping these params:\n    if (typeof unit === 'object' && typeof to === 'string') {\n      let tmp = to\n      to = unit\n      unit = tmp\n    }\n    return every(this, unit, to)\n  },\n  isAwake: function () {\n    let hour = this.hour()\n    //10pm -> 8am\n    if (hour < 8 || hour > 22) {\n      return false\n    }\n    return true\n  },\n  isAsleep: function () {\n    return !this.isAwake()\n  },\n  daysInMonth: function () {\n    switch (this.month()) {\n      case 0:\n        return 31\n      case 1:\n        return this.leapYear() ? 29 : 28\n      case 2:\n        return 31\n      case 3:\n        return 30\n      case 4:\n        return 31\n      case 5:\n        return 30\n      case 6:\n        return 31\n      case 7:\n        return 31\n      case 8:\n        return 30\n      case 9:\n        return 31\n      case 10:\n        return 30\n      case 11:\n        return 31\n      default:\n        throw new Error('Invalid Month state.')\n    }\n  },\n  //pretty-printing\n  log: function () {\n    console.log('')\n    console.log(format(this, 'nice-short'))\n    return this\n  },\n  logYear: function () {\n    console.log('')\n    console.log(format(this, 'full-short'))\n    return this\n  },\n  json: function () {\n    return units.reduce((h, unit) => {\n      h[unit] = this[unit]()\n      return h\n    }, {})\n  },\n  debug: function () {\n    let tz = this.timezone()\n    let date = this.format('MM') + ' ' + this.format('date-ordinal') + ' ' + this.year()\n    date += '\\n     - ' + this.format('time')\n    console.log('\\n\\n', date + '\\n     - ' + tz.name + ' (' + tz.current.offset + ')')\n    return this\n  },\n  //alias of 'since' but opposite - like moment.js\n  from: function (d) {\n    d = this.clone().set(d)\n    return d.since(this)\n  },\n  fromNow: function () {\n    let d = this.clone().set(Date.now())\n    return d.since(this)\n  },\n  weekStart: function (input) {\n    //accept a number directly\n    if (typeof input === 'number') {\n      this._weekStart = input\n      return this\n    }\n    if (typeof input === 'string') {\n      // accept 'wednesday'\n      input = input.toLowerCase().trim()\n      let num = short().indexOf(input)\n      if (num === -1) {\n        num = long().indexOf(input)\n      }\n      if (num === -1) {\n        num = 1 //go back to default\n      }\n      this._weekStart = num\n    } else {\n      console.warn('Spacetime Error: Cannot understand .weekStart() input:', input)\n    }\n    return this\n  }\n}\n// aliases\nmethods.inDST = methods.isDST\nmethods.round = methods.nearest\nmethods.each = methods.every\nexport default methods\n","// javascript setX methods like setDate() can't be used because of the local bias\n//these methods wrap around them.\nimport ms from '../../data/milliseconds.js'\nimport { mapping } from '../../data/months.js'\nimport monthLength from '../../data/monthLengths.js'\nimport walkTo from './walk.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst validate = (n) => {\n  //handle number as a string\n  if (typeof n === 'string') {\n    n = parseInt(n, 10)\n  }\n  return n\n}\n\nconst order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n\n//reduce hostile micro-changes when moving dates by millisecond\nconst confirm = (s, tmp, unit) => {\n  let n = order.indexOf(unit)\n  let arr = order.slice(n, order.length)\n  for (let i = 0; i < arr.length; i++) {\n    let want = tmp[arr[i]]()\n    s[arr[i]](want)\n  }\n  return s\n}\n\n// allow specifying setter direction\nconst fwdBkwd = function (s, old, goFwd, unit) {\n  if (goFwd === true && s.isBefore(old)) {\n    s = s.add(1, unit)\n  } else if (goFwd === false && s.isAfter(old)) {\n    s = s.minus(1, unit)\n  }\n  return s\n}\n\nconst milliseconds = function (s, n) {\n  n = validate(n)\n  let current = s.millisecond()\n  let diff = current - n //milliseconds to shift by\n  return s.epoch - diff\n}\n\nconst seconds = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.second() - n\n  let shift = diff * ms.second\n  s.epoch = s.epoch - shift\n  s = fwdBkwd(s, old, goFwd, 'minute') // specify direction\n  return s.epoch\n}\n\nconst minutes = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.minute() - n\n  let shift = diff * ms.minute\n  s.epoch -= shift\n  confirm(s, old, 'second')\n  s = fwdBkwd(s, old, goFwd, 'hour') // specify direction\n  return s.epoch\n}\n\nconst hours = function (s, n, goFwd) {\n  n = validate(n)\n  if (n >= 24) {\n    n = 24\n  } else if (n < 0) {\n    n = 0\n  }\n  let old = s.clone()\n  let diff = s.hour() - n\n  let shift = diff * ms.hour\n  s.epoch -= shift\n  // oops, did we change the day?\n  if (s.date() !== old.date()) {\n    s = old.clone()\n    if (diff > 1) {\n      diff -= 1\n    }\n    if (diff < 1) {\n      diff += 1\n    }\n    shift = diff * ms.hour\n    s.epoch -= shift\n  }\n  walkTo(s, {\n    hour: n\n  })\n  confirm(s, old, 'minute')\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst time = function (s, str, goFwd) {\n  let m = str.match(/([0-9]{1,2})[:h]([0-9]{1,2})(:[0-9]{1,2})? ?(am|pm)?/)\n  if (!m) {\n    //fallback to support just '2am'\n    m = str.match(/([0-9]{1,2}) ?(am|pm)/)\n    if (!m) {\n      return s.epoch\n    }\n    m.splice(2, 0, '0') //add implicit 0 minutes\n    m.splice(3, 0, '') //add implicit seconds\n  }\n  let h24 = false\n  let hour = parseInt(m[1], 10)\n  let minute = parseInt(m[2], 10)\n  if (minute >= 60) {\n    minute = 59\n  }\n  if (hour > 12) {\n    h24 = true\n  }\n  //make the hour into proper 24h time\n  if (h24 === false) {\n    if (m[4] === 'am' && hour === 12) {\n      //12am is midnight\n      hour = 0\n    }\n    if (m[4] === 'pm' && hour < 12) {\n      //12pm is noon\n      hour += 12\n    }\n  }\n  // handle seconds\n  m[3] = m[3] || ''\n  m[3] = m[3].replace(/:/, '')\n  let sec = parseInt(m[3], 10) || 0\n  let old = s.clone()\n  s = s.hour(hour)\n  s = s.minute(minute)\n  s = s.second(sec)\n  s = s.millisecond(0)\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst date = function (s, n, goFwd) {\n  n = validate(n)\n  //avoid setting february 31st\n  if (n > 28) {\n    let month = s.month()\n    let max = monthLength[month]\n    // support leap day in february\n    if (month === 1 && n === 29 && isLeapYear(s.year())) {\n      max = 29\n    }\n    if (n > max) {\n      n = max\n    }\n  }\n  //avoid setting < 0\n  if (n <= 0) {\n    n = 1\n  }\n  let old = s.clone()\n  walkTo(s, {\n    date: n\n  })\n  s = fwdBkwd(s, old, goFwd, 'month') // specify direction\n  return s.epoch\n}\n\nconst month = function (s, n, goFwd) {\n  if (typeof n === 'string') {\n    if (n === 'sept') {\n      n = 'sep'\n    }\n    n = mapping()[n.toLowerCase()]\n  }\n  n = validate(n)\n  //don't go past december\n  if (n >= 12) {\n    n = 11\n  }\n  if (n <= 0) {\n    n = 0\n  }\n\n  let d = s.date()\n  //there's no 30th of february, etc.\n  if (d > monthLength[n]) {\n    //make it as close as we can..\n    d = monthLength[n]\n  }\n  let old = s.clone()\n  walkTo(s, {\n    month: n,\n    d\n  })\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst year = function (s, n) {\n  // support '97\n  if (typeof n === 'string' && /^'[0-9]{2}$/.test(n)) {\n    n = n.replace(/'/, '').trim()\n    n = Number(n)\n    // '89 is 1989\n    if (n > 30) {\n      //change this in 10y\n      n = 1900 + n\n    } else {\n      // '12 is 2012\n      n = 2000 + n\n    }\n  }\n  n = validate(n)\n  walkTo(s, {\n    year: n\n  })\n  return s.epoch\n}\n\nconst week = function (s, n, goFwd) {\n  let old = s.clone()\n  n = validate(n)\n  s = s.month(0)\n  s = s.date(1)\n  s = s.day('monday')\n  //first week starts first Thurs in Jan\n  // so mon dec 28th is 1st week\n  // so mon dec 29th is not the week\n  if (s.monthName() === 'december' && s.date() >= 28) {\n    s = s.add(1, 'week')\n  }\n  n -= 1 //1-based\n  s = s.add(n, 'weeks')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst dayOfYear = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  n -= 1 //days are 1-based\n  if (n <= 0) {\n    n = 0\n  } else if (n >= 365) {\n    n = 364\n  }\n  s = s.startOf('year')\n  s = s.add(n, 'day')\n  confirm(s, old, 'hour')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nexport {\n  milliseconds,\n  seconds,\n  minutes,\n  hours,\n  time,\n  date,\n  month,\n  year,\n  week,\n  dayOfYear,\n}\n","let morning = 'am'\nlet evening = 'pm'\n\nexport function am() { return morning }\nexport function pm() { return evening }\nexport function set(i18n) {\n    morning = i18n.am || morning\n    evening = i18n.pm || evening\n}","import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js'\nimport { am, pm } from '../../data/ampm.js'\nimport { zeroPad } from '../../fns.js'\n\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = milliseconds(s, num)\n      return s\n    }\n    return this.d.getMilliseconds()\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = seconds(s, num, goFwd)\n      return s\n    }\n    return this.d.getSeconds()\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = minutes(s, num, goFwd)\n      return s\n    }\n    return this.d.getMinutes()\n  },\n  hour: function (num, goFwd) {\n    let d = this.d\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = hours(s, num, goFwd)\n      return s\n    }\n    return d.getHours()\n  },\n\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      let minute = num % 1\n      minute = minute * 60\n      let hour = parseInt(num, 10)\n      s.epoch = hours(s, hour, goFwd)\n      s.epoch = minutes(s, minute, goFwd)\n      return s\n    }\n    let d = this.d\n    let hour = d.getHours()\n    let minute = d.getMinutes()\n    minute = minute / 60\n    return hour + minute\n  },\n\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d\n    if (str !== undefined) {\n      let s = this.clone()\n      str = '' + str\n      let m = str.match(/^([0-9]+)(am|pm)$/)\n      if (m) {\n        let hour = parseInt(m[1], 10)\n        if (m[2] === 'pm') {\n          hour += 12\n        }\n        s.epoch = hours(s, hour, goFwd)\n      }\n      return s\n    }\n    //get the hour\n    let hour12 = d.getHours()\n    if (hour12 > 12) {\n      hour12 = hour12 - 12\n    }\n    if (hour12 === 0) {\n      hour12 = 12\n    }\n    return hour12\n  },\n\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase().trim()\n      s.epoch = _time(s, str, goFwd)\n      return s\n    }\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`\n  },\n\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am()\n    let hour = this.hour()\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm()\n    }\n    if (typeof input !== 'string') {\n      return which\n    }\n    //okay, we're doing a setter\n    let s = this.clone()\n    input = input.toLowerCase().trim()\n    //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12\n      return s.hour(hour, goFwd)\n    }\n    if (hour < 12 && input === 'pm') {\n      hour += 12\n      return s.hour(hour, goFwd)\n    }\n    return s\n  },\n\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00am',\n        breakfast: '7:00am',\n        noon: '12:00am',\n        lunch: '12:00pm',\n        afternoon: '2:00pm',\n        evening: '6:00pm',\n        dinner: '6:00pm',\n        night: '11:00pm',\n        midnight: '23:59pm'\n      }\n      let s = this.clone()\n      str = str || ''\n      str = str.toLowerCase()\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd)\n      }\n      return s\n    }\n    let h = this.hour()\n    if (h < 6) {\n      return 'night'\n    }\n    if (h < 12) {\n      //until noon\n      return 'morning'\n    }\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon'\n    }\n    if (h < 22) {\n      //until 10pm\n      return 'evening'\n    }\n    return 'night'\n  },\n\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num)\n    }\n    return this.format('iso')\n  }\n}\nexport default methods\n","import { date as _date } from '../set/set.js'\nimport { aliases, short, long } from '../../data/days.js'\nimport walkTo from '../set/walk.js'\n\nconst methods = {\n  // # day in the month\n  date: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      num = parseInt(num, 10)\n      if (num) {\n        s.epoch = _date(s, num, goFwd)\n      }\n      return s\n    }\n    return this.d.getDate()\n  },\n\n  //like 'wednesday' (hard!)\n  day: function (input, goFwd) {\n    if (input === undefined) {\n      return this.d.getDay()\n    }\n    let original = this.clone()\n    let want = input\n    // accept 'wednesday'\n    if (typeof input === 'string') {\n      input = input.toLowerCase()\n      if (aliases.hasOwnProperty(input)) {\n        want = aliases[input]\n      } else {\n        want = short().indexOf(input)\n        if (want === -1) {\n          want = long().indexOf(input)\n        }\n      }\n    }\n    //move approx\n    let day = this.d.getDay()\n    let diff = day - want\n    if (goFwd === true && diff > 0) {\n      diff = diff - 7\n    }\n    if (goFwd === false && diff < 0) {\n      diff = diff + 7\n    }\n    let s = this.subtract(diff, 'days')\n    //tighten it back up\n    walkTo(s, {\n      hour: original.hour(),\n      minute: original.minute(),\n      second: original.second()\n    })\n    return s\n  },\n\n  //these are helpful name-wrappers\n  dayName: function (input, goFwd) {\n    if (input === undefined) {\n      return long()[this.day()]\n    }\n    let s = this.clone()\n    s = s.day(input, goFwd)\n    return s\n  }\n}\nexport default methods\n","import { dayOfYear as _dayOfYear, week as _week, month as _month, year as _year } from '../set/set.js'\nimport { long } from '../../data/months.js'\nimport quarters from '../../data/quarters.js'\nimport seasons from '../../data/seasons.js'\nimport ms from '../../data/milliseconds.js'\n\nconst clearMinutes = (s) => {\n  s = s.minute(0)\n  s = s.second(0)\n  s = s.millisecond(1)\n  return s\n}\n\nconst methods = {\n  // day 0-366\n  dayOfYear: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _dayOfYear(s, num, goFwd)\n      return s\n    }\n    //days since newyears - jan 1st is 1, jan 2nd is 2...\n    let sum = 0\n    let month = this.d.getMonth()\n    let tmp\n    //count the num days in each month\n    for (let i = 1; i <= month; i++) {\n      tmp = new Date()\n      tmp.setDate(1)\n      tmp.setFullYear(this.d.getFullYear()) //the year matters, because leap-years\n      tmp.setHours(1)\n      tmp.setMinutes(1)\n      tmp.setMonth(i)\n      tmp.setHours(-2) //the last day of the month\n      sum += tmp.getDate()\n    }\n    return sum + this.d.getDate()\n  },\n\n  //since the start of the year\n  week: function (num, goFwd) {\n    // week-setter\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _week(this, num, goFwd)\n      s = clearMinutes(s)\n      return s\n    }\n    //find-out which week it is\n    let tmp = this.clone()\n    tmp = tmp.month(0)\n    tmp = tmp.date(1)\n    tmp = clearMinutes(tmp)\n    tmp = tmp.day('monday')\n    //don't go into last-year\n    if (tmp.monthName() === 'december' && tmp.date() >= 28) {\n      tmp = tmp.add(1, 'week')\n    }\n    // is first monday the 1st?\n    let toAdd = 1\n    if (tmp.date() === 1) {\n      toAdd = 0\n    }\n    tmp = tmp.minus(1, 'second')\n    const thisOne = this.epoch\n    //if the week technically hasn't started yet\n    if (tmp.epoch > thisOne) {\n      return 1\n    }\n    //speed it up, if we can\n    let i = 0\n    let skipWeeks = this.month() * 4\n    tmp.epoch += ms.week * skipWeeks\n    i += skipWeeks\n    for (; i <= 52; i++) {\n      if (tmp.epoch > thisOne) {\n        return i + toAdd\n      }\n      tmp = tmp.add(1, 'week')\n    }\n    return 52\n  },\n  //either name or number\n  month: function (input, goFwd) {\n    if (input !== undefined) {\n      let s = this.clone()\n      s.epoch = _month(s, input, goFwd)\n      return s\n    }\n    return this.d.getMonth()\n  },\n  //'january'\n  monthName: function (input, goFwd) {\n    if (input !== undefined) {\n      let s = this.clone()\n      s = s.month(input, goFwd)\n      return s\n    }\n    return long()[this.month()]\n  },\n\n  //q1, q2, q3, q4\n  quarter: function (num, goFwd) {\n    if (num !== undefined) {\n      if (typeof num === 'string') {\n        num = num.replace(/^q/i, '')\n        num = parseInt(num, 10)\n      }\n      if (quarters[num]) {\n        let s = this.clone()\n        let month = quarters[num][0]\n        s = s.month(month, goFwd)\n        s = s.date(1, goFwd)\n        s = s.startOf('day')\n        return s\n      }\n    }\n    let month = this.d.getMonth()\n    for (let i = 1; i < quarters.length; i++) {\n      if (month < quarters[i][0]) {\n        return i - 1\n      }\n    }\n    return 4\n  },\n\n  //spring, summer, winter, fall\n  season: function (input, goFwd) {\n    let hem = 'north'\n    if (this.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    if (input !== undefined) {\n      let s = this.clone()\n      for (let i = 0; i < seasons[hem].length; i++) {\n        if (input === seasons[hem][i][0]) {\n          s = s.month(seasons[hem][i][1], goFwd)\n          s = s.date(1)\n          s = s.startOf('day')\n        }\n      }\n      return s\n    }\n    let month = this.d.getMonth()\n    for (let i = 0; i < seasons[hem].length - 1; i++) {\n      if (month >= seasons[hem][i][1] && month < seasons[hem][i + 1][1]) {\n        return seasons[hem][i][0]\n      }\n    }\n    return 'winter'\n  },\n\n  //the year number\n  year: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _year(s, num)\n      return s\n    }\n    return this.d.getFullYear()\n  },\n\n  //bc/ad years\n  era: function (str) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase()\n      //TODO: there is no year-0AD i think. may have off-by-1 error here\n      let year = s.d.getFullYear()\n      //make '1992' into 1992bc..\n      if (str === 'bc' && year > 0) {\n        s.epoch = _year(s, year * -1)\n      }\n      //make '1992bc' into '1992'\n      if (str === 'ad' && year < 0) {\n        s.epoch = _year(s, year * -1)\n      }\n      return s\n    }\n    if (this.d.getFullYear() < 0) {\n      return 'BC'\n    }\n    return 'AD'\n  },\n\n  // 2019 -> 2010\n  decade: function (input) {\n    if (input !== undefined) {\n      input = String(input)\n      input = input.replace(/([0-9])'?s$/, '$1') //1950's\n      input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n      if (!input) {\n        console.warn('Spacetime: Invalid decade input')\n        return this\n      }\n      // assume 20th century?? for '70s'.\n      if (input.length === 2 && /[0-9][0-9]/.test(input)) {\n        input = '19' + input\n      }\n      let year = Number(input)\n      if (isNaN(year)) {\n        return this\n      }\n      // round it down to the decade\n      year = Math.floor(year / 10) * 10\n      return this.year(year) //.startOf('decade')\n    }\n    return this.startOf('decade').year()\n  },\n  // 1950 -> 19+1\n  century: function (input) {\n    if (input !== undefined) {\n      if (typeof input === 'string') {\n        input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n        input = input.replace(/([0-9]+) ?(b\\.?c\\.?|a\\.?d\\.?)/i, (a, b, c) => {\n          if (c.match(/b\\.?c\\.?/i)) {\n            b = '-' + b\n          }\n          return b\n        })\n        input = input.replace(/c$/, '') //20thC\n      }\n      let year = Number(input)\n      if (isNaN(input)) {\n        console.warn('Spacetime: Invalid century input')\n        return this\n      }\n      // there is no century 0\n      if (year === 0) {\n        year = 1\n      }\n      if (year >= 0) {\n        year = (year - 1) * 100\n      } else {\n        year = (year + 1) * 100\n      }\n      return this.year(year)\n    }\n    // century getter\n    let num = this.startOf('century').year()\n    num = Math.floor(num / 100)\n    if (num < 0) {\n      return num - 1\n    }\n    return num + 1\n  },\n  // 2019 -> 2+1\n  millenium: function (input) {\n    if (input !== undefined) {\n      if (typeof input === 'string') {\n        input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n        input = Number(input)\n        if (isNaN(input)) {\n          console.warn('Spacetime: Invalid millenium input')\n          return this\n        }\n      }\n      if (input > 0) {\n        input -= 1\n      }\n      let year = input * 1000\n      // there is no year 0\n      if (year === 0) {\n        year = 1\n      }\n      return this.year(year)\n    }\n    // get the current millenium\n    let num = Math.floor(this.year() / 1000)\n    if (num >= 0) {\n      num += 1\n    }\n    return num\n  }\n}\nexport default methods\n","import timeFns from './01-time.js'\nimport dateFns from './02-date.js'\nimport yearFns from './03-year.js'\n\nconst methods = Object.assign({}, timeFns, dateFns, yearFns)\n\n//aliases\nmethods.milliseconds = methods.millisecond\nmethods.seconds = methods.second\nmethods.minutes = methods.minute\nmethods.hours = methods.hour\nmethods.hour24 = methods.hour\nmethods.h12 = methods.hour12\nmethods.h24 = methods.hour24\nmethods.days = methods.day\n\nconst addMethods = Space => {\n  //hook the methods into prototype\n  Object.keys(methods).forEach(k => {\n    Space.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n","import monthLength from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29\n  }\n  return monthLength[month]\n}\n\n//month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10)\n    want.year = old.year() + years\n    want.month = want.month % 12\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month)\n    let years = parseInt(m / 12, 10)\n    if (m % 12 !== 0) {\n      years += 1\n    }\n    want.year = old.year() - years\n    //ignore extras\n    want.month = want.month % 12\n    want.month = want.month + 12\n    if (want.month === 12) {\n      want.month = 0\n    }\n  }\n  return want\n}\n\n// briefly support day=-2 (this does not need to be perfect.)\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year()\n  want.month = old.month()\n  let date = old.date()\n  want.date = date - Math.abs(sum)\n  while (want.date < 1) {\n    want.month -= 1\n    if (want.month < 0) {\n      want.month = 11\n      want.year -= 1\n    }\n    let max = getMonthLength(want.month, want.year)\n    want.date += max\n  }\n  return want\n}\n\n// briefly support day=33 (this does not need to be perfect.)\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year()\n  let month = old.month()\n  let max = getMonthLength(month, year)\n  while (sum > max) {\n    sum -= max\n    month += 1\n    if (month >= 12) {\n      month -= 12\n      year += 1\n    }\n    max = getMonthLength(month, year)\n  }\n  want.month = month\n  want.date = sum\n  return want\n}\n\nexport const months = rollMonth\nexport const days = rollDaysUp\nexport const daysBack = rollDaysDown\n","import walkTo from './set/walk.js'\nimport ms from '../data/milliseconds.js'\nimport monthLength from '../data/monthLengths.js'\nimport { months, daysBack, days } from './set/_model.js'\nimport { normalize } from '../fns.js'\n// this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month']\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n}\nkeep.week = keep.hour\nkeep.season = keep.date\nkeep.quarter = keep.date\n\n// Units need to be dst adjuested\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n}\n\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n}\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone()\n\n    if (!unit || num === 0) {\n      return s //don't bother\n    }\n    let old = this.clone()\n    unit = normalize(unit)\n    if (unit === 'millisecond') {\n      s.epoch += num\n      return s\n    }\n    // support 'fortnight' alias\n    if (unit === 'fortnight') {\n      num *= 2\n      unit = 'week'\n    }\n    //move forward by the estimated milliseconds (rough)\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7)\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3)\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num\n    }\n    //now ensure our milliseconds/etc are in-line\n    let want = {}\n    if (keep[unit]) {\n      keep[unit].forEach((u) => {\n        want[u] = old[u]()\n      })\n    }\n\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset\n      s.epoch += diff * 3600 * 1000\n    }\n\n    //ensure month/year has ticked-over\n    if (unit === 'month') {\n      want.month = old.month() + num\n      //month is the one unit we 'model' directly\n      want = months(want, old)\n    }\n    //support coercing a week, too\n    if (unit === 'week') {\n      let sum = old.date() + num * 7\n      if (sum <= 28 && sum > 1) {\n        want.date = sum\n      }\n    }\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true) //ensure it's saturday\n    }\n    //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num)\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num\n        // ok, model this one too\n        want = days(want, old, sum)\n      }\n      //manually punt it if we haven't moved at all..\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num\n      }\n    }\n    // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + num * 3\n      want.year = old.year()\n      // handle rollover\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12)\n        let remainder = want.month + Math.abs(years) * 12\n        want.month = remainder\n        want.year += years\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12)\n        want.month = want.month % 12\n        want.year += years\n      }\n      want.date = old.date()\n    }\n    //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num\n      let haveYear = s.year()\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += Math.abs(ms.day * toAdd)\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += ms.day * toAdd\n      }\n    }\n    //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10\n    } else if (unit === 'century') {\n      want.year = s.year() + 100\n    }\n    //keep current date, unless the month doesn't have it.\n    if (keepDate[unit]) {\n      let max = monthLength[want.month]\n      want.date = old.date()\n      if (want.date > max) {\n        want.date = max\n      }\n    }\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want)\n    }\n    return s\n  }\n\n  //subtract is only add *-1\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone()\n    return s.add(num * -1, unit)\n  }\n  //add aliases\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract\n  SpaceTime.prototype.plus = SpaceTime.prototype.add\n}\n\nexport default addMethods\n","//make a string, for easy comparison between dates\nconst print = {\n  millisecond: (s) => {\n    return s.epoch\n  },\n  second: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-')\n  },\n  minute: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-')\n  },\n  hour: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-')\n  },\n  day: (s) => {\n    return [s.year(), s.month(), s.date()].join('-')\n  },\n  week: (s) => {\n    return [s.year(), s.week()].join('-')\n  },\n  month: (s) => {\n    return [s.year(), s.month()].join('-')\n  },\n  quarter: (s) => {\n    return [s.year(), s.quarter()].join('-')\n  },\n  year: (s) => {\n    return s.year()\n  }\n}\nprint.date = print.day\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.isSame = function (b, unit, tzAware = true) {\n    let a = this\n    if (!unit) {\n      return null\n    }\n    // support swapped params\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b\n      b = unit\n      unit = tmp\n    }\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name)\n    }\n    //support 'seconds' aswell as 'second'\n    unit = unit.replace(/s$/, '')\n\n    // make them the same timezone for proper comparison\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone()\n      b.tz = a.tz\n    }\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b)\n    }\n    return null\n  }\n}\n\nexport default addMethods\n","import { beADate, getEpoch } from '../fns.js'\n\nconst addMethods = SpaceTime => {\n  const methods = {\n    isAfter: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch > epoch\n    },\n    isBefore: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch < epoch\n    },\n    isEqual: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch === epoch\n    },\n    isBetween: function (start, end, isInclusive = false) {\n      start = beADate(start, this)\n      end = beADate(end, this)\n      let startEpoch = getEpoch(start)\n      if (startEpoch === null) {\n        return null\n      }\n      let endEpoch = getEpoch(end)\n      if (endEpoch === null) {\n        return null\n      }\n      if (isInclusive) {\n        return this.isBetween(start, end) || this.isEqual(start) || this.isEqual(end);\n      }\n      return startEpoch < this.epoch && this.epoch < endEpoch\n    }\n  }\n\n  //hook them into proto\n  Object.keys(methods).forEach(k => {\n    SpaceTime.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n","import { isObject, isBoolean } from '../fns.js'\nimport { set as setD } from '../data/days.js'\nimport { set as setM } from '../data/months.js'\nimport { set as setTcf } from '../data/caseFormat.js'\nimport { set as setAmpm} from '../data/ampm.js'\n\n\nconst addMethods = SpaceTime => {\n  const methods = {\n    i18n: data => {\n      //change the day names\n      if (isObject(data.days)) {\n        setD(data.days)\n      }\n      //change the month names\n      if (isObject(data.months)) {\n        setM(data.months)\n      }\n\n      // change the the display style of the month / day names\n      if (isBoolean(data.useTitleCase)) {\n        setTcf(data.useTitleCase)\n      }\n\n      //change am and pm strings\n      if (isObject(data.ampm)) {\n        setAmpm(data.ampm)\n      }\n    }\n  }\n\n  //hook them into proto\n  Object.keys(methods).forEach(k => {\n    SpaceTime.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n","import quickOffset from './timezone/quick.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport methods from './methods.js'\nimport zones from '../zonefile/unpack.js'\nimport queryFns from './methods/query/index.js'\nimport addFns from './methods/add.js'\nimport sameFns from './methods/same.js'\nimport compareFns from './methods/compare.js'\nimport i18nFns from './methods/i18n.js'\n\nlet timezones = zones\n//fake timezone-support, for fakers (es5 class)\nconst SpaceTime = function (input, tz, options = {}) {\n  //the holy moment\n  this.epoch = null\n  //the shift for the given timezone\n  this.tz = findTz(tz, timezones)\n  //whether to output warnings to console\n  this.silent = typeof options.silent !== 'undefined' ? options.silent : true\n  // favour british interpretation of 02/02/2018, etc\n  this.british = options.dmy || options.british\n\n  //does the week start on sunday, or monday:\n  this._weekStart = 1 //default to monday\n  if (options.weekStart !== undefined) {\n    this._weekStart = options.weekStart\n  }\n  // the reference today date object, (for testing)\n  this._today = {}\n  if (options.today !== undefined) {\n    this._today = options.today\n  }\n  // dunno if this is a good idea, or not\n  // Object.defineProperty(this, 'parsers', {\n  //   enumerable: false,\n  //   writable: true,\n  //   value: parsers\n  // })\n  //add getter/setters\n  Object.defineProperty(this, 'd', {\n    //return a js date object\n    get: function () {\n      let offset = quickOffset(this)\n      //every computer is somewhere- get this computer's built-in offset\n      let bias = new Date(this.epoch).getTimezoneOffset() || 0\n      //movement\n      let shift = bias + offset * 60 //in minutes\n      shift = shift * 60 * 1000 //in ms\n      //remove this computer's offset\n      let epoch = this.epoch + shift\n      let d = new Date(epoch)\n      return d\n    }\n  })\n  //add this data on the object, to allow adding new timezones\n  Object.defineProperty(this, 'timezones', {\n    get: () => timezones,\n    set: (obj) => {\n      timezones = obj\n      return obj\n    }\n  })\n  //parse the various formats\n  let tmp = handleInput(this, input)\n  this.epoch = tmp.epoch\n}\n\n//(add instance methods to prototype)\nObject.keys(methods).forEach((k) => {\n  SpaceTime.prototype[k] = methods[k]\n})\n\n// ¯\\_(ツ)_/¯\nSpaceTime.prototype.clone = function () {\n  return new SpaceTime(this.epoch, this.tz, {\n    silent: this.silent,\n    weekStart: this._weekStart,\n    today: this._today,\n    parsers: this.parsers\n  })\n}\n\n/**\n * @deprecated use toNativeDate()\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toLocalDate = function () {\n  return this.toNativeDate()\n}\n\n/**\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toNativeDate = function () {\n  return new Date(this.epoch)\n}\n\n//append more methods\nqueryFns(SpaceTime)\naddFns(SpaceTime)\nsameFns(SpaceTime)\ncompareFns(SpaceTime)\ni18nFns(SpaceTime)\n\nexport default SpaceTime\n","import Spacetime from './spacetime.js'\n// const timezones = require('../data');\n\nconst whereIts = (a, b) => {\n  let start = new Spacetime(null)\n  let end = new Spacetime(null)\n  start = start.time(a)\n  //if b is undefined, use as 'within one hour'\n  if (b) {\n    end = end.time(b)\n  } else {\n    end = start.add(59, 'minutes')\n  }\n\n  let startHour = start.hour()\n  let endHour = end.hour()\n  let tzs = Object.keys(start.timezones).filter((tz) => {\n    if (tz.indexOf('/') === -1) {\n      return false\n    }\n    let m = new Spacetime(null, tz)\n    let hour = m.hour()\n    //do 'calendar-compare' not real-time-compare\n    if (hour >= startHour && hour <= endHour) {\n      //test minutes too, if applicable\n      if (hour === startHour && m.minute() < start.minute()) {\n        return false\n      }\n      if (hour === endHour && m.minute() > end.minute()) {\n        return false\n      }\n      return true\n    }\n    return false\n  })\n  return tzs\n}\nexport default whereIts\n","export default '7.1.4'","import Spacetime from './spacetime.js'\nimport whereIts from './whereIts.js'\nimport version from './_version.js'\n\nconst main = (input, tz, options) => new Spacetime(input, tz, options)\n\n// set all properties of a given 'today' object\nconst setToday = function (s) {\n  let today = s._today || {}\n  Object.keys(today).forEach((k) => {\n    s = s[k](today[k])\n  })\n  return s\n}\n\n//some helper functions on the main method\nmain.now = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s\n}\nmain.today = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.startOf('day')\n}\nmain.tomorrow = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.add(1, 'day').startOf('day')\n}\nmain.yesterday = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.subtract(1, 'day').startOf('day')\n}\nmain.extend = function (obj = {}) {\n  Object.keys(obj).forEach((k) => {\n    Spacetime.prototype[k] = obj[k]\n  })\n  return this\n}\nmain.timezones = function () {\n  let s = new Spacetime()\n  return s.timezones\n}\nmain.max = function (tz, options) {\n  let s = new Spacetime(null, tz, options)\n  s.epoch = 8640000000000000\n  return s\n}\nmain.min = function (tz, options) {\n  let s = new Spacetime(null, tz, options)\n  s.epoch = -8640000000000000\n  return s\n}\n\n//find tz by time\nmain.whereIts = whereIts\nmain.version = version\n\n//aliases:\nmain.plugin = main.extend\nexport default main\n","var t=function(t,n){let e=Math.min(t.length,n.length);for(;e>0;){const o=t.slice(0,e);if(o===n.slice(0,e))return o;e-=1;}return \"\"},n=function(t){t.sort();for(let n=1;n<t.length;n++)t[n-1]===t[n]&&t.splice(n,1);};const e=function(){this.counts={};},o={init:function(t){void 0===this.counts[t]&&(this.counts[t]=0);},add:function(t,n){void 0===n&&(n=1),this.init(t),this.counts[t]+=n;},countOf:function(t){return this.init(t),this.counts[t]},highest:function(t){let n=[];const e=Object.keys(this.counts);for(let t=0;t<e.length;t++){const o=e[t];n.push([o,this.counts[o]]);}return n.sort((function(t,n){return n[1]-t[1]})),t&&(n=n.slice(0,t)),n}};Object.keys(o).forEach((function(t){e.prototype[t]=o[t];}));const s=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",i=s.split(\"\").reduce((function(t,n,e){return t[n]=e,t}),{});var r=function(t){if(void 0!==s[t])return s[t];let n=1,e=36,o=\"\";for(;t>=e;t-=e,n++,e*=36);for(;n--;){const n=t%36;o=String.fromCharCode((n<10?48:55)+n)+o,t=(t-n)/36;}return o},u=function(t){if(void 0!==i[t])return i[t];let n=0,e=1,o=36,s=1;for(;e<t.length;n+=o,e++,o*=36);for(let e=t.length-1;e>=0;e--,s*=36){let o=t.charCodeAt(e)-48;o>10&&(o-=7),n+=o*s;}return n};const c=\";\",h=\":\",f=\",\",l=\"!\",d=36,p=function(t,n){let e=\"\",o=\"\";t.isTerminal(n)&&(e+=l);const s=t.nodeProps(n);for(let i=0;i<s.length;i++){const u=s[i];if(\"number\"==typeof n[u]){e+=o+u,o=f;continue}if(t.syms[n[u]._n]){e+=o+u+t.syms[n[u]._n],o=\"\";continue}let c=r(n._n-n[u]._n-1+t.symCount);n[u]._g&&c.length>=n[u]._g.length&&1===n[n[u]._g]?(c=n[u]._g,e+=o+u+c,o=f):(e+=o+u+c,o=\"\");}return e},g=function(t,n){if(t.visited(n))return;const e=t.nodeProps(n,!0);for(let o=0;o<e.length;o++){const s=e[o],i=n._n-n[s]._n-1;i<d&&t.histRel.add(i),t.histAbs.add(n[s]._n,r(i).length-1),g(t,n[s]);}},a=function(t,n){if(void 0!==n._n)return;const e=t.nodeProps(n,!0);for(let o=0;o<e.length;o++)a(t,n[e[o]]);n._n=t.pos++,t.nodes.unshift(n);},y=function(t){t.nodes=[],t.nodeCount=0,t.syms={},t.symCount=0,t.pos=0,t.optimize(),t.histAbs=new e,t.histRel=new e,a(t,t.root),t.nodeCount=t.nodes.length,t.prepDFS(),g(t,t.root),t.symCount=function(t){t.histAbs=t.histAbs.highest(d);const n=[];n[-1]=0;let e=0,o=0;const s=3+r(t.nodeCount).length;for(let i=0;i<d&&void 0!==t.histAbs[i];i++)n[i]=t.histAbs[i][1]-s-t.histRel.countOf(d-i-1)+n[i-1],n[i]>=e&&(e=n[i],o=i+1);return o}(t);for(let n=0;n<t.symCount;n++)t.syms[t.histAbs[n][0]]=r(n);for(let n=0;n<t.nodeCount;n++)t.nodes[n]=p(t,t.nodes[n]);for(let n=t.symCount-1;n>=0;n--)t.nodes.unshift(r(n)+h+r(t.nodeCount-t.histAbs[n][0]-1));return t.nodes.join(c)},m=new RegExp(\"[0-9A-Z,;!:|¦]\"),b={insertWords:function(t){if(void 0!==t){\"string\"==typeof t&&(t=t.split(/[^a-zA-Z]+/));for(let n=0;n<t.length;n++)t[n]=t[n].toLowerCase();n(t);for(let n=0;n<t.length;n++)null===t[n].match(m)&&this.insert(t[n]);}},insert:function(n){this._insert(n,this.root);const e=this.lastWord;this.lastWord=n;if(t(n,e)===e)return;const o=this.uniqueNode(e,n,this.root);o&&this.combineSuffixNode(o);},_insert:function(n,e){let o,s;if(0===n.length)return;const i=Object.keys(e);for(let r=0;r<i.length;r++){const u=i[r];if(o=t(n,u),0!==o.length){if(u===o&&\"object\"==typeof e[u])return void this._insert(n.slice(o.length),e[u]);if(u===n&&\"number\"==typeof e[u])return;return s={},s[u.slice(o.length)]=e[u],this.addTerminal(s,n=n.slice(o.length)),delete e[u],e[o]=s,void this.wordCount++}}this.addTerminal(e,n),this.wordCount++;},addTerminal:function(t,n){if(n.length<=1)return void(t[n]=1);const e={};t[n[0]]=e,this.addTerminal(e,n.slice(1));},nodeProps:function(t,n){const e=[];for(const o in t)\"\"!==o&&\"_\"!==o[0]&&(n&&\"object\"!=typeof t[o]||e.push(o));return e.sort(),e},optimize:function(){this.combineSuffixNode(this.root),this.prepDFS(),this.countDegree(this.root),this.prepDFS(),this.collapseChains(this.root);},combineSuffixNode:function(t){if(t._c)return t;let n=[];this.isTerminal(t)&&n.push(\"!\");const e=this.nodeProps(t);for(let o=0;o<e.length;o++){const s=e[o];\"object\"==typeof t[s]?(t[s]=this.combineSuffixNode(t[s]),n.push(s),n.push(t[s]._c)):n.push(s);}n=n.join(\"-\");const o=this.suffixes[n];return o||(this.suffixes[n]=t,t._c=this.cNext++,t)},prepDFS:function(){this.vCur++;},visited:function(t){return t._v===this.vCur||(t._v=this.vCur,!1)},countDegree:function(t){if(void 0===t._d&&(t._d=0),t._d++,this.visited(t))return;const n=this.nodeProps(t,!0);for(let e=0;e<n.length;e++)this.countDegree(t[n[e]]);},collapseChains:function(t){let n,e,o,s;if(!this.visited(t)){for(e=this.nodeProps(t),s=0;s<e.length;s++)n=e[s],o=t[n],\"object\"==typeof o&&(this.collapseChains(o),void 0===o._g||1!==o._d&&1!==o._g.length||(delete t[n],n+=o._g,t[n]=o[o._g]));1!==e.length||this.isTerminal(t)||(t._g=n);}},isTerminal:function(t){return !!t[\"\"]},uniqueNode:function(t,n,e){const o=this.nodeProps(e,!0);for(let s=0;s<o.length;s++){const i=o[s];if(i===t.slice(0,i.length))return i!==n.slice(0,i.length)?e[i]:this.uniqueNode(t.slice(i.length),n.slice(i.length),e[i])}},pack:function(){return y(this)}};Object.keys(b).forEach((function(t){}));const j=function(t,n,e){const o=u(n);return o<t.symCount?t.syms[o]:e+o+1-t.symCount},A=function(t){const n={nodes:t.split(\";\"),syms:[],symCount:0};return t.match(\":\")&&function(t){const n=new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\");for(let e=0;e<t.nodes.length;e++){const o=n.exec(t.nodes[e]);if(!o){t.symCount=e;break}t.syms[u(o[1])]=u(o[2]);}t.nodes=t.nodes.slice(t.symCount,t.nodes.length);}(n),function(t){const n=[],e=(o,s)=>{let i=t.nodes[o];\"!\"===i[0]&&(n.push(s),i=i.slice(1));const r=i.split(/([A-Z0-9,]+)/g);for(let i=0;i<r.length;i+=2){const u=r[i],c=r[i+1];if(!u)continue;const h=s+u;if(\",\"===c||void 0===c){n.push(h);continue}const f=j(t,c,o);e(f,h);}};return e(0,\"\"),n}(n)},O=function(t){const n=t.split(\"|\").reduce(((t,n)=>{const e=n.split(\"¦\");return t[e[0]]=e[1],t}),{}),e={};return Object.keys(n).forEach((function(t){const o=A(n[t]);\"true\"===t&&(t=!0);for(let n=0;n<o.length;n++){const s=o[n];!0===e.hasOwnProperty(s)?!1===Array.isArray(e[s])?e[s]=[e[s],t]:e[s].push(t):e[s]=t;}})),e};\n\nvar pckd = \"Africa/Abidjan¦a2bouake,daloa,san ped1t0yamoussouk1;g,ogo;ro;b0frica/timbuktu;idjan,obo|Africa/Algiers¦a5b3c2dz,oran,s1t0;ebessa,iaret;etif,idi bel abbes;hlef,onstantine;a0iskra,lida,oumerdas;b ezzouar,tna;lg0nnaba;eria,iers|Africa/Cairo¦a4bani suwayf,c3damanhur,eg2giza,halw6i1kafr ad dawwar,luxor,new c3port said,qina,s0tanta,zagazig;hibin al kawm,ohag,uez;dku,smail6;!ypt;airo;l2s0;w0yut;an; 1exandr0;ia;fayyum,m0;a0inya;hallah al kubra,nsurah|Africa/El_Aaiun¦e0laayoune,western sahara;h,l aaiun|Africa/Ceuta¦ceuta0;!melilla|Africa/Accra¦a2gh1kumasi,ta0;koradi,male;!ana;ccra,tsiaman|Africa/Bissau¦b1g0;uinea b0w;issau|Africa/Nairobi¦africa7e2kisumu,m1na0thika,yt;irobi,kuru;ayotte,ombasa;. africa standard 3a0ldoret;st0t; africa0ern africa;! 0;time; eastern,/asmera|Africa/Monrovia¦l0monrov1;iber0r;ia|Africa/Tripoli¦a3benghazi,l1misrat4t0zawi2;arhuna,ripoli;ib0y;ya;l khums,z zawiy0;ah|Africa/Casablanca¦a9casablanca,f8kenit7m4oujda angad,rabat,sa2t0;angier,e0;ma5touan;fi,le0;! al jadida;a1ekn3o0;hammedia,rocco;!rrakesh;ra;es;gadir,l hoceima|Africa/Maputo¦beira,c4ma2na1quelimane,z0;imbabwe,w;ca1mpu1;puto,to0;la;entral africa time,himoio|Africa/Windhoek¦africa central,na0windhoek;!mibia0;! standard time|Africa/Lagos¦aYbWcVeUgTiPjOkaMlKmHnFoCport harcourt,sBuAw0zarG;. central africa6a5est0; 0ern1;africa1central0; africa;! 0;s2t3;rCst,t;! s0;tandard t0;ime;gep,muah5yo;a9hagamu,okoto;kFn1w0yo;er5o;do,itsha;g,iger0newi;ia;a0in5ubi;idugu0kurdi;ri;agos,ek0;ki;du0no,tsi0;na;imeEos;badan,jebu ode,k1l0seAwo;a orangun,esa,or6;eAi7ot ekp0;ene;ombe,usau;bute ikorodu,fon alaaye,nugu;alabar,hakwama;auchi,en0;in;b2do1frica western,ku0tani;re; ekiti;a,eoku1u0;ja;ta|Africa/Khartoum¦a6c5el 4k2ny3omdurm1port sud1s0wad medani;d,inga,ud0;an;ass0hartoum,osti;ala;dae2fasher,obeid;at,entral africa;d damaz0l qadarif;in|Africa/Juba¦juba,s0winejok;outh sudan,s|Africa/Sao_Tome¦s0;ao tome,t|Africa/Ndjamena¦chad,n0td;'d0d0;jamena|Africa/Tunis¦sfax,t0;n,unis0;!ia|Africa/Johannesburg¦africa southern,bEcAd9east londBjohannesHk7newcastDp6r5s2tembisa,uitenhage,v1w0za;elkom,itbank;anderbijlpark,ereeniging;ast,o0prings;uth africa0weto;! standard time;andBichards bay,oodepoort;aarl,ietermaritzAort elizabeth,retoria;lerk0ruger0;sdorp;iepsloot,urb5;a1enturi0;on;pe town,rletonvil0;le;enoni,loemfontein,o1rakp0;an;ks0tshabelo;burg|America/Argentina/Buenos_Aires¦argentina/buenos aires|America/Argentina/Cordoba¦a0;merica/0rgentina/c1;c0rosario;ordoba|America/Argentina/Salta¦argentina/salta|America/Argentina/Jujuy¦a0;meric0rgentin0;a/jujuy|America/Argentina/Tucuman¦argentina/tucuman|America/Argentina/Catamarca¦a0;merica/0rgentina/c1;argentina/comodrivadavia,c0;atamarca|America/Argentina/La_Rioja¦argentina/la rioja|America/Argentina/San_Juan¦argentina/san juan|America/Argentina/Mendoza¦a0;meric0rgentin0;a/mendoza|America/Argentina/San_Luis¦argentina/san luis|America/Argentina/Rio_Gallegos¦argentina/rio gallegos|America/Argentina/Ushuaia¦argentina/ushuaia|America/Barbados¦b0;arbados,b|America/La_Paz¦bo1cochabamba,la paz,oruro,s0;anta cruz de la sierra,ucre;!livia0t;! time|America/Noronha¦atlantic islands,brazil/den0fernando de noronha standard time,n0;oronha|America/Belem¦ananindeua,belem,macapa,par0;auapebas,á (east) amapá|America/Fortaleza¦ca2fortaleza,imperatriz,j1m0natal,sao luis,teresina;aracanau,ossoro;oao pessoa,uazeiro do norte;mpina grande,ucaia|America/Recife¦caruaru,jaboatao2olinda,p0recife;aulista,e0;rnambuco,trolina;! dos guararapes|America/Araguaina¦araguaina,palmas,tocantins|America/Maceio¦a0maceio;lagoassergipe,racaju|America/Bahia¦bahia,camacari,feira de santa0itabu0salvador,vitoria da conquista;na|America/Sao_Paulo¦a14b0Tc0Md0Je0Hf0Fg0Ahortol09i05j02l01mXnVosasco,pLriFs4ta3uber2v0;i0olta redon18;amao,la velha,tor14;a0Ml06;boao da ser00uba0Y;a2e1oroNu0;maLzano;rXte lago0L;nt4o 0;bernardo do campo,carl03jo0leopolLpaulo,vicE;ao de meriti,se0;! do0; rio p8s camp00;a 1o0; andDs;barbara d'oes0Nluz0Rmar0R;beirao 3o0;! 0;cla0de janei0g6ver7;ro;das nev07p0;reto;asso fun8e7iraci6lanalti0Mo4r0;aia g1esidente prud0;en0E;ran0;de;nta grossa,rto aleg0;re;caW;lotYtro0D;do;iteroi,ov0;aJo hamburgo;a1o0;gi das cruzSntes clarD;ri0ua;l05n6;imei2ondri06;acarei,oinville,u0;iz de fo0ndi9;ra;ndaia2patin1ta0;bor6pevi,quaquece1;ga;tuG;andW;o3ravat2uaru0;ja,lh0;os;ai;iQvernador valadarC;loria5oz do0ran2; iguacu;. south america Gast south ameri0mbu;ca;i0uque de caxi8;adema,vi0;noL;a1o0uriti2;ntagem,tI;choeiro de itapemirBmp1no3rapicui0scavel,xias do sul;ba;in1os dos goytacaz0;es;as;a9e5lumenau,r0;!a0st,t;silia1zil0;!/east;! 0;standard time;l1t0;im;ford roxo,o horizon0;te;rueri,uru;lvora4merica3na2parecida de goi0;an0;ia;polis;na;da|America/Campo_Grande¦campo grande,mato grosso do sul|America/Cuiaba¦cuiaba,mato grosso,varzea grande|America/Santarem¦pará (west),santarem|America/Porto_Velho¦porto velho,rondônia|America/Boa_Vista¦amazon1boa vista,central brazil0roraima;!ian0;! standard time|America/Manaus¦am0brazil/west,manaus;azonas (east),t|America/Eirunepe¦a0eirunepe;cre standard time,mazonas (west)|America/Rio_Branco¦a0brazil/a0rio branco;cre|America/Nassau¦b0nassau;ahamas,s|America/Belize¦b0;elize,z|America/St_Johns¦canada/newfoundland,n0st johns;d2ewfoundland0st,t;! 0;labrador (southeast),standard time;dt,t|America/Halifax¦a2canada/atlantic,halifax,n1p0;ei,rince edward island;ew brunswick,ova scotia;dt,st,tlantic0;! - ns (most areas) pe|America/Glace_Bay¦atlantic - ns (cape breton),glace bay|America/Moncton¦atlantic - new brunswick,moncton|America/Goose_Bay¦atlantic - labrador (most areas),goose bay|America/Blanc-Sablon¦ast - qc (lower north shore),blanc sablon|America/Toronto¦america/moBb9ca7eastern - onqc (most areas),gatineau,hamilAkitchener,l4m3nepe2o0quebec,richmond hill,toronto,vaugh2windsor;n5sh0tt0;awa;an;arkham,ississauga,o7;av7on0;don on0gueuil;tario;!nada0;!/eastern;arrie,ramp0;ton;ntre0;al|America/Nipigon¦nipigon|America/Thunder_Bay¦eastern - on (thunder bay),thunder bay|America/Iqaluit¦eastern - nu (most east areas),iqaluit|America/Pangnirtung¦eastern - nu (pangnirtung),pangnirtung|America/Atikokan¦atikokan,est - on (atikokan) nu (coral h)|America/Winnipeg¦c0m1winnipeg;anada/central,entral - on (west) m0;anitoba|America/Rainy_River¦central - on (rainy rft frances),rainy river|America/Resolute¦central - nu (resolute),resolute|America/Rankin_Inlet¦central - nu (central),rankin inlet|America/Regina¦c1regina,saskat0;c1oon;anada/saskatc0st - sk (most areas);hewan|America/Swift_Current¦cst - sk (midwest),swift current|America/Edmonton¦alberta,ca0edmonton,mountain - ab bc (e) sk (w);lgary,nada/mountain|America/Cambridge_Bay¦cambridge bay,mountain - nu (west)|America/Yellowknife¦mountain - nt (central),yellowknife|America/Inuvik¦inuvik,mountain - nt (west)|America/Creston¦creston,mst - bc (creston)|America/Dawson_Creek¦dawson creek,mst - bc (dawson crft st john)|America/Fort_Nelson¦fort nelson,mst - bc (ft nelson)|America/Whitehorse¦canada/yukon,pacific - yukon (south),whitehorse|America/Dawson¦dawson,pacific - yukon (north)|America/Vancouver¦b2canada/pacific,ladn1okanagan,pacific - bc (most areas),surrey,v0yukon;ancouv0ictor2;er;ritish columb0urnaby;ia|America/Santiago¦a7c4iquique,la pintana,puente alto,rancagua,san3t1v0;alparaiso,ina del mar;alca0emuco;!huano; bernardo,tiago;hile1l0oncepcion;!st,t;! (most areas),/continental;ntofagasta,rica|America/Punta_Arenas¦punta arenas,region of magallanes|America/Bogota¦armenGbBc7dosquebradas,floridablanca,i6m5neiva,p3s1v0;alledupar,illavicencio;anta marCincelejo,o0;acha,ledad;a0erei9opayan;lmi8sto;anizales,edellin,onterA;bague,taguei;a2o0ucu6;!lombia0st,t;! standard time;li,rtagena;arran3ello,ogo2u0;caramanga,enaventu0;ra;ta;cabermeja,quilla;ia|America/Costa_Rica¦c0;osta rica,r|America/Havana¦arroyo naranjo,b7c2diez de octubre,guantan9h1las tunas,pinar del rio,sant0;a clara,iago de cuba;avana,olguin;amaguey,i2u0;!ba0;! standard time;e0udad camilo cie0;nfueg1;ay1oyer0;os;amo|America/Curacao¦curacao,s0;t maarten,x|America/Santo_Domingo¦bella vista,do5la romana,san0; pedro de macoris,t0;iago de los caballeros,o domingo0;! 0;e0oe0;ste;!minican republic|America/Guayaquil¦cuenca,ec1guayaquil,ma0quito,santo domingo de los colorados;chala,nta;!uador0;! 0;(mainland),time|America/Cayenne¦cayenne,french guiana1gf0;!t;! time|America/Nuuk¦america/godthab,nuuk|America/Danmarkshavn¦danmarkshavn,national park (east coast)|America/Scoresbysund¦e1greenland eastern,scoresbysund0;!/ittoqqortoormiit;ast greenland1g0;st,t;! standard time|America/Thule¦thule0;!/pituffik|America/Guatemala¦g0mixco,villa nueva;t,uatemala|America/Guyana¦g0;eorgetown,uyana1y0;!t;! time|America/Tegucigalpa¦h0san pedro sula,tegucigalpa;n,onduras|America/Port-au-Prince¦c2p0;etionville,ort 0;au prince,de paix;arrefour,roix des bouquets|America/Jamaica¦j1k0new k0;ingston;amaica,m|America/Martinique¦m0;artinique,q|America/Mexico_City¦a0Gb0EcVduran09ecatepec de morel07guQhPiNjalis0Ileon de los alda03mInHoGpEqDs9t4uruap01v2x1yucat01za0;catec09pop00;alapa de enriqu0Ki0Gochimil0G;e0illahermosa;nustiano carranza,racruz;a3e7la1o0uxt00;luRnaZ;huac,l0quepaque,xcaY;nepantXpT;bas09maulip01pachuW;an0oledad de graciano sanch0C; luis potosi,t0;a maria chimal0iago de q1;huN;ueretaD;achuca de soFoza rica de6ue0;bPrto vallarZ;axaGjo de agua;aucalpan02icolas rome9uevo le01;agdalena contrerRexico3i1orel0x;ia,os;choFguel0; h3;! city,/general;rap5xtapalu9zta0;cSpalapa;idalJ;a1erre0stavo adolfo made0;ro;dalajara,naj0;ua0;to;eFhiCiudad Ao3u0;au1ernava0;ca;htemoc,titlan izcalli;a4l2yo0;ac0;an;i0onia del valle;ma;cChui0tzacoalc2;la;lopez mate0nezahualcoyotl;os;ap1lpancin0;go;as;laya,ntral 0;mexic0time;an,o;enito6uenavis0;ta;capulco3guascalientes,lvaro obreg2zcapotz0;al0;co;on; de0; juar0;ez|America/Cancun¦cancun,eastern standard time - quintana roo|America/Merida¦c0merida;ampeche,entral time - campecheyucatán|America/Monterrey¦c5g4mon3sa1t0victoria de durango;ampico,orreon;ltillo,n0; nicolas de los garza,ta catarina;clova,terrey;omez palacio,uadalupe;entral time - durango coahuilanuevo leóntamaulipas (most areas),iudad 0;apodaca,general escobedo,madero,victoria|America/Matamoros¦central time us - coahuilanuevo leóntamaulipas (us border),heroica m0m0nuevo laredo,reynosa;atamoros|America/Mazatlan¦culiac1los mochis,m0tepic;azatl0exico/bajasur,ountain time - baja california surnayaritsinaloa;an|America/Chihuahua¦chihuahua,m0;exic1ountain 0;mexico,standard time (mexico),time - chihuahua (most areas);an pacific standard time,o pacific|America/Ojinaga¦ciudad juarez,mountain time us - chihuahua (us border),ojinaga|America/Hermosillo¦ciudad obregon,hermosillo,mountain standard time - sonora,nogales|America/Tijuana¦america/e1e1mexic0pacific time us - baja california,tijuana;ali,o/bajanorte;nsenada|America/Bahia_Banderas¦bahia0central time - bahía de0; banderas|America/Managua¦man1ni0;!car0;agua|America/Panama¦pa0san miguelito;!nama|America/Lima¦arequiAc6huanc9i5juliaca,lima,p2sant1t0;acna,rujillo;a anita   los ficus,iago de sur5;e0iura,ucall7;!ru0t;! standard time;ca,quitos;allao,hi1us0;co;cl0mbote;ayo;pa|America/Miquelon¦m8p6s0;aint pierre1t0; pierre a3. pierre & miquelon s2;! 0;a1s0;tandard time;nd1;ierre0m; m0;iquelon|America/Puerto_Rico¦atlantic standard time,bayamon,p0;r,uerto rico|America/Asuncion¦asuncion,c3p0san lorenzo;araguay1y0;!st,t;! standard time;apiata,iudad del este|America/Paramaribo¦paramaribo,s0;r1uriname0;! time;!t|America/El_Salvador¦el1s0;an0oyapango,v; salvador|America/Grand_Turk¦grand turk,t0;c,urks and caicos|America/Port_of_Spain¦america/virg0port of spa0;in|America/New_York¦a0Pb0Mc0Fd0Ee0Af06g04hialeah,i01jZkYlexingtonXmTnMoKpIquHrDsAt7u5v3w0yonkers;ashington1est 0inston salem,orcD;raEvirgin03;! dc;ermont,irginia0;! beach;nited states,s0;!/0J;a0enne1he bronx,oleD;llaha0mpa;ssee;outh 1t0;. petersburg,aten3;bo0AcC;a2hode1ichmo04och0;ester; is01;lei2;eens,intana roo;ennsylvanMhiladelphMittsbur0rovidence;gh;hio,rlan0;do;ew3or1y0;!c;folk,th c0;aroliD; 0ark,port news;hampshiWje8york0;! staS;a1eads,i0;ami,chig1;ine,nhatt0ryLssachusetts;an;! fayetN;entucky,nox9;acks2e0;rsey;ndia1r0;on5;na;eorg0reensboro;ia;ayette1l0ort lauderda2;!orida;vil0;le;ast0dt,st; flatbush,ern0;! 0;(most areas),standard time;elawa9urham;ape coral,h3incinnati,leve1o0;lumbus,nnecticut;la0;nd;a0esapeake;rlot0ttanooga;te;altimo1o0rooklyn,uffalo;st3;re;kr1merica 0tlanta;eastern;on|America/Detroit¦detroit,eastern - mi (most areas),grand rapids,us/michigan|America/Kentucky/Louisville¦america0kentucky0;/louisville|America/Kentucky/Monticello¦kentucky/monticello|America/Indiana/Indianapolis¦americ0indian0us/east-indiana;a/indianapolis|America/Indiana/Vincennes¦indiana/vincennes|America/Indiana/Winamac¦indiana/winamac|America/Indiana/Marengo¦indiana/marengo|America/Indiana/Petersburg¦indiana/petersburg|America/Indiana/Vevay¦indiana/vevay|America/Chicago¦aVbScQdPfort worth,gOhNiLkZlImBn7o6plano,s3t1us/02wi0;chiFsconsV;ex0ulsa;!as;a0hreveport,ou4t 1;int 0n antonio;louGpaul;klahoWmaha,verland park;ashLe1or0;th dako7;braska,w 0;orleans,south me6;adisMe5i1o0;biHntgomery;lwaukee,nne1ss0;issippi,ouri;apol6so0;ta;mph4;aredo,i0ouisiana,ubb1;ncoln,ttle r0;ock;llino0owa,rving;is;oustAunts5;arland,rand prairie;allAes moines;dt,entral0hicago,orpus christi,st;! (most areas);aton rouge,rowns0;vil0;le;laba7m5r1ust0;in;k1lingt0;on;ans0;as;arillo,erica 0;central;ma|America/Indiana/Tell_City¦indiana/tell city|America/Indiana/Knox¦indiana/knox,us/indiana-starke|America/Menominee¦central - mi (wisconsin border),menominee|America/North_Dakota/Center¦north dakota/center|America/North_Dakota/New_Salem¦north dakota/new salem|America/North_Dakota/Beulah¦north dakota/beulah|America/Denver¦a1colorado springs,denver,el paso,m0navajo,salt lake,us/mountain;dt,ountain (most areas),st;lbuquerque,merica/shiprock,urora|America/Boise¦america mountain,boise,mountain0;! 0;- id (south) or (east),standard time|America/Phoenix¦a8c7g5idaho,m4n3phoenix,s2t1u0wyoming;s/a7tah;empe,ucson;cottsd3inaloa,onora;ayarit,ew mexico;aryv1esa,onta4st - arizona (except navajo);ilbert,lend0;ale;handler,olorado;rizo0;na|America/Los_Angeles¦aZbaXcVfRgarden grove,hOirviNlJmoGnFoCp8r7s0tacoma,us/00washington state;a1eattle,f,p0tocktPunrise manor;okaLringF;cramenFn0; 1ta 0;aPclariR;bernardiNdiego,fran0jo4;!cisco;ancho cucamonga,eLiver5;a0dt,ort5st;cific1radi0;se;! standard time;ak1cean0regDxnard;side;land;evada,orth las6;des1reno0; valley;to;a1o0;ng4s angeles;!s0; vegas;ne;enders1untington0; beach;on;onta2re0;mont,s0;no;na;a2hula vis0;ta;ja ca0kersfield;lifornia;merica 0naheim;pacific|America/Anchorage¦a0us/alaska;h4k4laska0nchorage;! 1n0;! s1;(most areas),s0;tandard time;dt,st|America/Juneau¦alaska - juneau area,juneau|America/Sitka¦alaska - sitka area,sitka|America/Metlakatla¦alaska - annette island,metlakatla|America/Yakutat¦alaska - y0y0;akutat|America/Nome¦alaska (west),nome|America/Adak¦a0hawaii standard time,us/aleutian;dak,leutian islands,merica/atka|America/Montevideo¦montevideo2u0;ruguay1y0;!st,t;! standard time|America/Caracas¦alto barinJbarIcCguaAm7p6san5turmeEv0;alencia,e0;!nezuela0t;! 0n;standard t0t0;ime; cristobal,ta teresa del tuy;eta4uerto la cruz;a0ucumpiz;raca0turin;ibo,y;ren8ti0;re;a4iudad 2o1u0;a,m2;ro;bolivar,guay0;ana;bim1rac1;in0quisimeto,uta;as|Asia/Dubai¦a4dubai,g2musaff1om0ras al khaim1sharj1;!an;ah;st,ulf0;! standard time;bu dhabi,jman|Asia/Kabul¦af1herat,jalalabad,ka0mazar e sharif;bul,ndahar;!ghanistan0t;! 0;standard t0t0;ime|Asia/Yerevan¦a0caucasus1yerevan;m,rmenia0;! standard time|Asia/Baku¦az0baku,ganja,lankaran,sumqayit;!erbaijan0t;! standard time|Asia/Dhaka¦asia/dacca,bDcBd9jess8khul7mymensingh,na4pa3ra2s1t0;angail,ungi;aid8hib4ylhet;jshahi,ng7;b3ltan,r naogaon;gar5r0t3;ayan0singdi;ganj;na;ore;haka,inaj0;pur;hattogram,o0;milla,x's bazar;a0d,ogra;gerhat,ngladesh0rishal;! standard time|Asia/Brunei¦b0;dt,n1runei0;! darussalam time;!t|Asia/Thimphu¦asia/thimbu,b0thimphu;hutan0t;! time|Asia/Shanghai¦0:3I;1:38;2:36;3:39;4:3C;a3Eb31c2Nd2He30f2Cg26h1Qji1Ek1Bl0Ym0Wn0Tordos,p0Pq0Lrizh10s08t01wSxLyEz5;aoCh6i5ouc3unyi;bo,go0;a7en6ouk2u5; c3h33maWzh2;g2Vj1Izh2;b1Ung5o3D;jiakou5zh2;! shi xuanhua qu;ya0z27;an9i7u5;ci,e18n5;c3fu;b4c9n5ya0;cZgk2;c3g5ji,t2S;j17qu1sh16zh2;i6uc5;ha0;a6n5uyi0;di,gt2Nh1Fi0pu,t2Nx13ya0;m17n5;!g5ni0t0Eya0;t1ya0;aBe9u5;h6so0w1Bx5zh2;i,ue;a5u;i,n;i0Hn5;sh1zh2;fang5nxi1;di1;a8i6ong5;chuans0XhDli02sh1;an5eli0;j4sh0Z;i6ng5;gu,sh1;an,hec1Wyu1zh2;anmi0hAi8u5;i5zh2;h5zh2;ua;c5pi0;hu1;a7en6i5uangya14;jiaz15qi,y1;gli,ya0zh0G;n6o5s0I;gu1xi0;g5t2;h1Rqiu,rKyu;i5uan1J;aFn5o14qih0N;g5huangdH;dGh1N;an0Ting7rc,u5;ti1yang5;! H;ding0QxZ;an5eijYingbo;ch5ji0ni0to0ya0;a0o0;entoug2ianRuda5;njU;aEi8u5;anc3o6qi5;ao;he,ya0;a7jPn5upansh01;fTxia 5yi;chengguanI;n0Do5;c3y5;a0u1;i0Wn5ohek2;g5zh2;fa0;ai6un5;mi0sh1;fe0yu1;'1aAe9l4n6u5xi;jCt0W;an,c3g5i0zh2;de5li0zh2;zhE;ya0;musi,n8o5xi0;j6z5;uo;ia0;g5shF;m7xi;aFeBkt,ohhot,u5;a6i0Dlan ergi,m5n1;en;i7ng5y4;ga0s5;hi;'1b8n1;bi,f7ga0ng5ze;sh5ya0;ui;ei;i7n5rb4;d1g5;u,zh2;c3k2l5;ar;a9u5;an6i5li;l4ya0zh2;g5k2;do0yu1zh2;nsu,opi0;en7o6u5;ji1shQx4zh2;sh1;d2g5;hua0;a6eNong5;gu1hT;d6lian5ndo0qi0to0;!g;o5uk2;nghP;angHh5n,t;aAen7i5oYuG;fe0na5;! standard K;g5zh2;d5zho0;e,u;ng6o5;ya0zh2;ch7de,sh6zh5;i,ou;a,u;un;zh2;aBe5;i6n5;gbu,xi;'1h7jing5;! 5;time;ai;i7o5yan nur;di0t2;ou;c3sh1y4;an;he0;nAsia/5;ch6harb4;in;o5ungki0;ng5;qi0;da,qi0sh5ya0;an,un;ng|Asia/Urumqi¦a6changji,huoche5k3shihezi,turp2urumqi,xin1zh0;anjia4ongsh1;jiang time,yu0;an;a0orla;ramay,s2;ng;ksu,ral,sia/kas0;hgar|Asia/Nicosia¦cy0nicosia;!prus0;! (most areas)|Asia/Famagusta¦famagusta,northern cyprus|Asia/Tbilisi¦ge1kuta0tbil0;isi;!orgia0t;! 1n0;! 0;standard time|Asia/Hong_Kong¦h0kowloon,tsuen wan;k2ong0; kong0kong;! standard time;!st|Asia/Jakarta¦bScQdepPiNjKkediri,lJmGpArengasdengklPs4t2w0yogyakM;est0ib; indonesia,ern indonesia time;a0egal;n4sikmal3;ema4itubondo,outh tan3u0;kabumi,medaRra0;b0kF;aya;ge0;raN;a4e1robolinggo,urw0;akAokerto;ka1ma0rcut;laJtangsiantar;long2nbaru;daHl3mulaHruH;a1ed0;an;diun,laE;embaD;a0ember;k0mbi,vasumatra;arta;d,ndonesia0;! western;ok;i0urug;ampea,bino5leungsir,mahi,putat,rebon;a1e0injai,ogor;kasi,ngkulu;nd0tam;a0u1; aceh,r lampu0;ng|Asia/Pontianak¦borneo (westcentral),pontianak,tanjung pinang|Asia/Makassar¦b6c4denpa3indonesia central,k2l1ma0palu,samarinda,wita;kas2nado,taram;abuan bajo,oa jan7;endari,upang;sar;entral indonesia0ity of bal3;! time;a0orneo (eastsouth) sulawesi/celebesbalinusa tengarra timor (west);l0njarmasin;ikpap0;an|Asia/Jayapura¦ambon,east0indonesia eastern,jayapura,new guinea (west papua / irian jaya) malukus/moluccas,wit; indonesia,ern indonesia time|Asia/Jerusalem¦ashdod,beersheba,haifa,i2j0petah tiqwa,rishon leziyyon,tel aviv,west je1;e0mt;rusalem;d1l,srael0;! standard time;dt,t|Asia/Kolkata¦0:3C;1:3K;2:2D;3:3L;4:3I;5:38;a36b2Ec25d1Xe1Vf1Tg1Gh1Di19j14k0Ql0Lm0Dn06odis3KpWquthbull5rOsGtAu9v6warang2Nyamun1Q;a7el1Vi6;jayawa2Wsakha0IzianagD;doda2Prana12;daip0jja24lhasn1ttar pradesh;a9eYh8iru6umk0;chirap0Nnelve2p6vottiy0;a39p0;ane,iruvananthapur0Ooothuku2Zriss0;mb6njo1Y;ar0M;aCecunder4hAi9lst,o8r1Gu6;jan37r6;at,endr1D;l5nip2O;k3liguLngrau2rK;ahj20i6ri2Pya0M;mo1Nvaji08;har1Ylem,mbh25ng2t05ug0Z;a7e0Foh6;iJtak;ebare2iAj8m6nc1Htl0Burke37;ag6g6p0;und09;a6kot;hmund27sth2B;ch0p0;aAimp9roddat0u6;ducher24n6rn18;a6e;sa;ri;li,n8rbha7t6;ia2Vna;ni;chku2Ti6;ha2Gp22;a8e7izam4o6;i1Wwrang5;l0Tw del0Z;di2Kg8i0Fjaf2Fn6re2Oshik,vi mumb16;ded,g6;i,loi j1W;ercoil,p0;a9eerut,irz5o8u6yso0Z;lugu,mb11rwa1Jzaffar6;n1p0;nghyr,rad4;chili8d7harasht1Gleg08n6thu1Gu;ga0Jip0;hya,ur0W;patnH;a8u6;cknow,dhia6;na;l bahadur6t0; n1;aEhaCo9u6;kat7lt6rno1P;a2i;pal2;l6rXta,zhikode;h5ka1Kl6;am;nd6ragp0;wa;kina14l9marPnp0r6shmir,tih3;i7na6ol ba19;l,tW;mn1;lakuric04y12;a7han6odOunagadh;si;b0Sip0l7m6;mu,n1shedp0;andh3gHna;chalkaranji,mph0Jn6st;!d6;ia6o01;! standard time,n;a7is3ospet,u6;b2g2;o0Ip0ridw3;aDhazi4oAreater noi0Nu7wali6y05;or;jar0PlbarRnt0rg7wa6;ha12;aon;rak7sa6;ba;hp0;juw9n6ya;dh7g6;an1;in1;aka;ar6iroz4;id4rukh4;l6taw0M;loG;aBe9h7indigul,ombPurg6;!ap0;anb0Uul6;ia;hra dun,l6was;hi;rbhan6vange9;ga;a09h9o6uttack;ch7imbato6;re;in;a7enn6;ai;nd6pM;a6i0C;!nn1;aOeLhCiAor8rahm5u6;landshahr,rh6;anp0;iv2;li;d3har sharif,j5kan07l6;asp0imoD;aBi8op7u6;baneshw3sav6;al;l7wan6;di,i;ai,wa7;g7ratp0tpa6vn1yand3;ra;alp0;l6ngaluru;gaum,la6;ry;hBli,r7thin6;da;a7ddham6eilly;an;n1s6;at;a7rai6;gh;ramp0;gQhmLizawl,jmKkoRlHmDnant5rrBs7urang4va6;di;ans8ia/ca6;lcut6;ta;ol;ah;ap0;arnath,batt0r6;ava6its3oA;ti;ur;appuz7i6lah4w3;garh;ha;er;adn1ed4;ab6;ad;ag3;ar;arta6ra;la|Asia/Baghdad¦a4ba3dihok,erbil,i2k1mosul,na0ramadi;jaf,sirB;arbala,irkuk,uwait;q,raq;ghdad,sr9;bu ghurayb,d diw6l 5rab0s sulaym6;! 3i0;a0c;!n0;! 0;standard time;amar2basrah al qadim2falluj2hill2kut,mawsil al jadid2;an0;iy0;ah|Asia/Tehran¦aRbNgorgXhamWiKkCmaBn8orumiy7pasragad branch,q4rasht,s2t1varam6yazd,za0;hedWnjW;abHehrV;a0hirSirjU;bzevar,nandEri,v3;a0om;rchak,zv0;in;eh;a0eyshabur;jaf0zar0;ab4;layer,shh3;a4erman3ho0;meyni sErram0wy;ab0sD;ad;!shah;h1r0;aj;riz;r0sfahC;!an0dt,st;! standard time;a2irjand,o0uk9;jnu0ruje0;rd;b3ndar abbas;b4hv3m2r1zads0;hahr;ak,dabil;ol;az;ad0;an|Asia/Amman¦amm1irbid,jo0russeifa,wadi as sir,zarqa;!rd0;an|Asia/Tokyo¦0:11;1:19;a17ch15fu0Ygifu13h0Ni0Hj0EkYmSnLoJsEt8u7waka04y2;a5o2;k2no;kaic1Ao2;ha0Xsu0;maJo;ji,tsun0E;aka6o2sukuba;k4makom04y2;a0So2;hNna0ta;oro02us0Pyo04;m0Irazu0sa1tsu1;a4endZhi3o0u2;i0Yzu0;monose1zuo0;ita0Lk2ppoKsebo;ai,u05;dawa04i0Uka2sa0t0D;ya0Iza1;a5eyaga0Oi2umazu;i3shi2; tokyo0Hnomiya ha0F;ga0P;g2ha,ra0F;a2oW;no,o0sa1;a4i2orio0;na2to,yaza1;mirinkan,to;chiCeb3tsu2;do,m7ya06;as0H;aAi8o6u2y5;mam4r3shi2;ro;ashi1e,uG;oto;be,c0Bfu,ri2shigaJ;yaY;shiwa2takyushu;da;gosUkogawacho honmJmirenjaku,na7s4wa2;g2sa1;oe,uc05;hiZu2;g2kabe;ai;zaW;apan2dt,oetIp,st;! standard ti2;me;bara1chi3ta2wa1zu2;mi;ha4n2;omi2;ya;ra;a7i2oncho;meAr3t2;acP;a3os2;a1hiB;kaLtsu0;chi4kodate,mam2;at2;su;nohe,o2;ji;ji7ku2;i5o0s2ya3;hi2;ma;ka; sB;!sa5;i2ofu;ba,g4;geoshimo,k5mag3njo,omori,sahika2tsugi;wa;asa1;ki;as3i2;ta;hi|Asia/Bishkek¦bishkek,k0osh;g2yrgy0;stan,zstan0;! time;!t|Asia/Pyongyang¦chongjin,h5k3n2pyongya8s0won6;ariw0inui8unch'0;on;amp'o,orth korea;a0p;eso3nggye;a1ungnam,ye0;san;e1mhu0;ng;ju|Asia/Seoul¦anPbuMchHdaeGgChwaseoQiBjeAk7m6pohaFrok,s2u1wonJy0;aCeosu;ijeongbuPlsL;e1outh korea,u0;nEwH;joAo0;ngnamLul;asGokpo;imhae,orea0r,st,wangmyo7;! 0n 0;standard time;ju,on8;cCksBn6;angneu2oyaDu1wa0;ng5;mi,ns8riC;ng;gu,je4;angw3eon2in1un0;che2;ju;an,gju6;on;c1s0;an;heon2;san1ya0;ng0; si|Asia/Almaty¦a8central asia6east kazakhstan7k2nur sultan,p1s0taraz,ust kamenogorsk;emey,hymkent;avlodar,etropavl;a0z;ragandy,zakhstan0;! 0;(most areas),eastern;! standard0; time;lm0stana;aty,t|Asia/Qyzylorda¦kyzyl1qyzylorda0;!/kyzylorda/kzyl-0;orda|Asia/Qostanay¦k0q0;ostanay|Asia/Aqtobe¦a0;k1qt0;o1öbe/ak0;to0;be|Asia/Aqtau¦a1kazakhstan western,mangghystaū/mankis2west asia0;! standard3;lma1q0;tau; ata,-ata0; time|Asia/Atyrau¦atyra0;u,ū/atirau/gur'yev|Asia/Oral¦oral,west kazakhstan|Asia/Beirut¦bei2e1l0ra's bay2;b,ebanon;astern european standard time,urope eastern;rut|Asia/Colombo¦colombo,dehiwala mount lavinia,lk,moratuwa,sri lanka|Asia/Yangon¦asia/rango3b2kyain seikgyi township,m0nay pyi taw,pathein,sittwe,yang3;a0eiktila,m,onywa,yanmar;ndalay,wlamyine;ago,urma;on|Asia/Ulaanbaatar¦m2ula0;anbaatar0n bator,t;! standard time;n,ongolia0;! (most areas)|Asia/Hovd¦bayan-ölgiigovi-altaihovduvszavkhan,hov3w0;. mongolia 4est0; 0ern 0;mongolia;d0t;! 0;standard time|Asia/Choibalsan¦choibalsan,dornodsükhbaatar|Asia/Macau¦asia/macao,m0;acau,o|Asia/Kuala_Lumpur¦alor setar,bukit mertajEgeorge town,ipoh,johor bahDk8m4petali3s0taipiC;e1hah alDu0;ba1ngai petani;pa9remb7;ng jaya;ala0y;cca,ysia0;! 0;(peninsula),time;ampung baru suba3la3ota bha4ua0;la 1nt0;an;lumpur,terengganu;ng;ru;am|Asia/Kuching¦k2miri,s0tawau;a0ibu;bahsarawak,ndakan;ota kinabalu,uching|Asia/Kathmandu¦asia/kat3biratnagar,kath3n1p0;atan,okhara;epal,p0;!t;mandu|Asia/Manila¦an04bWcRdaPgeneral santOiMlJmCnaBoAp4quezIsan1ta0zamboanga;clobZguig,rlac,ytE; 1t0;a ro2ol;fernando,jose del monte,pab01;a3h1uerto prince0;sa;!ilippine0t; standard time,s;gadiRnalanoy,s0;ay,ig;longapo,rmoc;ga,votQ;a0eycauayN;balacat,gugpo poblaci4kati,l3n0;da1ila,silingLtamp0;ay;luyong,ue;ingDol6;on;a1egaspi,i0ucena;bertad,pa;pu lapu,s p4;l0mus;igCoiH;os;smar0v5;inB;a0ebu,otabato;b1gayan de oro,in5l0;amba,ooc6;anatu5uy0;ao;a4inan2u0;d0tu2;ta;!gon0;an;co1guio,tang0;as;lod,or;geles,tipo0;lo|Asia/Karachi¦bKchiniJdera ghaziHfaisalGgujraFhyderGislamGjhang sadr,kDlaCm7nawabshah,okaAp4quetta,ra3s0;a1h0ialkIukkM;ahkHekhupu8;ddiqDhiwal,rgodha;him yarDwalpindi;akistan1eshawar,k0;!t;! standard time;a3i1u0;lt9zaffar7;ngo0rpur khas;ra;lir cantonment,rd6;hore,rkana;a0otli;moke,rachi,s8;n5t;abad; kh0;an;ot;a1himber,ure0;wala;hawalp0ttagram;ur|Asia/Gaza¦gaza1p0;alestine,s;! strip|Asia/Hebron¦east jerusalem,hebron,west bank|Asia/Qatar¦ar rayyan,doha,qa0;!tar|Asia/Yekaterinburg¦chelyabin7eka5k4magnitogor7nizhn3or2perm,s1tyumen,ufa,yek0zlatoust;a4t;terlitamak,urgut;enburg,sk;evartov3y tagil;amensk ural'skiy,urgan;terinburg0;! standard time;sk|Asia/Omsk¦oms0;k0t;! standard time|Asia/Novosibirsk¦n0siber4;. central asia 4o0;rth central as2v0;osibirsk0t;! 1;ia;standard time|Asia/Barnaul¦b0;arnaul,iysk|Asia/Tomsk¦tomsk|Asia/Novokuznetsk¦kemerovo,novokuznet0prokop'yev0;sk|Asia/Krasnoyarsk¦kra0north asia1;snoyarsk0t;! standard time|Asia/Irkutsk¦angar2brat2irk0north asia east1ulan ude;t,utsk0;! standard time;sk|Asia/Chita¦chita|Asia/Yakutsk¦blagoveshchensk,yak0;t,utsk0;! standard time|Asia/Khandyga¦khandyga|Asia/Vladivostok¦k2vla0;divostok0t;! standard time;habarovsk0omsomolsk on amur;! vtoroy|Asia/Ust-Nera¦ust nera|Asia/Magadan¦mag0;adan0t;! standard time|Asia/Sakhalin¦sak0yuzhno sakhalinsk;halin0t;! standard time|Asia/Srednekolymsk¦chokurdakh,sre0;dnekolymsk0t;! standard time|Asia/Kamchatka¦kamchatka,pet0;ropavlovsk0t; kamchatsky,-kamchatski standard time|Asia/Anadyr¦ana0;dyr0t;! standard time|Asia/Riyadh¦a6burayd5dammam,ha4jedd5khamis mushait,me3najran,riyadh,sultan5ta2y0;anbu,e0;!men;'if,buk;cca,dina;'il,far al batin;ah;bha,l 0;hufuf,jubayl,kharj,mubarraz|Asia/Singapore¦s0woodlands;g1ingapore0;! standard time;!t|Asia/Damascus¦a4d3h2latak1sy0;!r0;ia;am2oms;amascus,eir ez zor;leppo,r raqq0;ah|Asia/Bangkok¦bangkok,ch8h6indochina3mueang nontha9na2pak kret,s0udon thani;amut prakan,e asia0i racha,outh east asia;! standard t3;khon ratchasima,m dinh;! 0;(most areas),t0;ime;a0ue;iphong,noi,t y2;iang m1on 0;buri;ai|Asia/Dushanbe¦dushanbe,t0;ajikistan1j0;!t;! time|Asia/Dili¦dili,east timor1tl0;!t;! time|Asia/Ashgabat¦as4t0;m2urkmen0;a3istan0;! standard time;!st,t;hga0ia/ashkhabad;bat|Asia/Taipei¦banqiao,h7k5roc,t0;a0w;i0oyu2;ch3n1pei0w1;! standard time;an;aohsi0eel0;ung;sinchu,ualien|Asia/Samarkand¦bukhara,nukus,qarshi,samarkand,uzbekistan 0;(west),standard time|Asia/Tashkent¦andij2namangan,qo`q2tashkent,uz0;!bekistan0t;! (east);on|Asia/Ho_Chi_Minh¦asia/saig4bien hoa,can tho,da 2ho chi minh,nha tr3qui nh4rach gia,sa dec,thi xa phu my,v0;ietnam0n,ung tau;! (south);lat,n0;ang;on|Atlantic/Bermuda¦b0;ermuda,m|Atlantic/Cape_Verde¦c0;a1v0;!t;bo verde,pe verde0;! standard time|Atlantic/Canary¦canary0las palmas de gran canaria,santa cruz de tenerife;! islands|Atlantic/Stanley¦f0stanley;alkland1k0;!st;! island0;!s0;! summer time|Atlantic/Faroe¦atlantic/faeroe,f0;aroe0o;! islands|Atlantic/South_Georgia¦gs,south georgia0;! time|Atlantic/Reykjavik¦i0reykjavik;celand,s|Atlantic/Madeira¦madeira0;! islands|Atlantic/Azores¦azo0hmt;res0st,t;! standard time|Australia/Lord_Howe¦australia/lhi,l0;h2ord howe0;! 0;island,standard time;dt,st|Australia/Hobart¦australia/1hobart,tasmania0;! (most areas);currie,tasmania|Australia/Melbourne¦australia/victoria,geelong,melbourne|Australia/Sydney¦au0c4new south wales (most areas),sydney,wollongong;!s0; east3tralia0;! eastern,/0n eastern 4;act,c0nsw;anberra;!ern0;! 0;standard time|Australia/Broken_Hill¦australia/yancowinna,broken hill,new south wales (yancowinna)|Australia/Brisbane¦a1brisbane,gold co3logan,queensland0townsville;! (most areas);e2ustralia0;/queensland,n e0;ast;dt,st|Australia/Lindeman¦lindeman,queensland (whitsunday islands)|Australia/Adelaide¦a2cen0south1;. australia 4tral0; australia;c3delaide,ustralia0; central,/south,n central0;! 0;standard time;dt,st|Australia/Darwin¦australia/north,darwin,northern territory|Australia/Perth¦a3perth,w0;. australia6est0; australia,ern australia0;! (most areas);ustralia1w0;dt,st; western,/west,n west0;!ern0; standard time|Australia/Eucla¦a0cw5eucla,western australia (eucla);cw6us0; central w2tralia0; centralwestern,n central western0;! 2;. 1e0;st;standard time;dt,st|Indian/Cocos¦c0;c3ocos0;! island0;!s0;! time;!t|Indian/Christmas¦c0;hristmas1x0;!t;! island0;! time|Indian/Chagos¦british indian ocean territory,c4i0;ndian 1o0;!t;c1ocean0;! time;hagos|Indian/Mauritius¦m0port louis;auritius1u0;!t;! standard time|Indian/Maldives¦m0;aldives1v0;!t;! time|Indian/Reunion¦r0;e1éunion0; time,crozetscattered islands;t,union|Indian/Mahe¦mahe,s0;c,eychelles0;! time|Indian/Kerguelen¦french southern2kerguelen1tf0;!t;!st paul islandamsterdam island;! 0;& antarctic time,and antarctic0;! lands|Europe/Andorra¦a0;d,ndorra|Europe/Tirane¦al1tiran0;a,e;!bania|Europe/Vienna¦a0donaustadt,favoriten,graz,linz,vienna;t,ustria|Europe/Brussels¦antwerpen,b0charleroi,gent,liege;e0russels;!lgium|Europe/Sofia¦b0plovdiv,sof2varna;g,u0;lgar0rgas;ia|Europe/Minsk¦b2h1m0viteb3;ahilyow,in2;omyel,rodna;abruy0elarus,rest,y;sk|Europe/Zurich¦geneve,li0swiss time,zurich;!echtenstein|Europe/Prague¦brno,ostrava,prague,s0;k,lovakia|Europe/Berlin¦a00bScQdOeMfrLgeJhaEkClAm4n3oberhaus04rostoBs1w0;andsbek,iesbad03uppert8;a0tuttgaL;arbrueck01xony;eue neustadt,uernbeY;a3e2iddle european,oenchengladba1u0;enst9ni0;ch;st,t;gdeSinz,nnheim,rienth0;al;eipzJuebe0;ck;a0iKoeln,rL;rlsruhe,ssJ;gPlle (saale),m1nnov0rM;er;burg0m;! 0;mitte,nord;lsenkirJrmany0;! (most areas);ankfurt am maDeiF;imsbuettArfu0ssH;rt;e,ortmund,resdFu0;esseldorf,isB;e0hemnitz;ntral europe,st,t;avaria,erl6iel5o2r0;aunschwe0emA;ig;chum0nn;! hord0;el;efeld;in;a2ltona,ugs0;bu0;rg;ch0;en|Europe/Copenhagen¦arhus,copenhagen,d0;enmark,k|Europe/Tallinn¦e0tallinn;e,stonia|Europe/Madrid¦aMbJcHeGfuenDgCjerez de la frontera,lBm8ovieFp6s1terrassa,v0zaragoza;alladol9igo;a1evilla,pain0;! (mainland);badell,n0; sebastian,t0; marti,ander,s montjuic;a0uente de vallecas;lma,mpD;a0ostolGurcF;dr0laga;id;atiEeganD;asteiz / vitorBijon,ran1;carral el par1labr0;ada;do;ixample,lche,s;a0iudad lineal;rabanchel,stello de la pla7;a0ilbao,urgos;da0rce0sque;lo4; coru3l0;cala de henar1icante,mer0;ia;es;na|Europe/Helsinki¦espoo,fi1helsinki,t0vantaa;ampere,urku;!nland|Europe/Paris¦bordeaux,ceDeurope central,frBl9m8n6paris,r3s0toulouE;aint 1t0; 0rasbourg;etienne;e1omance0;! A;ims,nn1;ant0i5ormandy;es;arsei1ontpellier;e havre,i0yon;lle;!an0;ce;ntral european 1rgy pontoi0;se;standard time|Europe/London¦a0Hb05c02dZeXgUhSiPjeOkingston upon hull,lJmHnBoxTp9reading,s1w0yF;arwick05igan,olverha7;heffield,o3t2u1w0;an4iH;ffolk,nderland,sUttM;afOoke on tre05;meUuth0;a1end on 0;sea;mptH;ly0orts0restG;mouth;ew4o0;r0ttinghamO;th0wD; y0amptonM;orkQ;castle upon tyne,port;ancheLi0;dlan4lton keynes;ancaMdn,e2i1o0ut6;nd5;ncolnKverP;e0icesterE;ds;!rsQ;psw1slingt0;on;ich;ampDert0;fordC;b1l0mt standard time;asgow,oucesterA;!-eA;dinburgh,s0urope/belI;sex;erby1o0udlF;rset;!sh5;a1ity of westmin0oventry,rawlC;ster;mbridge1rdiff;e8ir7lack5r2st,uckingham0;sh0;ire;adford,e1i0;st2tish;nt;po0;ol;kenhead,mingham;l1xl0;ey;fast;berdeen,rchway|Europe/Gibraltar¦gi0;!braltar|Europe/Athens¦athens,gr0thessaloniki;!eece|Europe/Budapest¦budapest,debrecen,hu0;!ngary|Europe/Dublin¦cork,dublin,eire,i0;e,reland|Europe/Rome¦b9c8florence,genoa,m7naples,p4rome,sicily,t2v0;a0eroA;!tican city;aran2rieste,u0;rin,scany;a1ra0;to;dova,lermo;essi3ilan;atan1orsica;ari,olog1resc0;ia;na|Europe/Vilnius¦k1l0vilnius;ithuania,t;aunas,laipeda|Europe/Luxembourg¦lu0;!xembourg|Europe/Riga¦e1kalt,l0riga;atvia,v;ast europe,e0;st,t|Europe/Monaco¦m0;c,onaco|Europe/Chisinau¦chisinau,europe/tiraspol,m0;d,oldova|Europe/Malta¦m0;alta,t|Europe/Amsterdam¦a3eindhov2groning2n1rot4t0utrecht;he hague,ilburg;etherlands,l;en;lmere stad,ms0;terdam|Europe/Oslo¦berg1oslo,s0;j,valbard and jan may0;en|Europe/Warsaw¦bDczestochowa,g9k7l5mokot8p3radFs2torun,w0zabrze;ars0rocl0;aw;osnowiec,zczec3;l,o0raga poludnie;land,znan;odz,ubl0;in;ato2iel3rak0;ow;d2li0;wi0;ce;ansk,ynia;i2y0;dgoszcz,t0;om;alystok,elsko biala|Europe/Lisbon¦amadora,europe western,lisbon,p2we0;st0t;! europe,ern european standard time;ort0t;o,ugal0;! (mainland)|Europe/Bucharest¦b3c2gala1iasi,oradea,ploies1ro0timisoara;!mania;ti;luj napoca,onstanta,raiova;ra0ucharest;ila,sov|Europe/Belgrade¦belgrade,n1pristina,s0;i,lovenia;is,ovi sad|Europe/Kaliningrad¦kaliningrad|Europe/Moscow¦ar0Cb09c06dzerzh05fet,grozn04ivano03kXlipet0EmQnMorel,pJrFs8t6v2w-su,y0zelenograd;a0oshkar oV;roslavl,sene01;asyl'evsky ostrHelikiLladi2o0ykhino zhulebS;l0ronezh;gograOogda;kavkaz,m07;a0uPver;ganrog,mbC;a4ever3hakhty,molen05ochi,t0yktyvkQ; 4a0;ryy osk0vrop0;ol;nRodvS;int 0rW;petersburg;ostov na donu,u1y0;azKbO;!ssia0;!n9;e1odolUsk0;ov;nza,trozavodS;a2izhn0ovorossiyR;ekamQi0;y novM;berezhnyye chelny,l'chik;a3dst,oscow1s0urmJ;d,k;! standar0;d time;khachka1r'0;ino;la;a2himki,ostroma,rasno0urG;d0gvargeisky;ar;l1z0;an;ininsk5uga;vo;yy;in8;entraln1he0;boksary,repovets;iy;el1ry0;an3;gorod;khangel'1mav0;ir;sk|Europe/Simferopol¦simferopol|Europe/Kirov¦kirov|Europe/Volgograd¦vol0;gograd,t,zhskiy|Europe/Astrakhan¦astrakhan|Europe/Saratov¦balakovo,saratov|Europe/Ulyanovsk¦ulyanovsk|Europe/Samara¦izhevsk,s0togliatti on the volga;am0yzran;ara0t;! standard time|Europe/Stockholm¦goeteborg,malmoe,s0;e,tockholm,weden|Europe/Istanbul¦a00bUcSdQeNgMiKkImDosmCs6t1u0v07zeytinburnu;eskuedYmrB;arsus,r3urkey0;! 0;standard t0t0;ime;!abzon,t;a3i1ultan0;beyJgazi;sIv0;as,erek;msun,n0;cakt5liurfa;aniye;a1er0uratpaH;kezefendi,sin;l0niF;atOt0;epe;a0irikkale,onMutahM;hramanmaras,rabaglFyseP;stanbul,zmi0;r,t;aziantep,ebze;lazig,rzurum,s0;en0kiC;l8yurt;eniz0iyarbakB;li;ankaCor0;lu,um;a1ur0;sa;gcil2hcelievl1likes5sak4t0;ikent,m9;er;ar;d5n2rnavutkoey,ta0;seh0;ir;kara,ta0;k0l0;ya;a1iyam0;an;na,paza0;ri|Europe/Kiev¦bila tserkHcherEdChorlBivano frankivDk7l6m4odessa,poltaHrivne,sumy,ternopil,u2vinnyts1z0;aporizhzh0hytomyr;ya;a,kraine0;! (most areas);a0ykolayB;ki5riupol;ut6v9;amyanske,h1iev,r0y8;emenchuk,opyv1yvyy rih;ark6erson,mel0;nytskyy;ivka;nipro,onet0;sk;kasy,ni0;h0vtsi;iv;va|Europe/Uzhgorod¦ruthenia,uzhgorod|Europe/Zaporozhye¦luhansk,sevastopol,zaporozh0;'ye/zaporizhia lugansk/luhansk (east),ye|Antarctica/Casey¦casey0;! time|Antarctica/Davis¦a1davis0;! time;ntarctica,q|Antarctica/DumontDUrville¦dumont0;-d0d1;'0’urville time;urville|Antarctica/Mawson¦mawson0;! time|Antarctica/Palmer¦chile standard time,palmer|Antarctica/Rothera¦rothera|Antarctica/Syowa¦syowa0;! time|Antarctica/Troll¦troll0;! research station|Antarctica/Vostok¦vost0;!ok0;! time|Antarctica/Macquarie¦macquarie0;! island|Pacific/Pago_Pago¦pa0samoamidway,us1;cific0go pago;/samoa|Pacific/Rarotonga¦c0rarotonga;k2ook0;! islands0;! standard time;!t|Pacific/Easter¦chile/easterisland,e0;as0mt;st,t0;!er0;! island0;! standard time|Pacific/Galapagos¦gal0;apagos,t,ápagos islands|Pacific/Fiji¦f0;iji1j0;!st,t;! standard time|Pacific/Chuuk¦chuuk1pacific/0;truk,y1;!/truky0;ap|Pacific/Pohnpei¦f3micro4p0;acific/1f,ohnpei0;!/0;ponape;m,rench poly0;nesia|Pacific/Kosrae¦kosrae0;! time|Pacific/Guam¦ch1guam,mp,northern mariana islands,west0; pacific1ern pacific;amorro0st;! standard time|Pacific/Tarawa¦gilbert islands0tarawa;! time|Pacific/Enderbury¦enderbury,phoenix islands0;! time|Pacific/Kiritimati¦ki3line islands0;! 0;standard t0t0;ime;!ri0;bati,timati0;! island|Pacific/Majuro¦m0;a0h;juro,rshall islands0;! (most areas)|Pacific/Kwajalein¦kwajalein,marshall islands time|Pacific/Noumea¦n0;c,ew caledonia0oumea;! standard time|Pacific/Nauru¦n0;auru0r;! time|Pacific/Niue¦n0;iue1u0;!t;! time|Pacific/Auckland¦auckland,christchurch,manukau,n0wellington;ew zealand1orth shore,z0;!dt,mt,st;! 0;standard t0t0;ime|Pacific/Chatham¦cha0nz-chat;dt,st,tham0;! 0;islands0s1;! s0;tandard time|Pacific/Tahiti¦society islands,tahiti0;! time|Pacific/Marquesas¦marquesas0;! 0;islands,standard t0t0;ime|Pacific/Gambier¦gambier0;! 0;islands,time|Pacific/Port_Moresby¦p0;apua new guinea0g,ort moresby;! (most areas)|Pacific/Bougainville¦bougainville,guinea0papua new guinea time;!n|Pacific/Pitcairn¦p0;itcairn0n;! time|Pacific/Palau¦p0;alau0w;! time|Pacific/Guadalcanal¦guadalcanal,s0;b,olomon0;! islands0;! time|Pacific/Fakaofo¦fakaofo,t0;k1okelau0;! time;!t|Pacific/Tongatapu¦nuku'alofa,to0;!nga0;! standard time,tapu|Pacific/Funafuti¦funafuti,t0;uvalu0v;! time|Pacific/Wake¦u2wake0;! island0;! time;m,s minor outlying islands|Pacific/Honolulu¦aleutian2h0pacific/johnston,us/hawaii;awaii0onolulu,st;! aleutian,-aleutian 1;! 0;standard time|Pacific/Efate¦efate,v0;anuatu0u;! standard time|Pacific/Wallis¦w0;allis0f;! 0;& futuna time,and futuna|Pacific/Apia¦apia,s2w0;est0s; samoa time,ern s0;amoa|ETC/GMT¦gmt|Etc/GMT¦coordinated universal1greenwich0;! mean0; time|Etc/UTC¦etc/uct,u0zulu;ct,niversal,tc|America/Argentina¦arNbKcHformosa,jGla EmBneuquen,pAquilmJr9sa1t0;ierra del fuego (tLucumán (tm);lta6n0; 2t0;a 0iago del estero;cruz (sc),fe;juan1luis0miguel de tucuman,salvador de jujuy;! (sl);! (sj);! (salpnqrn);esistencia,osario;araDilar,osadas;ar del p3e0oron;ndoza0rlo;! (mz);p0rioja (lr);lata;ose c paz,ujuy (jy);atamarca (ct) chubut (ch),or0;doba,rient0;es;ahia blanca,uenos aires0;! (bac0;f);!genti0;na|Australia/Currie¦tasmania (king island)|America/Godthab¦g3w0;est greenland1g0;st,t;! s3;l,reenland0;! 0;(most areas),s0western;tandard time|America/Kentucky¦eastern - ky (0louisville;louisville area),wayne)|America/Indiana¦central 3eastern - in (0fort wayne,indianapolis;crawfor1dadukmn),most areas),p0switzerlan1;i3ulaski);d);- in (0standard time;perry),star0;ke)|America/North_Dakota¦central - nd (0;m0oliv1;erc0orton rural);er)|Africa/Kinshasa¦c3ki2m0;a0bandaka;sina,tadi;kwit,nshasa;d,ongo|Africa/Luanda¦huambo,l0n'dalatando;obito,uanda|Africa/Addis_Ababa¦addis ababa,dire dawa,mek'ele,nazret|Africa/Dar_es_Salaam¦arusha,d1m0tanga,zanzibar;beya,orogoro,wanza;ar es salaam,odoma|Africa/Mogadishu¦berbera,hargeysa,jamaame,kismayo,m0;arka,ogadishu|Africa/Dakar¦dakar,pikine,t0;hies0ouba;! nones|Asia/Aden¦a0ibb,mukalla,sanaa,taiz;den,l hudaydah|Africa/Conakry¦c0;amayenne,onakry|Asia/Phnom_Penh¦ict,phnom penh,takeo|Africa/Harare¦bulawayo,chitungwiza,har0mut0;are|Indian/Antananarivo¦ant0toamasina;ananarivo,sirabe|Africa/Lubumbashi¦b3k2l1m0tshikapa;buji mayi,wene ditu;ikasi,ubumbashi;ananga,isanga1olwezi;e0ukavu;ni|Africa/Kampala¦kampala|Africa/Douala¦b1douala,edea,gar2kousseri,loum,m0ngaoundere,yaounde;ar1okolo;a1ert0;oua;foussam,menda|Africa/Bamako¦bamako|Africa/Brazzaville¦brazzaville,pointe noire|Africa/Lusaka¦k0lusaka,ndola;ab0it0;we|Africa/Ouagadougou¦bobo dioulasso,ouagadougou|Africa/Freetown¦freetown|Asia/Muscat¦muscat,seeb|Africa/Porto-Novo¦abomey calavi,coton0djoug0porto novo;ou|Africa/Niamey¦niamey,zinder|Africa/Lome¦lome|Africa/Kigali¦kigali|Europe/Zagreb¦split,zagreb|Europe/Sarajevo¦banja luka,sarajevo|Africa/Nouakchott¦nouakchott|Africa/Blantyre¦blantyre,lilongwe,mzuzu|Asia/Kuwait¦al ahmadi|Africa/Djibouti¦djibouti|Africa/Libreville¦libreville|Africa/Asmara¦asmara|Africa/Bangui¦bangui|Europe/Skopje¦skopje|Europe/Bratislava¦bratislava,kosice|Africa/Banjul¦serekunda|Africa/Bujumbura¦bujumbura|Europe/Ljubljana¦ljubljana|Europe/Podgorica¦podgorica|Africa/Gaborone¦gaborone|Asia/Vientiane¦vientiane|Asia/Saigon¦ho chi minh city|America/Port_Of_Spain¦vi0;!rgin islands|America/Port-au-prince¦h0;aiti,t|Pacific/Norfolk¦n0;f,orfolk 0;island0s1;! s0;tandard time|America/Buenos_Aires¦ar0;gentina standard time,st,t|Pacific/Midway¦s0;amoa standard time,dt,st|Asia/Katmandu¦nepal 0;standard t0t0;ime|Asia/Rangoon¦myanmar 0;standard t0t0;ime|Pacific/Truk¦chuuk time,truk|Pacific/Ponape¦ponape0;! time|America/Santa_Isabel¦mexico northwest,northwest mexico standard time,pacific 0;mexico,standard time (mexico)|Brazil/Acre¦act|Asia/Thimbu¦btt\";\n\n// strings that don't pack properly\nvar misc = {\n  'gmt+0': 'etc/Gmt',\n  'gmt-0': 'etc/Gmt',\n  gmt0: 'etc/Gmt',\n  'etc/gmt+0': 'Etc/Gmt',\n  'etc/gmt-0': 'Etc/Gmt',\n  'etc/gmt0': 'Etc/Gmt',\n  'msk-01 - kaliningrad': 'Europe/Kaliningrad',\n  'msk+00 - moscow area': 'Europe/Moscow',\n  'msk+00 - crimea': 'Europe/Simferopol',\n  'msk+00 - volgograd': 'Europe/Volgograd',\n  'msk+00 - kirov': 'Europe/Kirov',\n  'msk+01 - astrakhan': 'Europe/Astrakhan',\n  'msk+01 - saratov': 'Europe/Saratov',\n  'msk+01 - ulyanovsk': 'Europe/Ulyanovsk',\n  'msk+01 - samaraudmurtia': 'Europe/Samara',\n  'msk+02 - urals': 'Asia/Yekaterinburg',\n  'msk+03 - omsk': 'Asia/Omsk',\n  'msk+04 - novosibirsk': 'Asia/Novosibirsk',\n  'msk+04 - altai': 'Asia/Barnaul',\n  'msk+04 - tomsk': 'Asia/Tomsk',\n  'msk+04 - kemerovo': 'Asia/Novokuznetsk',\n  'msk+04 - krasnoyarsk area': 'Asia/Krasnoyarsk',\n  'msk+05 - irkutskburyatia': 'Asia/Irkutsk',\n  'msk+06 - zabaykalsky': 'Asia/Chita',\n  'msk+06 - lena river': 'Asia/Yakutsk',\n  'msk+06 - tomponskyust-maysky': 'Asia/Khandyga',\n  'msk+07 - amur river': 'Asia/Vladivostok',\n  'msk+07 - oymyakonsky': 'Asia/Ust-Nera',\n  'msk+08 - magadan': 'Asia/Magadan',\n  'msk+08 - sakhalin island': 'Asia/Sakhalin',\n  'msk+08 - sakha (e) north kuril is': 'Asia/Srednekolymsk',\n  'msk+09 - kamchatka': 'Asia/Kamchatka',\n  'msk+09 - bering sea': 'Asia/Anadyr',\n  // underscores in key names\n  'antarctica/south_pole': 'Pacific/Auckland',\n  'america/buenos_aires': 'America/Argentina/Buenos_Aires',\n  'america/coral_harbour': 'America/Atikokan',\n  'america/fort_wayne': 'America/Indiana/Indianapolis',\n  'america/knox_in': 'America/Indiana/Knox',\n  'america/porto_acre': 'America/Rio_Branco',\n  'america/santa_isabel': 'America/Tijuana',\n  'asia/tel_aviv': 'Asia/Jerusalem',\n  'asia/ujung_pandang': 'Asia/Makassar',\n  'asia/ulan_bator': 'Asia/Ulaanbaatar',\n  'atlantic/jan_mayen': 'Europe/Oslo'\n};\n\nconst isOffset = /(\\-?[0-9]+)h(rs)?/i;\nconst isNumber = /(\\-?[0-9]+)/;\nconst utcOffset = /utc([\\-+]?[0-9]+)/i;\nconst gmtOffset = /gmt([\\-+]?[0-9]+)/i;\n\nconst toIana = function (num) {\n  num = Number(num);\n  if (num > -13 && num < 13) {\n    num = num * -1; //it's opposite!\n    num = (num > 0 ? '+' : '') + num; //add plus sign\n    return 'Etc/GMT' + num\n  }\n  return null\n};\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset);\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'utc+5'\n  m = tz.match(utcOffset);\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'GMT-5' (not opposite)\n  m = tz.match(gmtOffset);\n  if (m !== null) {\n    let num = Number(m[1]) * -1;\n    return toIana(num)\n  }\n  // '+5'\n  m = tz.match(isNumber);\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  return null\n};\n\nlet lexicon = O(pckd);\nlexicon = Object.assign(lexicon, misc);\n// console.log(lexicon.ist)\n\n// add some redundant data to our lexicon\nObject.keys(lexicon).filter((k) => {\n  let val = lexicon[k];\n  if (typeof val === 'string') {\n    val = val.toLowerCase();\n    if (lexicon[val] === undefined) {\n      lexicon[val] = lexicon[k];\n    }\n  }\n});\n\n//try to match these against iana form\nconst normalizeOne = (tz) => {\n  tz = tz.replace(/^in /g, '');\n  tz = tz.replace(/ time/g, '');\n  tz = tz.replace(/ (standard|daylight|summer)/g, '');\n  tz = tz.replace(/ - .*/g, ''); //`Eastern Time - US & Canada`\n  tz = tz.replace(/, .*/g, ''); //`mumbai, india`\n  return tz.trim()\n};\n\n//some more aggressive transformations\nconst normalizeTwo = function (tz) {\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1');\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1');\n  tz = tz.replace(/\\beuropean/g, 'europe');\n  tz = tz.replace(/\\islands/g, 'island');\n  tz = tz.replace(/.*\\//g, '');\n  return tz.trim()\n};\n// even-more agressive\nconst normalizeThree = function (tz) {\n  tz = tz.replace(/\\(.*\\)/, '');\n  return tz.trim()\n};\n//\nconst find = function (str) {\n  if (!str) {\n    return null\n  }\n  str = str.toLowerCase().trim();\n  // lookup known abbreviations\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n\n  // -8hrs\n  if (/[0-9]/.test(str)) {\n    let etc = parseOffset(str);\n    if (etc) {\n      return [etc]\n    }\n  }\n\n  // start fuzzy-match against iana timezones\n  str = normalizeOne(str);\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  // 'eastern daylight'\n  let tmp = str + ' time';\n  if (lexicon.hasOwnProperty(tmp)) {\n    return lexicon[tmp]\n  }\n  // 'pacific'\n  tmp = str + ' standard time';\n  if (lexicon.hasOwnProperty(tmp)) {\n    return lexicon[tmp]\n  }\n\n  // -- harder normalizations --\n  str = normalizeTwo(str);\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  // -- HARDER normalizations --\n  str = normalizeThree(str);\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  // 'eastern daylight'\n  tmp = str + ' time';\n  if (lexicon.hasOwnProperty(tmp)) {\n    return lexicon[tmp]\n  }\n  // 'pacific'\n  tmp = str + ' standard time';\n  if (lexicon.hasOwnProperty(tmp)) {\n    return lexicon[tmp]\n  }\n\n  return null\n};\n\nvar metas = [\n  {\n    name: 'India Time',\n    abbr: null,\n    aliases: [\n      'india',\n      'indian',\n      'india standard time',\n      'chennai',\n      'kolkata',\n      'mumbai',\n      'new delhi'\n    ],\n    ids: ['Asia/Kolkata', 'Asia/Calcutta', 'Asia/Colombo'],\n    std: {\n      name: 'India Standard Time',\n      abbr: 'IST',\n      offset: 5.5\n    },\n    dst: {},\n    long: '(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi',\n    hem: 'n'\n  },\n  {\n    name: 'China Time',\n    abbr: null,\n    aliases: ['china', 'china standard time', 'beijing', 'chongqing', 'hong kong', 'urumqi'],\n    ids: ['Asia/Shanghai', 'Asia/Macau', 'Asia/Urumqi'],\n    std: {\n      abbr: 'CST',\n      name: 'China Standard Time',\n      offset: 8\n    },\n    dst: {},\n    long: '(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi',\n    hem: 'n'\n  },\n  {\n    name: 'Central European Time',\n    abbr: null,\n    aliases: [\n      'europe central',\n      'romance standard time',\n      'brussels',\n      'copenhagen',\n      'madrid',\n      'paris',\n      'romance'\n    ],\n    ids: [\n      'Europe/Paris',\n      'Africa/Ceuta',\n      'Arctic/Longyearbyen',\n      'Europe/Amsterdam',\n      'Europe/Andorra',\n      'Europe/Belgrade',\n      'Europe/Berlin',\n      'Europe/Bratislava',\n      'Europe/Brussels',\n      'Europe/Budapest',\n      'Europe/Busingen',\n      'Europe/Copenhagen',\n      'Europe/Gibraltar',\n      'Europe/Ljubljana',\n      'Europe/Luxembourg',\n      'Europe/Madrid',\n      'Europe/Malta',\n      'Europe/Monaco',\n      'Europe/Oslo',\n      'Europe/Podgorica',\n      'Europe/Prague',\n      'Europe/Rome',\n      'Europe/San_Marino',\n      'Europe/Sarajevo',\n      'Europe/Skopje',\n      'Europe/Stockholm',\n      'Europe/Tirane',\n      'Europe/Vaduz',\n      'Europe/Vatican',\n      'Europe/Vienna',\n      'Europe/Warsaw',\n      'Europe/Zagreb',\n      'Europe/Zurich'\n    ],\n    std: {\n      abbr: 'CET',\n      name: 'Central European Standard Time',\n      offset: 1\n    },\n    dst: {\n      abbr: 'CEST',\n      name: 'Central European Summer Time',\n      offset: 2\n    },\n    long: '(UTC+01:00) Brussels, Copenhagen, Madrid, Paris',\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: [\n      'America/Puerto_Rico',\n      'America/Montserrat',\n      'America/Port_of_Spain',\n      'America/Santo_Domingo',\n      'America/St_Barthelemy',\n      'America/St_Kitts',\n      'America/St_Lucia',\n      'America/St_Thomas',\n      'America/St_Vincent',\n      'America/Tortola',\n      'America/Grenada',\n      'America/Guadeloupe',\n      'America/Kralendijk',\n      'America/Lower_Princes',\n      'America/Marigot',\n      'America/Martinique',\n      'America/Anguilla',\n      'America/Antigua',\n      'America/Aruba',\n      'America/Barbados',\n      'America/Blanc-Sablon',\n      'America/Curacao',\n      'America/Dominica'\n    ],\n    std: {\n      name: 'Atlantic Standard Time',\n      abbr: 'AST',\n      offset: -4\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Greenwich Mean Time',\n    abbr: null,\n    aliases: ['gmt', 'zulu', 'utc', 'coordinated universal time'],\n    ids: [\n      'Etc/GMT',\n      'Africa/Abidjan',\n      'Africa/Accra',\n      'Africa/Bamako',\n      'Africa/Banjul',\n      'Africa/Bissau',\n      'Africa/Conakry',\n      'Africa/Dakar',\n      'Africa/Freetown',\n      'Africa/Lome',\n      'Africa/Monrovia',\n      'Africa/Nouakchott',\n      'Africa/Ouagadougou',\n      'Africa/Sao_Tome',\n      'America/Danmarkshavn',\n      'Atlantic/Reykjavik',\n      'Atlantic/St_Helena',\n      'Etc/UTC'\n    ],\n    std: {\n      name: 'Greenwich Mean Time',\n      abbr: 'GMT',\n      offset: 0\n    },\n    dst: {},\n    long: '(UTC) Coordinated Universal Time',\n    hem: 'n'\n  },\n  {\n    name: 'Eastern European Time',\n    abbr: null,\n    aliases: ['europe eastern'],\n    ids: [\n      'Asia/Beirut',\n      'Asia/Famagusta',\n      'Asia/Nicosia',\n      'Europe/Athens',\n      'Europe/Bucharest',\n      'Europe/Chisinau',\n      'Europe/Helsinki',\n      'Europe/Kiev',\n      'Europe/Mariehamn',\n      'Europe/Riga',\n      'Europe/Sofia',\n      'Europe/Tallinn',\n      'Europe/Uzhgorod',\n      'Europe/Vilnius',\n      'Europe/Zaporozhye'\n    ],\n    std: {\n      abbr: 'EET',\n      name: 'Eastern European Standard Time',\n      offset: 2\n    },\n    dst: {\n      abbr: 'EEST',\n      name: 'Eastern European Summer Time',\n      offset: 3\n    },\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: [\n      'America/Indiana',\n      'America/North_Dakota',\n      'America/Belize',\n      'America/Costa_Rica',\n      'America/El_Salvador',\n      'America/Guatemala',\n      'America/Indiana/Knox',\n      'America/Indiana/Tell_City',\n      'America/Managua',\n      'America/North_Dakota/Beulah',\n      'America/North_Dakota/Center',\n      'America/North_Dakota/New_Salem',\n      'America/Regina',\n      'America/Swift_Current',\n      'America/Tegucigalpa'\n    ],\n    std: {\n      name: 'Central Standard Time',\n      abbr: 'CST',\n      offset: -6\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Eastern Time',\n    abbr: 'ET',\n    aliases: ['america eastern', 'eastern standard time', 'eastern'],\n    ids: [\n      'America/New_York',\n      'America/Detroit',\n      'America/Grand_Turk',\n      'America/Indianapolis',\n      'America/Iqaluit',\n      'America/Louisville',\n      'America/Nassau',\n      'America/Nipigon',\n      'America/Pangnirtung',\n      'America/Port-au-Prince',\n      'America/Thunder_Bay',\n      'America/Toronto',\n      'America/Montreal',\n      'America/Kentucky'\n    ],\n    std: {\n      name: 'Eastern Standard Time',\n      abbr: 'EST',\n      offset: -5\n    },\n    dst: {\n      name: 'Eastern Daylight Time',\n      abbr: 'EDT',\n      offset: -4\n    },\n    long: '(UTC-05:00) Eastern Time (US & Canada)',\n    hem: 'n'\n  },\n  {\n    name: 'Argentina Time',\n    abbr: 'ART',\n    aliases: ['argentina', 'arst', 'argentina standard time', 'buenos aires'],\n    ids: [\n      'America/Buenos_Aires',\n      'America/Argentina/La_Rioja',\n      'America/Argentina/Rio_Gallegos',\n      'America/Argentina/Salta',\n      'America/Argentina/San_Juan',\n      'America/Argentina/San_Luis',\n      'America/Argentina/Tucuman',\n      'America/Argentina/Ushuaia',\n      'America/Catamarca',\n      'America/Cordoba',\n      'America/Jujuy',\n      'America/Mendoza',\n      'Antarctica/Rothera',\n      'America/Argentina'\n    ],\n    std: {\n      name: 'Argentina Standard Time',\n      abbr: 'ART',\n      offset: -3\n    },\n    dst: {},\n    long: '(UTC-03:00) City of Buenos Aires',\n    hem: 's'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: [\n      'America/Coral_Harbour',\n      'America/Indiana/Marengo',\n      'America/Indiana/Petersburg',\n      'America/Indiana/Vevay',\n      'America/Indiana/Vincennes',\n      'America/Indiana/Winamac',\n      'America/Kentucky/Monticello',\n      'America/Cancun',\n      'America/Cayman',\n      'America/Jamaica',\n      'America/Panama'\n    ],\n    std: {\n      name: 'Eastern Standard Time',\n      abbr: 'EST',\n      offset: -5\n    },\n    hem: 'n'\n  },\n  {\n    name: 'East Africa Time',\n    abbr: null,\n    aliases: [\n      'africa eastern',\n      'e. africa standard time',\n      'nairobi',\n      'east africa',\n      'eastern africa'\n    ],\n    ids: [\n      'Africa/Nairobi',\n      'Africa/Addis_Ababa',\n      'Africa/Asmera',\n      'Africa/Dar_es_Salaam',\n      'Africa/Djibouti',\n      'Africa/Kampala',\n      'Africa/Mogadishu',\n      'Indian/Comoro',\n      'Indian/Mayotte'\n    ],\n    std: {\n      name: 'East Africa Time',\n      abbr: 'EAT',\n      offset: 3\n    },\n    dst: {},\n    long: '(UTC+03:00) Nairobi',\n    hem: 'n'\n  },\n  {\n    name: 'West Africa Time',\n    abbr: 'WAT',\n    aliases: [\n      'africa western',\n      'wast',\n      'western africa',\n      'w. central africa standard time',\n      'west central africa',\n      'w. central africa'\n    ],\n    ids: [\n      'Africa/Lagos',\n      'Africa/Bangui',\n      'Africa/Douala',\n      'Africa/Libreville',\n      'Africa/Malabo',\n      'Africa/Ndjamena',\n      'Africa/Niamey',\n      'Africa/Porto-Novo'\n    ],\n    std: {\n      name: 'West Africa Standard Time',\n      abbr: 'WAT',\n      offset: 1\n    },\n    long: '(UTC+01:00) West Central Africa',\n    hem: 'n'\n  },\n  {\n    name: 'Moscow Time',\n    abbr: null,\n    aliases: ['moscow', 'russian standard time', 'st. petersburg', 'russian', 'volgograd time'],\n    ids: [\n      'Europe/Moscow',\n      'Europe/Astrakhan',\n      'Europe/Minsk',\n      'Europe/Simferopol',\n      'Europe/Ulyanovsk',\n      'Europe/Kirov',\n      'Europe/Volgograd',\n      'Asia/Volgograd'\n    ],\n    std: {\n      abbr: 'MSK',\n      name: 'Moscow Standard Time',\n      offset: 3\n    },\n    dst: {},\n    long: '(UTC+03:00) Moscow, St. Petersburg',\n    hem: 'n'\n  },\n  {\n    name: 'Brasilia Time',\n    abbr: null,\n    aliases: ['brasilia', 'e. south america standard time', 'east south america'],\n    ids: [\n      'America/Sao_Paulo',\n      'America/Araguaina',\n      'America/Bahia',\n      'America/Belem',\n      'America/Fortaleza',\n      'America/Maceio',\n      'America/Recife',\n      'America/Santarem'\n    ],\n    std: {\n      abbr: 'BRT',\n      name: 'Brasilia Standard Time',\n      offset: -3\n    },\n    dst: {},\n    long: '(UTC-03:00) Brasilia',\n    hem: 's'\n  },\n  {\n    name: 'Mountain Time',\n    abbr: 'MT',\n    aliases: ['america mountain', 'mountain standard time', 'mountain'],\n    ids: [\n      'America/Boise',\n      'America/Cambridge_Bay',\n      'America/Denver',\n      'America/Edmonton',\n      'America/Inuvik',\n      'America/Ojinaga',\n      'America/Yellowknife'\n    ],\n    std: {\n      name: 'Mountain Standard Time',\n      abbr: 'MST',\n      offset: -7\n    },\n    dst: {\n      name: 'Mountain Daylight Time',\n      abbr: 'MDT',\n      offset: -6\n    },\n    long: '(UTC-07:00) Mountain Time (US & Canada)',\n    hem: 'n'\n  },\n  {\n    name: 'Central Time',\n    abbr: 'CT',\n    aliases: ['america central', 'central standard time', 'central'],\n    ids: [\n      'America/Chicago',\n      'America/Matamoros',\n      'America/Menominee',\n      'America/Rainy_River',\n      'America/Rankin_Inlet',\n      'America/Resolute',\n      'America/Winnipeg'\n    ],\n    std: {\n      name: 'Central Standard Time',\n      abbr: 'CST',\n      offset: -6\n    },\n    dst: {\n      name: 'Central Daylight Time',\n      abbr: 'CDT',\n      offset: -5\n    },\n    long: '(UTC-06:00) Central Time (US & Canada)',\n    hem: 'n'\n  },\n  {\n    name: 'Central Africa Time',\n    abbr: null,\n    aliases: ['africa central', 'namibia standard time', 'windhoek', 'namibia'],\n    ids: [\n      'Africa/Windhoek',\n      'Africa/Gaborone',\n      'Africa/Harare',\n      'Africa/Lubumbashi',\n      'Africa/Lusaka',\n      'Africa/Maputo'\n    ],\n    std: {\n      name: 'Central Africa Time',\n      abbr: 'CAT',\n      offset: 2\n    },\n    dst: {},\n    long: '(UTC+02:00) Windhoek',\n    hem: 's'\n  },\n  {\n    name: 'Arabian Time',\n    abbr: null,\n    aliases: ['arabian', 'arab standard time', 'kuwait', 'riyadh', 'arab', 'arabia', 'arabic'],\n    ids: ['Asia/Baghdad', 'Asia/Aden', 'Asia/Bahrain', 'Asia/Kuwait', 'Asia/Qatar', 'Asia/Riyadh'],\n    std: {\n      abbr: 'AST',\n      name: 'Arabian Standard Time',\n      offset: 3\n    },\n    dst: {},\n    long: '(UTC+03:00) Kuwait, Riyadh',\n    hem: 'n'\n  },\n  {\n    name: 'Alaska Time',\n    abbr: 'AKT',\n    aliases: ['alaska', 'alaskan standard time', 'alaskan'],\n    ids: [\n      'America/Anchorage',\n      'America/Juneau',\n      'America/Metlakatla',\n      'America/Nome',\n      'America/Sitka',\n      'America/Yakutat'\n    ],\n    std: {\n      name: 'Alaska Standard Time',\n      abbr: 'AKST',\n      offset: -9\n    },\n    dst: {\n      name: 'Alaska Daylight Time',\n      abbr: 'AKDT',\n      offset: -8\n    },\n    long: '(UTC-09:00) Alaska',\n    hem: 'n'\n  },\n  {\n    name: 'Atlantic Time',\n    abbr: 'AT',\n    aliases: ['atlantic', 'atlantic standard time'],\n    ids: [\n      'America/Halifax',\n      'America/Glace_Bay',\n      'America/Goose_Bay',\n      'America/Moncton',\n      'America/Thule',\n      'Atlantic/Bermuda'\n    ],\n    std: {\n      name: 'Atlantic Standard Time',\n      abbr: 'AST',\n      offset: -4\n    },\n    dst: {\n      name: 'Atlantic Daylight Time',\n      abbr: 'ADT',\n      offset: -3\n    },\n    long: '(UTC-04:00) Atlantic Time (Canada)',\n    hem: 'n'\n  },\n  {\n    name: 'British Time',\n    abbr: null,\n    aliases: ['gmt', 'gmt standard time', 'dublin', 'edinburgh', 'lisbon', 'london'],\n    ids: [\n      'Europe/London',\n      'Europe/Dublin',\n      'Europe/Guernsey',\n      'Europe/Isle_of_Man',\n      'Europe/Jersey'\n    ],\n    std: {\n      name: 'Greenwich Mean Time',\n      abbr: 'GMT',\n      offset: 0\n    },\n    dst: {\n      name: 'British Summer Time',\n      abbr: 'BST',\n      offset: 1\n    },\n    long: '(UTC+00:00) Dublin, Edinburgh, Lisbon, London',\n    hem: 'n'\n  },\n  {\n    name: 'Central Africa Time',\n    dupe: true,\n    ids: ['Africa/Blantyre', 'Africa/Bujumbura', 'Africa/Juba', 'Africa/Khartoum', 'Africa/Kigali'],\n    std: {\n      name: 'Central Africa Time',\n      abbr: 'CAT',\n      offset: 2\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'West Kazakhstan Time',\n    abbr: null,\n    aliases: [\n      'kazakhstan western',\n      'west asia standard time',\n      'ashgabat',\n      'tashkent',\n      'west asia',\n      'alma ata'\n    ],\n    ids: ['Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Atyrau', 'Asia/Oral', 'Asia/Qyzylorda'],\n    std: {\n      abbr: 'ALMT',\n      name: 'Alma-Ata Time',\n      offset: 5\n    },\n    dst: {},\n    long: '(UTC+05:00) Ashgabat, Tashkent',\n    hem: 'n'\n  },\n  {\n    name: 'Eastern Australia Time',\n    abbr: 'AET',\n    aliases: [\n      'australia eastern',\n      'aus eastern standard time',\n      'canberra',\n      'melbourne',\n      'sydney',\n      'aus eastern',\n      'aus east'\n    ],\n    ids: [\n      'Australia/Sydney',\n      'Antarctica/Macquarie',\n      'Australia/Currie',\n      'Australia/Hobart',\n      'Australia/Melbourne'\n    ],\n    std: {\n      name: 'Australian Eastern Standard Time',\n      abbr: 'AEST',\n      offset: 10\n    },\n    dst: {\n      name: 'Australian Eastern Daylight Time',\n      abbr: 'AEDT',\n      offset: 11\n    },\n    long: '(UTC+10:00) Canberra, Melbourne, Sydney',\n    hem: 's'\n  },\n  {\n    name: 'Western European Time',\n    abbr: null,\n    aliases: ['europe western'],\n    ids: ['Europe/Lisbon', 'Atlantic/Canary', 'Atlantic/Faeroe', 'Atlantic/Madeira'],\n    std: {\n      abbr: 'WET',\n      name: 'Western European Standard Time',\n      offset: 0\n    },\n    dst: {\n      abbr: 'WEST',\n      name: 'Western European Summer Time',\n      offset: 1\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Indochina Time',\n    abbr: null,\n    aliases: [\n      'indochina',\n      'se asia standard time',\n      'bangkok',\n      'hanoi',\n      'jakarta',\n      'se asia',\n      'south east asia'\n    ],\n    ids: ['Asia/Bangkok', 'Asia/Phnom_Penh', 'Asia/Saigon', 'Asia/Vientiane'],\n    std: {\n      abbr: 'ICT',\n      name: 'Indochina Time',\n      offset: 7\n    },\n    dst: {},\n    long: '(UTC+07:00) Bangkok, Hanoi, Jakarta',\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    abbr: 'MT',\n    std: {\n      name: 'Mountain Standard Time',\n      abbr: 'MST',\n      offset: -7\n    },\n    ids: ['America/Phoenix', 'America/Creston', 'America/Dawson_Creek', 'America/Fort_Nelson'],\n    hem: 'n'\n  },\n  {\n    name: 'Central Mexico Time',\n    long: '(UTC-06:00) Guadalajara, Mexico City, Monterrey',\n    aliases: ['guadalajara', 'mexico city', 'monterrey', 'central mexico', 'central mexican'],\n    ids: ['America/Mexico_City', 'America/Merida', 'America/Monterrey', 'America/Bahia_Banderas'],\n    std: {\n      name: 'Central Standard Time',\n      abbr: 'CST',\n      offset: -6\n    },\n    dst: {\n      name: 'Central Daylight Time',\n      abbr: 'CDT',\n      offset: -5\n    },\n    hem: 'n'\n  },\n  {\n    name: 'West Africa Time',\n    dupe: true,\n    ids: ['Africa/Luanda', 'Africa/Kinshasa', 'Africa/Brazzaville'],\n    std: {\n      name: 'West Africa Standard Time',\n      abbr: 'WAT',\n      offset: 1\n    },\n    hem: 's'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['Africa/Cairo', 'Africa/Tripoli', 'Europe/Kaliningrad'],\n    std: {\n      abbr: 'EET',\n      name: 'Eastern European Standard Time',\n      offset: 2\n    },\n    hem: 'n'\n  },\n  {\n    name: 'South Africa Time',\n    abbr: null,\n    aliases: [\n      'africa southern',\n      'south africa standard time',\n      'harare',\n      'pretoria',\n      'south africa'\n    ],\n    ids: ['Africa/Johannesburg', 'Africa/Maseru', 'Africa/Mbabane'],\n    std: {\n      name: 'South Africa Standard Time',\n      abbr: 'SAST',\n      offset: 2\n    },\n    dst: {},\n    long: '(UTC+02:00) Harare, Pretoria',\n    hem: 's'\n  },\n  {\n    name: 'Krasnoyarsk Time',\n    abbr: null,\n    aliases: ['krasnoyarsk', 'north asia standard time', 'north asia'],\n    ids: ['Asia/Krasnoyarsk', 'Asia/Novokuznetsk', 'Asia/Barnaul'],\n    std: {\n      abbr: 'KRAT',\n      name: 'Krasnoyarsk Standard Time',\n      offset: 7\n    },\n    dst: {},\n    long: '(UTC+07:00) Krasnoyarsk',\n    hem: 'n'\n  },\n  {\n    name: 'Yakutsk Time',\n    abbr: null,\n    aliases: ['yakutsk', 'yakutsk standard time'],\n    ids: ['Asia/Yakutsk', 'Asia/Chita', 'Asia/Khandyga'],\n    std: {\n      abbr: 'YAKT',\n      name: 'Yakutsk Standard Time',\n      offset: 9\n    },\n    dst: {},\n    long: '(UTC+09:00) Yakutsk',\n    hem: 'n'\n  },\n  {\n    name: 'Pacific Time',\n    abbr: 'PT',\n    aliases: ['america pacific', 'pacific standard time', 'pacific'],\n    ids: ['America/Los_Angeles', 'America/Tijuana', 'America/Vancouver'],\n    std: {\n      name: 'Pacific Standard Time',\n      abbr: 'PST',\n      offset: -8\n    },\n    dst: {\n      name: 'Pacific Daylight Time',\n      abbr: 'PDT',\n      offset: -7\n    },\n    long: '(UTC-08:00) Pacific Time (US & Canada)',\n    hem: 'n'\n  },\n  {\n    name: 'Amazon Time',\n    abbr: null,\n    aliases: [\n      'amazon',\n      'central brazilian standard time',\n      'cuiaba',\n      'central brazilian',\n      'central brazil'\n    ],\n    ids: ['America/Boa_Vista', 'America/Manaus', 'America/Porto_Velho'],\n    std: {\n      abbr: 'AMT',\n      name: 'Amazon Standard Time',\n      offset: -4\n    },\n    dst: {},\n    long: '(UTC-04:00) Cuiaba',\n    hem: 'n'\n  },\n  {\n    name: 'Morocco Standard Time',\n    offset: 1,\n    long: '(UTC+00:00) Casablanca',\n    aliases: ['casablanca', 'morocco'],\n    ids: ['Africa/Casablanca', 'Africa/El_Aaiun'],\n    std: {\n      abbr: 'WET',\n      name: 'Western European Standard Time',\n      offset: 1\n    },\n    dst: {\n      abbr: 'WEST',\n      name: 'Western European Summer Time',\n      offset: 0\n    },\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['Africa/Algiers', 'Africa/Tunis'],\n    std: {\n      abbr: 'CET',\n      name: 'Central European Standard Time',\n      offset: 1\n    },\n    dst: {\n      abbr: 'CEST',\n      name: 'Central European Summer Time',\n      offset: 2\n    },\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['Asia/Gaza', 'Asia/Hebron'],\n    std: {\n      abbr: 'EET',\n      name: 'Eastern European Standard Time',\n      offset: 2\n    },\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['Asia/Damascus', 'Asia/Amman'],\n    std: {\n      abbr: 'EET',\n      name: 'Eastern European Standard Time',\n      offset: 2\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Gulf Time',\n    abbr: null,\n    aliases: ['gulf', 'arabian standard time', 'abu dhabi', 'muscat', 'arabian'],\n    ids: ['Asia/Dubai', 'Asia/Muscat'],\n    std: {\n      name: 'Gulf Standard Time',\n      abbr: 'GST',\n      offset: 4\n    },\n    dst: {},\n    long: '(UTC+04:00) Abu Dhabi, Muscat',\n    hem: 'n'\n  },\n  {\n    name: 'Samara Time',\n    abbr: null,\n    aliases: ['samara', 'russia time zone 3', 'izhevsk'],\n    ids: ['Europe/Samara', 'Europe/Saratov'],\n    std: {\n      abbr: 'SAMT',\n      name: 'Samara Standard Time',\n      offset: 4\n    },\n    dst: {},\n    long: '(UTC+04:00) Izhevsk, Samara',\n    hem: 'n'\n  },\n  {\n    name: 'Uzbekistan Time',\n    abbr: null,\n    aliases: ['uzbekistan'],\n    ids: ['Asia/Samarkand', 'Asia/Tashkent'],\n    std: {\n      abbr: 'UZT',\n      name: 'Uzbekistan Standard Time',\n      offset: 5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'East Kazakhstan Time',\n    abbr: null,\n    aliases: ['kazakhstan eastern', 'central asia standard time', 'astana', 'central asia'],\n    ids: ['Asia/Almaty', 'Asia/Qostanay'],\n    std: {\n      abbr: 'ALMT',\n      name: 'East Kazakhstan Time',\n      offset: 6\n    },\n    dst: {},\n    long: '(UTC+06:00) Astana',\n    hem: 'n'\n  },\n  {\n    name: 'Omsk Time',\n    abbr: null,\n    aliases: ['omsk', 'omsk standard time'],\n    ids: ['Asia/Omsk', 'Asia/Tomsk'],\n    std: {\n      abbr: 'OMST',\n      name: 'Omsk Standard Time',\n      offset: 6\n    },\n    dst: {},\n    long: '(UTC+06:00) Omsk',\n    hem: 'n'\n  },\n  {\n    name: 'Western Indonesia Time',\n    abbr: null,\n    aliases: ['indonesia western'],\n    ids: ['Asia/Jakarta', 'Asia/Pontianak'],\n    std: {\n      name: 'Western Indonesia Time',\n      abbr: 'WIB',\n      offset: 7\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Ulaanbaatar Time',\n    abbr: null,\n    aliases: ['mongolia', 'ulaanbaatar standard time', 'ulaanbaatar'],\n    ids: ['Asia/Ulaanbaatar', 'Asia/Choibalsan'],\n    std: {\n      abbr: 'ULAT',\n      name: 'Ulaanbaatar Standard Time',\n      offset: 8\n    },\n    dst: {},\n    long: '(UTC+08:00) Ulaanbaatar',\n    hem: 'n'\n  },\n  {\n    name: 'Malaysia Time',\n    abbr: null,\n    aliases: ['malaysia'],\n    ids: ['Asia/Kuala_Lumpur', 'Asia/Kuching'],\n    std: {\n      name: 'Malaysia Time',\n      abbr: 'MYT',\n      offset: 8\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Korean Time',\n    abbr: null,\n    aliases: ['korea', 'korea standard time', 'seoul'],\n    ids: ['Asia/Seoul', 'Asia/Pyongyang'],\n    std: {\n      abbr: 'KST',\n      name: 'Korean Standard Time',\n      offset: 9\n    },\n    dst: {},\n    long: '(UTC+09:00) Seoul',\n    hem: 'n'\n  },\n  {\n    name: 'Central Australia Time',\n    abbr: 'ACT',\n    aliases: ['australia central', 'cen. australia standard time', 'adelaide', 'central australia'],\n    ids: ['Australia/Adelaide', 'Australia/Broken_Hill'],\n    std: {\n      name: 'Australian Central Standard Time',\n      abbr: 'ACST',\n      offset: 9.5\n    },\n    dst: {\n      name: 'Australian Central Daylight Time',\n      abbr: 'ACDT',\n      offset: 10.5\n    },\n    long: '(UTC+09:30) Adelaide',\n    hem: 's'\n  },\n  {\n    name: 'Brisbane Time',\n    dupe: true,\n    ids: ['Australia/Brisbane', 'Australia/Lindeman'],\n    std: {\n      name: 'Australian Eastern Standard Time',\n      abbr: 'AEST',\n      offset: 10\n    },\n    hem: 's'\n  },\n  {\n    name: 'Vladivostok Time',\n    abbr: null,\n    aliases: ['vladivostok', 'vladivostok standard time'],\n    ids: ['Asia/Vladivostok', 'Asia/Ust-Nera'],\n    std: {\n      abbr: 'VLAT',\n      name: 'Vladivostok Standard Time',\n      offset: 10\n    },\n    dst: {},\n    long: '(UTC+10:00) Vladivostok',\n    hem: 'n'\n  },\n  {\n    name: 'Chamorro Time',\n    abbr: null,\n    aliases: [\n      'chamorro',\n      'west pacific standard time',\n      'guam',\n      'port moresby',\n      'west pacific',\n      'western pacific'\n    ],\n    ids: ['Pacific/Guam', 'Pacific/Saipan'],\n    std: {\n      name: 'Chamorro Standard Time',\n      abbr: 'ChST',\n      offset: 10\n    },\n    dst: {},\n    long: '(UTC+10:00) Guam, Port Moresby',\n    hem: 'n'\n  },\n  {\n    name: 'Papua New Guinea Time',\n    abbr: null,\n    aliases: ['papua new guinea', 'guinea', 'guinean'],\n    ids: ['Pacific/Bougainville', 'Pacific/Port_Moresby'],\n    std: {\n      abbr: 'PGT',\n      name: 'Papua New Guinea Time',\n      offset: 11\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'New Zealand Time',\n    abbr: 'NZT',\n    aliases: ['new zealand', 'new zealand standard time', 'auckland', 'wellington'],\n    ids: ['Pacific/Auckland', 'Antarctica/McMurdo'],\n    std: {\n      name: 'New Zealand Standard Time',\n      abbr: 'NZST',\n      offset: 12\n    },\n    dst: {\n      name: 'New Zealand Daylight Time',\n      abbr: 'NZDT',\n      offset: 13\n    },\n    long: '(UTC+12:00) Auckland, Wellington',\n    hem: 's'\n  },\n  {\n    name: 'Marshall Islands Time',\n    abbr: null,\n    aliases: ['marshall islands'],\n    ids: ['Pacific/Kwajalein', 'Pacific/Majuro'],\n    std: {\n      abbr: 'MHT',\n      name: 'Marshall Islands Time',\n      offset: 12\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Samoa Time',\n    abbr: 'SST',\n    aliases: ['samoa', 'samoa standard time'],\n    ids: ['Pacific/Midway', 'Pacific/Pago_Pago'],\n    std: {\n      abbr: 'SST',\n      name: 'Samoa Standard Time',\n      offset: -11\n    },\n    dst: {},\n    long: '(UTC+13:00) Samoa',\n    hem: 'n'\n  },\n  {\n    name: 'Hawaii-Aleutian Time',\n    abbr: 'HAT',\n    aliases: ['hawaii aleutian', 'aleutian standard time', 'aleutian'],\n    ids: ['Pacific/Honolulu', 'Pacific/Johnston'],\n    std: {\n      name: 'Hawaii-Aleutian Standard Time',\n      abbr: 'HAST',\n      offset: -9\n    },\n    dst: {\n      name: 'Hawaii-Aleutian Daylight Time',\n      abbr: 'HADT',\n      offset: -8\n    },\n    long: '(UTC-09:00) Aleutian Islands',\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    std: {\n      name: 'Mountain Standard Time',\n      abbr: 'MST',\n      offset: -7\n    },\n    ids: ['America/Dawson', 'America/Whitehorse'],\n    hem: 'n'\n  },\n  {\n    name: 'Mexican Pacific Time',\n    abbr: 'HPMX',\n    aliases: [\n      'mexico pacific',\n      'mountain standard time (mexico)',\n      'chihuahua',\n      'la paz',\n      'mazatlan',\n      'mountain mexico'\n    ],\n    ids: ['America/Chihuahua', 'America/Mazatlan'],\n    std: {\n      name: 'Mexican Pacific Standard Time',\n      abbr: 'HNPMX',\n      offset: -7\n    },\n    dst: {\n      name: 'Mexican Pacific Daylight Time',\n      abbr: 'HEPMX',\n      offset: -6\n    },\n    long: '(UTC-07:00) Chihuahua, La Paz, Mazatlan',\n    hem: 'n'\n  },\n  {\n    name: 'Colombia Time',\n    abbr: 'COT',\n    aliases: ['colombia', 'cost'],\n    ids: ['America/Bogota', 'Pacific/Galapagos'],\n    std: {\n      name: 'Colombia Standard Time',\n      abbr: 'COT',\n      offset: -5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Acre Time',\n    abbr: null,\n    aliases: ['acre'],\n    ids: ['America/Eirunepe', 'America/Rio_Branco'],\n    std: {\n      abbr: 'ACT',\n      name: 'Acre Standard Time',\n      offset: -5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['America/Campo_Grande', 'America/Cuiaba'],\n    std: {\n      abbr: 'AMT',\n      name: 'Amazon Standard Time',\n      offset: -4\n    },\n    hem: 's'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['Antarctica/Palmer', 'America/Punta_Arenas'],\n    std: {\n      name: 'Chile Standard Time',\n      abbr: 'CLT',\n      offset: -3\n    },\n    hem: 's'\n  },\n  {\n    name: 'Troll Time',\n    dupe: true,\n    abbr: null,\n    aliases: ['troll research station'],\n    ids: ['Antarctica/Troll'],\n    std: {\n      name: 'Greenwich Mean Time',\n      abbr: 'GMT',\n      offset: 0\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'East Greenland Time',\n    abbr: 'HEG',\n    aliases: ['greenland eastern'],\n    ids: ['America/Scoresbysund'],\n    std: {\n      name: 'East Greenland Standard Time',\n      abbr: 'HNEG',\n      offset: 0\n    },\n    dst: {\n      name: 'East Greenland Summer Time',\n      abbr: 'HEEG',\n      offset: 1\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Israel Time',\n    abbr: null,\n    aliases: ['israel', 'israel standard time', 'jerusalem'],\n    ids: ['Asia/Jerusalem'],\n    std: {\n      abbr: 'IST',\n      name: 'Israel Standard Time',\n      offset: 2\n    },\n    dst: {\n      name: 'Israel Daylight Time',\n      offset: 3\n    },\n    long: '(UTC+02:00) Jerusalem',\n    hem: 'n'\n  },\n  {\n    name: 'East Africa Time',\n    dupe: true,\n    ids: ['Indian/Antananarivo'],\n    std: {\n      name: 'East Africa Time',\n      abbr: 'EAT',\n      offset: 3\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Syowa Time',\n    abbr: null,\n    aliases: ['syowa'],\n    ids: ['Antarctica/Syowa'],\n    std: {\n      abbr: 'SYOT',\n      name: 'Syowa Time',\n      offset: 3\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Turkey Time',\n    abbr: 'TRT',\n    aliases: ['turkey', 'turkey standard time', 'istanbul'],\n    ids: ['Europe/Istanbul'],\n    std: {\n      name: 'Turkey Time',\n      abbr: 'TRT',\n      offset: 3\n    },\n    dst: {},\n    long: '(UTC+03:00) Istanbul',\n    hem: 'n'\n  },\n  {\n    name: 'Iran Time',\n    abbr: null,\n    aliases: ['iran', 'iran standard time', 'tehran'],\n    ids: ['Asia/Tehran'],\n    std: {\n      abbr: 'IRST',\n      name: 'Iran Standard Time',\n      offset: 3.5\n    },\n    dst: {\n      abbr: 'IRDT',\n      name: 'Iran Daylight Time',\n      offset: 4.5\n    },\n    long: '(UTC+03:30) Tehran',\n    hem: 'n'\n  },\n  {\n    name: 'Azerbaijan Time',\n    abbr: null,\n    aliases: ['azerbaijan', 'azerbaijan standard time', 'baku'],\n    ids: ['Asia/Baku'],\n    std: {\n      abbr: 'AZT',\n      name: 'Azerbaijan Standard Time',\n      offset: 4\n    },\n    dst: {},\n    long: '(UTC+04:00) Baku',\n    hem: 'n'\n  },\n  {\n    name: 'Georgia Time',\n    abbr: 'GET',\n    aliases: ['georgia', 'georgian standard time', 'tbilisi', 'georgian'],\n    ids: ['Asia/Tbilisi'],\n    std: {\n      abbr: 'GET',\n      name: 'Georgia Standard Time',\n      offset: 4\n    },\n    dst: {},\n    long: '(UTC+04:00) Tbilisi',\n    hem: 'n'\n  },\n  {\n    name: 'Armenia Time',\n    abbr: 'AMT',\n    aliases: ['armenia', 'caucasus standard time', 'yerevan', 'caucasus'],\n    ids: ['Asia/Yerevan'],\n    std: {\n      abbr: 'AMT',\n      name: 'Armenia Standard Time',\n      offset: 4\n    },\n    dst: {},\n    long: '(UTC+04:00) Yerevan',\n    hem: 'n'\n  },\n  {\n    name: 'Seychelles Time',\n    abbr: null,\n    aliases: ['seychelles'],\n    ids: ['Indian/Mahe'],\n    std: {\n      abbr: 'SCT',\n      name: 'Seychelles Time',\n      offset: 4\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Mauritius Time',\n    abbr: null,\n    aliases: ['mauritius', 'mauritius standard time', 'port louis'],\n    ids: ['Indian/Mauritius'],\n    std: {\n      abbr: 'MUT',\n      name: 'Mauritius Standard Time',\n      offset: 4\n    },\n    dst: {},\n    long: '(UTC+04:00) Port Louis',\n    hem: 'n'\n  },\n  {\n    name: 'Réunion Time',\n    abbr: null,\n    aliases: ['reunion'],\n    ids: ['Indian/Reunion'],\n    std: {\n      abbr: 'RET',\n      name: 'Réunion Time',\n      offset: 4\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Afghanistan Time',\n    abbr: null,\n    aliases: ['afghanistan', 'afghanistan standard time', 'kabul'],\n    ids: ['Asia/Kabul'],\n    std: {\n      abbr: 'AFT',\n      name: 'Afghanistan Time',\n      offset: 4.5\n    },\n    dst: {},\n    long: '(UTC+04:30) Kabul',\n    hem: 'n'\n  },\n  {\n    name: 'Mawson Time',\n    abbr: null,\n    aliases: ['mawson'],\n    ids: ['Antarctica/Mawson'],\n    std: {\n      abbr: 'MAWT',\n      name: 'Mawson Time',\n      offset: 5\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Turkmenistan Time',\n    abbr: 'TMT',\n    aliases: ['turkmenistan', 'tmst'],\n    ids: ['Asia/Ashgabat'],\n    std: {\n      name: 'Turkmenistan Standard Time',\n      abbr: 'TMT',\n      offset: 5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Tajikistan Time',\n    abbr: null,\n    aliases: ['tajikistan'],\n    ids: ['Asia/Dushanbe'],\n    std: {\n      abbr: 'TJT',\n      name: 'Tajikistan Time',\n      offset: 5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Pakistan Time',\n    abbr: null,\n    aliases: ['pakistan', 'pakistan standard time', 'islamabad', 'karachi'],\n    ids: ['Asia/Karachi'],\n    std: {\n      abbr: 'PKT',\n      name: 'Pakistan Standard Time',\n      offset: 5\n    },\n    dst: {},\n    long: '(UTC+05:00) Islamabad, Karachi',\n    hem: 'n'\n  },\n  {\n    name: 'Yekaterinburg Time',\n    abbr: 'YEKT',\n    aliases: ['yekaterinburg', 'ekaterinburg standard time', 'ekaterinburg'],\n    ids: ['Asia/Yekaterinburg'],\n    std: {\n      abbr: 'YEKT',\n      name: 'Yekaterinburg Standard Time',\n      offset: 5\n    },\n    dst: {},\n    long: '(UTC+05:00) Ekaterinburg',\n    hem: 'n'\n  },\n  {\n    name: 'French Southern & Antarctic Time',\n    abbr: null,\n    aliases: ['french southern'],\n    ids: ['Indian/Kerguelen'],\n    std: {\n      abbr: 'TFT',\n      name: 'French Southern & Antarctic Time',\n      offset: 5\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Maldives Time',\n    abbr: null,\n    aliases: ['maldives'],\n    ids: ['Indian/Maldives'],\n    std: {\n      abbr: 'MVT',\n      name: 'Maldives Time',\n      offset: 5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Nepal Time',\n    abbr: null,\n    aliases: ['nepal', 'nepal standard time', 'kathmandu'],\n    ids: ['Asia/Katmandu'],\n    std: {\n      abbr: 'NPT',\n      name: 'Nepal Time',\n      offset: 5.75\n    },\n    dst: {},\n    long: '(UTC+05:45) Kathmandu',\n    hem: 'n'\n  },\n  {\n    name: 'Vostok Time',\n    abbr: null,\n    aliases: ['vostok'],\n    ids: ['Antarctica/Vostok'],\n    std: {\n      abbr: 'MSK+4',\n      name: 'Vostok Time',\n      offset: 6\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Kyrgyzstan Time',\n    abbr: null,\n    aliases: ['kyrgystan'],\n    ids: ['Asia/Bishkek'],\n    std: {\n      abbr: 'KGT',\n      name: 'Kyrgyzstan Time',\n      offset: 6\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Bangladesh Time',\n    abbr: 'BST',\n    aliases: ['bangladesh', 'bangladesh standard time', 'dhaka'],\n    ids: ['Asia/Dhaka'],\n    std: {\n      abbr: 'BST',\n      name: 'Bangladesh Standard Time',\n      offset: 6\n    },\n    dst: {},\n    long: '(UTC+06:00) Dhaka',\n    hem: 'n'\n  },\n  {\n    name: 'Bhutan Time',\n    abbr: null,\n    aliases: ['bhutan'],\n    ids: ['Asia/Thimphu'],\n    std: {\n      name: 'Bhutan Time',\n      abbr: 'BT',\n      offset: 6\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Indian Ocean Time',\n    abbr: null,\n    aliases: ['indian ocean', 'indian chagos'],\n    ids: ['Indian/Chagos'],\n    std: {\n      abbr: 'IOT',\n      name: 'Indian Ocean Time',\n      offset: 6\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Myanmar Time',\n    abbr: null,\n    aliases: ['myanmar', 'myanmar standard time'],\n    ids: ['Asia/Rangoon'],\n    std: {\n      abbr: 'MMT',\n      name: 'Myanmar Time',\n      offset: 6.5\n    },\n    dst: {},\n    long: '(UTC+06:30) Yangon (Rangoon)',\n    hem: 'n'\n  },\n  {\n    name: 'Cocos Islands Time',\n    abbr: null,\n    aliases: ['cocos'],\n    ids: ['Indian/Cocos'],\n    std: {\n      abbr: 'CCT',\n      name: 'Cocos Islands Time',\n      offset: 6.5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Davis Time',\n    abbr: null,\n    aliases: ['davis'],\n    ids: ['Antarctica/Davis'],\n    std: {\n      abbr: 'DAVT',\n      name: 'Davis Time',\n      offset: 7\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Hovd Time',\n    abbr: null,\n    aliases: ['hovd', 'w. mongolia standard time', 'west mongolia', 'western mongolia'],\n    ids: ['Asia/Hovd'],\n    std: {\n      abbr: 'HOVT',\n      name: 'Hovd Standard Time',\n      offset: 7\n    },\n    dst: {},\n    long: '(UTC+07:00) Hovd',\n    hem: 'n'\n  },\n  {\n    name: 'Novosibirsk Time',\n    abbr: null,\n    aliases: ['novosibirsk', 'n. central asia standard time', 'north central asia'],\n    ids: ['Asia/Novosibirsk'],\n    std: {\n      abbr: 'NOVT',\n      name: 'Novosibirsk Standard Time',\n      offset: 7\n    },\n    dst: {},\n    long: '(UTC+07:00) Novosibirsk',\n    hem: 'n'\n  },\n  {\n    name: 'Christmas Island Time',\n    abbr: null,\n    aliases: ['christmas'],\n    ids: ['Indian/Christmas'],\n    std: {\n      abbr: 'CXT',\n      name: 'Christmas Island Time',\n      offset: 7\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Brunei Darussalam Time',\n    abbr: null,\n    aliases: ['brunei'],\n    ids: ['Asia/Brunei'],\n    std: {\n      abbr: 'BNT',\n      name: 'Brunei Darussalam Time',\n      offset: 8\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Hong Kong Time',\n    abbr: 'HKT',\n    aliases: ['hong kong', 'hkst'],\n    ids: ['Asia/Hong_Kong'],\n    std: {\n      name: 'Hong Kong Standard Time',\n      abbr: 'HKT',\n      offset: 8\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Irkutsk Time',\n    abbr: null,\n    aliases: ['irkutsk', 'north asia east standard time', 'north asia east'],\n    ids: ['Asia/Irkutsk'],\n    std: {\n      abbr: 'IRKT',\n      name: 'Irkutsk Standard Time',\n      offset: 8\n    },\n    dst: {},\n    long: '(UTC+08:00) Irkutsk',\n    hem: 'n'\n  },\n  {\n    name: 'Central Indonesia Time',\n    abbr: null,\n    aliases: ['indonesia central'],\n    ids: ['Asia/Makassar'],\n    std: {\n      name: 'Central Indonesia Time',\n      abbr: 'WITA',\n      offset: 8\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Philippine Time',\n    abbr: null,\n    aliases: ['philippines'],\n    ids: ['Asia/Manila'],\n    std: {\n      abbr: 'PHST',\n      name: 'Philippine Standard Time',\n      offset: 8\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Singapore Time',\n    abbr: null,\n    aliases: ['singapore', 'singapore standard time', 'kuala lumpur'],\n    ids: ['Asia/Singapore'],\n    std: {\n      name: 'Singapore Standard Time',\n      abbr: 'SGT',\n      offset: 8\n    },\n    dst: {},\n    long: '(UTC+08:00) Kuala Lumpur, Singapore',\n    hem: 's'\n  },\n  {\n    name: 'Taipei Time',\n    abbr: null,\n    aliases: ['taipei', 'taipei standard time'],\n    ids: ['Asia/Taipei'],\n    std: {\n      abbr: 'CST',\n      name: 'Taipei Standard Time',\n      offset: 8\n    },\n    dst: {},\n    long: '(UTC+08:00) Taipei',\n    hem: 'n'\n  },\n  {\n    name: 'Western Australia Time',\n    abbr: 'AWT',\n    aliases: [\n      'australia western',\n      'awdt',\n      'w. australia standard time',\n      'perth',\n      'western australia',\n      'west australia'\n    ],\n    ids: ['Australia/Perth'],\n    std: {\n      name: 'Australian Western Standard Time',\n      abbr: 'AWST',\n      offset: 8\n    },\n    dst: {},\n    long: '(UTC+08:00) Perth',\n    hem: 's'\n  },\n  {\n    name: 'Australian Central Western Time',\n    abbr: 'ACWT',\n    aliases: [\n      'australia centralwestern',\n      'acwdt',\n      'aus central w. standard time',\n      'eucla',\n      'aus central west'\n    ],\n    ids: ['Australia/Eucla'],\n    std: {\n      name: 'Australian Central Western Standard Time',\n      abbr: 'ACWST',\n      offset: 8.75\n    },\n    dst: {},\n    long: '(UTC+08:45) Eucla',\n    hem: 's'\n  },\n  {\n    name: 'East Timor Time',\n    abbr: 'TLT',\n    aliases: ['east timor'],\n    ids: ['Asia/Dili'],\n    std: {\n      abbr: 'TLT',\n      name: 'East Timor Time',\n      offset: 9\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Eastern Indonesia Time',\n    abbr: null,\n    aliases: ['indonesia eastern'],\n    ids: ['Asia/Jayapura'],\n    std: {\n      name: 'Eastern Indonesia Time',\n      abbr: 'WIT',\n      offset: 9\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Japan Time',\n    abbr: null,\n    aliases: ['japan', 'jdt', 'tokyo standard time', 'osaka', 'sapporo', 'tokyo'],\n    ids: ['Asia/Tokyo'],\n    std: {\n      name: 'Japan Standard Time',\n      abbr: 'JST',\n      offset: 9\n    },\n    dst: {},\n    long: '(UTC+09:00) Osaka, Sapporo, Tokyo',\n    hem: 'n'\n  },\n  {\n    name: 'Palau Time',\n    abbr: null,\n    aliases: ['palau'],\n    ids: ['Pacific/Palau'],\n    std: {\n      abbr: 'PWT',\n      name: 'Palau Time',\n      offset: 9\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['Australia/Darwin'],\n    std: {\n      name: 'Australian Central Standard Time',\n      abbr: 'ACST',\n      offset: 9.5\n    },\n    hem: 's'\n  },\n  {\n    name: 'Dumont-d’Urville Time',\n    abbr: null,\n    aliases: ['dumontdurville'],\n    ids: ['Antarctica/DumontDUrville'],\n    std: {\n      abbr: 'CLST',\n      name: 'Dumont-d’Urville Time',\n      offset: 10\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Chuuk Time',\n    abbr: null,\n    aliases: ['truk'],\n    ids: ['Pacific/Truk'],\n    std: {\n      abbr: 'CHUT',\n      name: 'Chuuk Time',\n      offset: 10\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Lord Howe Time',\n    abbr: 'LHT',\n    aliases: ['lord howe', 'lord howe standard time'],\n    ids: ['Australia/Lord_Howe'],\n    std: {\n      name: 'Lord Howe Standard Time',\n      abbr: 'LHST',\n      offset: 10.5\n    },\n    dst: {\n      name: 'Lord Howe Daylight Time',\n      abbr: 'LHDT',\n      offset: 11.5\n    },\n    long: '(UTC+10:30) Lord Howe Island',\n    hem: 's'\n  },\n  {\n    name: 'Casey Time',\n    abbr: 'CAST',\n    aliases: ['casey'],\n    ids: ['Antarctica/Casey'],\n    std: {\n      abbr: 'CAST',\n      name: 'Casey Time',\n      offset: 11\n    },\n    dst: {\n      name: 'Casey Summer Time',\n      offset: 8\n    },\n    hem: 's'\n  },\n  {\n    name: 'Magadan Time',\n    abbr: null,\n    aliases: ['magadan', 'magadan standard time'],\n    ids: ['Asia/Magadan'],\n    std: {\n      abbr: 'MAGT',\n      name: 'Magadan Standard Time',\n      offset: 11\n    },\n    dst: {},\n    long: '(UTC+11:00) Magadan',\n    hem: 'n'\n  },\n  {\n    name: 'Sakhalin Time',\n    abbr: null,\n    aliases: ['sakhalin', 'sakhalin standard time'],\n    ids: ['Asia/Sakhalin'],\n    std: {\n      abbr: 'SAKT',\n      name: 'Sakhalin Standard Time',\n      offset: 11\n    },\n    dst: {},\n    long: '(UTC+11:00) Sakhalin',\n    hem: 'n'\n  },\n  {\n    name: 'Srednekolymsk Time',\n    abbr: 'SRET',\n    aliases: ['srednekolymsk', 'russia time zone 10', 'chokurdakh'],\n    ids: ['Asia/Srednekolymsk'],\n    std: {\n      abbr: 'SRET',\n      name: 'Srednekolymsk Standard Time',\n      offset: 11\n    },\n    dst: {},\n    long: '(UTC+11:00) Chokurdakh',\n    hem: 'n'\n  },\n  {\n    name: 'Vanuatu Time',\n    abbr: null,\n    aliases: ['vanuatu'],\n    ids: ['Pacific/Efate'],\n    std: {\n      abbr: 'VUT',\n      name: 'Vanuatu Standard Time',\n      offset: 11\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Solomon Islands Time',\n    abbr: null,\n    aliases: ['solomon'],\n    ids: ['Pacific/Guadalcanal'],\n    std: {\n      abbr: 'SBT',\n      name: 'Solomon Islands Time',\n      offset: 11\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Kosrae Time',\n    abbr: null,\n    aliases: ['kosrae'],\n    ids: ['Pacific/Kosrae'],\n    std: {\n      abbr: 'KOST',\n      name: 'Kosrae Time',\n      offset: 11\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'New Caledonia Time',\n    abbr: null,\n    aliases: ['new caledonia'],\n    ids: ['Pacific/Noumea'],\n    std: {\n      abbr: 'NCT',\n      name: 'New Caledonia Standard Time',\n      offset: 11\n    },\n    dst: {\n      name: 'New Caledonia Summer Time'\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Ponape Time',\n    abbr: null,\n    aliases: ['ponape'],\n    ids: ['Pacific/Ponape'],\n    std: {\n      abbr: 'PONT',\n      name: 'Ponape Time',\n      offset: 11\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Anadyr Time',\n    abbr: null,\n    aliases: ['anadyr', 'russia time zone 11', 'petropavlovsk kamchatsky'],\n    ids: ['Asia/Anadyr'],\n    std: {\n      abbr: 'ANAT',\n      name: 'Anadyr Standard Time',\n      offset: 12\n    },\n    dst: {},\n    long: '(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky',\n    hem: 'n'\n  },\n  {\n    name: 'Petropavlovsk-Kamchatski Time',\n    abbr: null,\n    aliases: ['kamchatka', 'russia time zone 11', 'anadyr', 'petropavlovsk kamchatsky'],\n    ids: ['Asia/Kamchatka'],\n    std: {\n      abbr: 'PETT',\n      name: 'Petropavlovsk-Kamchatski Standard Time',\n      offset: 12\n    },\n    dst: {},\n    long: '(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky',\n    hem: 'n'\n  },\n  {\n    name: 'Fiji Time',\n    abbr: 'FJT',\n    aliases: ['fiji', 'fiji standard time'],\n    ids: ['Pacific/Fiji'],\n    std: {\n      abbr: 'FJT',\n      name: 'Fiji Standard Time',\n      offset: 12\n    },\n    dst: {\n      abbr: 'FJT',\n      name: 'Fiji Summer Time',\n      offset: 13\n    },\n    long: '(UTC+12:00) Fiji',\n    hem: 's'\n  },\n  {\n    name: 'Tuvalu Time',\n    abbr: 'TVT',\n    aliases: ['tuvalu'],\n    ids: ['Pacific/Funafuti'],\n    std: {\n      abbr: 'TVT',\n      name: 'Tuvalu Time',\n      offset: 12\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Nauru Time',\n    abbr: null,\n    aliases: ['nauru'],\n    ids: ['Pacific/Nauru'],\n    std: {\n      abbr: 'NRT',\n      name: 'Nauru Time',\n      offset: 12\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Norfolk Island Time',\n    abbr: null,\n    aliases: ['norfolk', 'norfolk standard time', 'norfolk island'],\n    ids: ['Pacific/Norfolk'],\n    std: {\n      abbr: 'NFT',\n      name: 'Norfolk Island Standard Time',\n      offset: 12\n    },\n    dst: {\n      abbr: 'NFDT',\n      name: 'Norfolk Island Daylight Time',\n      offset: 11\n    },\n    long: '(UTC+11:00) Norfolk Island',\n    hem: 'n'\n  },\n  {\n    name: 'Gilbert Islands Time',\n    abbr: null,\n    aliases: ['gilbert islands'],\n    ids: ['Pacific/Tarawa'],\n    std: {\n      abbr: 'GILT',\n      name: 'Gilbert Islands Time',\n      offset: 12\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Wake Island Time',\n    abbr: null,\n    aliases: ['wake'],\n    ids: ['Pacific/Wake'],\n    std: {\n      abbr: 'WAKT',\n      name: 'Wake Island Time',\n      offset: 12\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Wallis & Futuna Time',\n    abbr: null,\n    aliases: ['wallis'],\n    ids: ['Pacific/Wallis'],\n    std: {\n      abbr: 'WFT',\n      name: 'Wallis & Futuna Time',\n      offset: 12\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Chatham Time',\n    abbr: 'CHAT',\n    aliases: ['chatham', 'chatham islands standard time', 'chatham islands'],\n    ids: ['Pacific/Chatham'],\n    std: {\n      name: 'Chatham Standard Time',\n      abbr: 'CHAST',\n      offset: 12.75\n    },\n    dst: {\n      name: 'Chatham Daylight Time',\n      abbr: 'CHADT',\n      offset: 13.75\n    },\n    long: '(UTC+12:45) Chatham Islands',\n    hem: 's'\n  },\n  {\n    name: 'West Samoa Time',\n    abbr: 'WST',\n    aliases: ['apia'],\n    ids: ['Pacific/Apia'],\n    std: {\n      abbr: 'WST',\n      name: 'West Samoa Time',\n      offset: 13\n    },\n    dst: {\n      abbr: 'WST',\n      name: 'West Samoa Summer Time',\n      offset: 14\n    },\n    hem: 's'\n  },\n  {\n    name: 'Phoenix Islands Time',\n    abbr: null,\n    aliases: ['phoenix islands'],\n    ids: ['Pacific/Enderbury'],\n    std: {\n      abbr: 'PHOT',\n      name: 'Phoenix Islands Time',\n      offset: 13\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Tokelau Time',\n    abbr: null,\n    aliases: ['tokelau'],\n    ids: ['Pacific/Fakaofo'],\n    std: {\n      abbr: 'TKT',\n      name: 'Tokelau Time',\n      offset: 13\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Tonga Time',\n    abbr: null,\n    aliases: ['tonga', 'tonga standard time', \"nuku'alofa\"],\n    ids: ['Pacific/Tongatapu'],\n    std: {\n      abbr: 'TOT',\n      name: 'Tonga Standard Time',\n      offset: 13\n    },\n    dst: {\n      name: 'Tonga Summer Time',\n      offset: 14\n    },\n    long: \"(UTC+13:00) Nuku'alofa\",\n    hem: 's'\n  },\n  {\n    name: 'Line Islands Time',\n    abbr: null,\n    aliases: ['line islands', 'line islands standard time', 'kiritimati island'],\n    ids: ['Pacific/Kiritimati'],\n    std: {\n      abbr: 'LINT',\n      name: 'Line Islands Time',\n      offset: 14\n    },\n    dst: {},\n    long: '(UTC+14:00) Kiritimati Island',\n    hem: 'n'\n  },\n  {\n    name: 'Niue Time',\n    abbr: null,\n    aliases: ['niue'],\n    ids: ['Pacific/Niue'],\n    std: {\n      abbr: 'NUT',\n      name: 'Niue Time',\n      offset: -11\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Cook Islands Time',\n    abbr: 'CKT',\n    aliases: ['cook'],\n    ids: ['Pacific/Rarotonga'],\n    std: {\n      abbr: 'CKT',\n      name: 'Cook Islands Standard Time',\n      offset: -10\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Tahiti Time',\n    abbr: null,\n    aliases: ['tahiti'],\n    ids: ['Pacific/Tahiti'],\n    std: {\n      abbr: 'TAHT',\n      name: 'Tahiti Time',\n      offset: -10\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Marquesas Time',\n    abbr: null,\n    aliases: ['marquesas', 'marquesas standard time'],\n    ids: ['Pacific/Marquesas'],\n    std: {\n      abbr: 'MART',\n      name: 'Marquesas Time',\n      offset: -9.5\n    },\n    dst: {},\n    long: '(UTC-09:30) Marquesas Islands',\n    hem: 'n'\n  },\n  {\n    name: 'Aleutian Standard Time',\n    iso: '(UTC-10:00) Aleutian Islands',\n    aliases: ['aleutian'],\n    ids: ['America/Adak'],\n    abbr: 'HST',\n    std: {\n      name: 'Hawaii Standard Time',\n      abbr: 'HST',\n      offset: -10\n    },\n    dst: {\n      name: 'Hawaii Daylight Time',\n      abbr: 'HDT',\n      offset: -9\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Gambier Time',\n    abbr: null,\n    aliases: ['gambier', 'utc-09', 'coordinated universal time-09'],\n    ids: ['Pacific/Gambier'],\n    std: {\n      abbr: 'GAMT',\n      name: 'Gambier Time',\n      offset: -9\n    },\n    dst: {},\n    long: '(UTC-09:00) Coordinated Universal Time-09',\n    hem: 'n'\n  },\n  {\n    name: 'Pitcairn Time',\n    abbr: null,\n    aliases: ['pitcairn', 'utc-08', 'coordinated universal time-08'],\n    ids: ['Pacific/Pitcairn'],\n    std: {\n      abbr: 'PST',\n      name: 'Pitcairn Time',\n      offset: -8\n    },\n    dst: {},\n    long: '(UTC-08:00) Coordinated Universal Time-08',\n    hem: 'n'\n  },\n  {\n    name: '',\n    dupe: true,\n    ids: ['America/Hermosillo'],\n    std: {\n      name: 'Mexican Pacific Standard Time',\n      abbr: 'HNPMX',\n      offset: -7\n    },\n    hem: 'n'\n  },\n  {\n    name: 'Northwest Mexico Time',\n    abbr: 'HNOMX',\n    aliases: [\n      'mexico northwest',\n      'pacific standard time (mexico)',\n      'baja california',\n      'pacific mexico'\n    ],\n    ids: ['America/Santa_Isabel'],\n    std: {\n      name: 'Northwest Mexico Standard Time',\n      abbr: 'HNNOMX',\n      offset: -6\n    },\n    dst: {\n      name: 'Northwest Mexico Daylight Time',\n      abbr: 'HENOMX',\n      offset: -5\n    },\n    long: '(UTC-08:00) Baja California',\n    hem: 'n'\n  },\n  {\n    name: 'Easter Island Time',\n    abbr: null,\n    aliases: ['easter', 'easter island standard time', 'easter island'],\n    ids: ['Pacific/Easter'],\n    std: {\n      name: 'Easter Island Standard Time',\n      abbr: 'EAST',\n      offset: -6\n    },\n    dst: {\n      name: 'Easter Island Summer Time',\n      abbr: 'EASST',\n      offset: -5\n    },\n    long: '(UTC-06:00) Easter Island',\n    hem: 's'\n  },\n  {\n    name: 'Ecuador Time',\n    abbr: null,\n    aliases: ['ecuador'],\n    ids: ['America/Guayaquil'],\n    std: {\n      name: 'Ecuador Time',\n      abbr: 'ECT',\n      offset: -5\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Cuba Time',\n    abbr: 'HCU',\n    aliases: ['cuba', 'cuba standard time', 'havana'],\n    ids: ['America/Havana'],\n    std: {\n      name: 'Cuba Standard Time',\n      abbr: 'HNCU',\n      offset: -5\n    },\n    dst: {\n      name: 'Cuba Daylight Time',\n      abbr: 'HECU',\n      offset: -4\n    },\n    long: '(UTC-05:00) Havana',\n    hem: 'n'\n  },\n  {\n    name: 'Peru Time',\n    abbr: null,\n    aliases: ['peru'],\n    ids: ['America/Lima'],\n    std: {\n      abbr: 'PET',\n      name: 'Peru Standard Time',\n      offset: -5\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Paraguay Time',\n    abbr: null,\n    aliases: ['paraguay', 'paraguay standard time', 'asuncion'],\n    ids: ['America/Asuncion'],\n    std: {\n      abbr: 'PYT',\n      name: 'Paraguay Standard Time',\n      offset: -4\n    },\n    dst: {\n      name: 'Paraguay Summer Time',\n      offset: -3\n    },\n    long: '(UTC-04:00) Asuncion',\n    hem: 's'\n  },\n  {\n    name: 'Venezuela Time',\n    abbr: null,\n    aliases: ['venezuela', 'venezuelan', 'venezuela standard time', 'caracas'],\n    ids: ['America/Caracas'],\n    std: {\n      name: 'Venezuela Time',\n      abbr: 'VET',\n      offset: -4\n    },\n    dst: {},\n    long: '(UTC-04:00) Caracas',\n    hem: 'n'\n  },\n  {\n    name: 'Guyana Time',\n    abbr: null,\n    aliases: ['guyana'],\n    ids: ['America/Guyana'],\n    std: {\n      name: 'Guyana Time',\n      abbr: 'GYT',\n      offset: -4\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Bolivia Time',\n    abbr: null,\n    aliases: ['bolivia'],\n    ids: ['America/La_Paz'],\n    std: {\n      name: 'Bolivia Time',\n      abbr: 'BOT',\n      offset: -4\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Newfoundland Time',\n    abbr: 'HTN',\n    aliases: ['newfoundland', 'newfoundland standard time'],\n    ids: ['America/St_Johns'],\n    std: {\n      name: 'Newfoundland Standard Time',\n      abbr: 'HNTN',\n      offset: -3.5\n    },\n    dst: {\n      name: 'Newfoundland Daylight Time',\n      abbr: 'HETN',\n      offset: -2.5\n    },\n    long: '(UTC-03:30) Newfoundland',\n    hem: 'n'\n  },\n  {\n    name: 'French Guiana Time',\n    abbr: null,\n    aliases: ['french guiana'],\n    ids: ['America/Cayenne'],\n    std: {\n      name: 'French Guiana Time',\n      abbr: 'GFT',\n      offset: -3\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'West Greenland Time',\n    abbr: 'HOG',\n    aliases: ['greenland western', 'greenland standard time', 'greenland'],\n    ids: ['America/Godthab'],\n    std: {\n      name: 'West Greenland Standard Time',\n      abbr: 'HNOG',\n      offset: -3\n    },\n    dst: {\n      name: 'West Greenland Summer Time',\n      abbr: 'HEOG',\n      offset: -2\n    },\n    long: '(UTC-03:00) Greenland',\n    hem: 'n'\n  },\n  {\n    name: 'St. Pierre & Miquelon Time',\n    abbr: 'HPM',\n    aliases: [\n      'pierre miquelon',\n      'saint pierre standard time',\n      'saint pierre and miquelon',\n      'saint pierre'\n    ],\n    ids: ['America/Miquelon'],\n    std: {\n      name: 'St. Pierre & Miquelon Standard Time',\n      abbr: 'HNPM',\n      offset: -3\n    },\n    dst: {\n      name: 'St. Pierre & Miquelon Daylight Time',\n      abbr: 'HEPM',\n      offset: -2\n    },\n    long: '(UTC-03:00) Saint Pierre and Miquelon',\n    hem: 'n'\n  },\n  {\n    name: 'Uruguay Time',\n    abbr: 'UYT',\n    aliases: ['uruguay', 'uyst', 'montevideo standard time', 'montevideo'],\n    ids: ['America/Montevideo'],\n    std: {\n      name: 'Uruguay Standard Time',\n      abbr: 'UYT',\n      offset: -3\n    },\n    dst: {},\n    long: '(UTC-03:00) Montevideo',\n    hem: 's'\n  },\n  {\n    name: 'Suriname Time',\n    abbr: null,\n    aliases: ['suriname'],\n    ids: ['America/Paramaribo'],\n    std: {\n      name: 'Suriname Time',\n      abbr: 'SRT',\n      offset: -3\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Chile Time',\n    abbr: 'CLT',\n    aliases: ['chile'],\n    ids: ['America/Santiago'],\n    std: {\n      name: 'Chile Standard Time',\n      abbr: 'CLT',\n      offset: -3\n    },\n    dst: {\n      name: 'Chile Summer Time',\n      abbr: 'CLST',\n      offset: -4\n    },\n    hem: 's'\n  },\n  {\n    name: 'Falkland Islands Time',\n    abbr: 'FKT',\n    aliases: ['falkland'],\n    ids: ['Atlantic/Stanley'],\n    std: {\n      abbr: 'FKST',\n      name: 'Falkland Islands Summer Time',\n      offset: -3\n    },\n    dst: {},\n    hem: 's'\n  },\n  {\n    name: 'Fernando de Noronha Time',\n    abbr: null,\n    aliases: ['noronha'],\n    ids: ['America/Noronha'],\n    std: {\n      abbr: 'FNT',\n      name: 'Fernando de Noronha Standard Time',\n      offset: -2\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'South Georgia Time',\n    abbr: null,\n    aliases: ['south georgia'],\n    ids: ['Atlantic/South_Georgia'],\n    std: {\n      abbr: 'GST',\n      name: 'South Georgia Time',\n      offset: -2\n    },\n    dst: {},\n    hem: 'n'\n  },\n  {\n    name: 'Azores Time',\n    abbr: 'AZOT',\n    aliases: ['azores', 'azores standard time'],\n    ids: ['Atlantic/Azores'],\n    std: {\n      abbr: 'AZOT',\n      name: 'Azores Standard Time',\n      offset: -1\n    },\n    dst: {\n      name: 'Azores Summer Time',\n      abbr: 'AZOST',\n      offset: 0\n    },\n    long: '(UTC-01:00) Azores',\n    hem: 'n'\n  },\n  {\n    name: 'Cape Verde Time',\n    abbr: null,\n    aliases: ['cape verde', 'cape verde standard time', 'cabo verde'],\n    ids: ['Atlantic/Cape_Verde'],\n    std: {\n      abbr: 'CVT',\n      name: 'Cape Verde Standard Time',\n      offset: -1\n    },\n    dst: {},\n    long: '(UTC-01:00) Cabo Verde Is.',\n    hem: 'n'\n  }\n];\n\nvar offsets = {\n  'asia/dili': '+9',\n  'pacific/palau': '+9',\n  'australia/west': '+8',\n  'asia/ulan_bator': '+8/+7',\n  'asia/choibalsan': '+8',\n  'asia/chongqing': '+8',\n  'asia/chungking': '+8',\n  'asia/harbin': '+8',\n  'asia/irkutsk': '+8',\n  'asia/macao': '+8',\n  'asia/ujung_pandang': '+8',\n  'antarctica/davis': '+7',\n  'indian/christmas': '+7',\n  'asia/ho_chi_minh': '+7',\n  'asia/hovd': '+7',\n  'asia/novosibirsk': '+7',\n  'asia/tomsk': '+7',\n  'antarctica/vostok': '+6',\n  'asia/dacca': '+6',\n  'asia/dhaka': '+6',\n  'asia/kashgar': '+6',\n  'asia/omsk': '+6',\n  'asia/thimbu': '+6',\n  'asia/thimphu': '+6',\n  'asia/urumqi': '+6',\n  'indian/cocos': '+6.5',\n  'antarctica/mawson': '+5',\n  'indian/kerguelen': '+5',\n  'asia/ashkhabad': '+5',\n  'asia/dushanbe': '+5',\n  'asia/yekaterinburg': '+5',\n  'asia/kathmandu': '+5.75',\n  'indian/reunion': '+4',\n  'indian/mahe': '+4',\n  'atlantic/jan_mayen': '+2/+1',\n  'atlantic/faroe': '+1/0',\n  'pacific/kiritimati': '+14',\n  'pacific/apia': '+13/+12',\n  'pacific/tongatapu': '+13/+12',\n  'pacific/enderbury': '+13',\n  'pacific/fakaofo': '+13',\n  'antarctica/south_pole': '+12/+11',\n  'pacific/norfolk': '+11.5/+10.5',\n  'australia/lhi': '+10.5/+9.5',\n  'etc/greenwich': '0',\n  'etc/utc': '0',\n  'etc/universal': '0',\n  'etc/zulu': '0',\n  'america/atka': '-9/-10',\n  'pacific/gambier': '-9',\n  'pacific/marquesas': '-9.5',\n  'pacific/pitcairn': '-8',\n  'america/ensenada': '-7/-8',\n  'america/santa_isabel': '-7/-8',\n  'mexico/bajanorte': '-7/-8',\n  'canada/yukon': '-7/-8',\n  'canada/east-saskatchewan': '-6',\n  'antarctica/rothera': '-3',\n  'atlantic/stanley': '-3',\n  'america/nuuk': '-3/-4',\n  'america/cayenne': '-3',\n  'america/paramaribo': '-3',\n  'america/rosario': '-3',\n  'america/godthab': '-2/-3',\n  'america/miquelon': '-2/-3',\n  'america/noronha': '-2',\n  'atlantic/south_georgia': '-2',\n  'atlantic/cape_verde': '-1',\n  'pacific/niue': '-11',\n  'pacific/samoa': '-11',\n  'pacific/rarotonga': '-10',\n  'pacific/tahiti': '-10'\n};\n\nconst titleCase = function (str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  })\n};\n\nconst display = function (id) {\n  if (!id) {\n    return null\n  }\n  let meta = metas.find((obj) => {\n    return obj.ids.find((tz) => {\n      return tz === id\n    })\n  });\n  if (!meta) {\n    let offset = offsets[id.toLowerCase()];\n    if (offset !== undefined) {\n      let abbr = `UTC${offset}`;\n      let parts = id.split(/\\//);\n      let name = titleCase(parts[parts.length - 1]);\n      name = name.replace(/_/g, ' ');\n      name += ' Time';\n      meta = {\n        std: { name: name, abbr: abbr },\n        offset: null\n      };\n    } else {\n      let abbr = id.replace(/^etc\\//i, '');\n      meta = {\n        std: { name: id, abbr: abbr }, // 'Etc/GMT+5'\n        offset: null\n      };\n    }\n  }\n  return {\n    iana: id,\n    standard: meta.std || null,\n    daylight: meta.dst || null\n    // offset: meta.offset - 1 || null\n  }\n};\n\nvar version = '1.1.0';\n\nconst soft = function (str) {\n  let ids = find(str) || [];\n  if (typeof ids === 'string') {\n    ids = [ids];\n  }\n  ids = ids.map((id) => display(id, str));\n  return ids\n};\nsoft.prototype.version = version;\n// export { find, display, version }\n\nexport default soft;\n","import type { ICustomTimezone } from './timezone'\n\nconst allTimezones: ICustomTimezone = {\n  \"Pacific/Midway\": \"Midway Island, Samoa\",\n  \"Pacific/Honolulu\": \"Hawaii\",\n  \"America/Juneau\": \"Alaska\",\n  \"America/Boise\": \"Mountain Time\",\n  \"America/Dawson\": \"Dawson, Yukon\",\n  \"America/Chihuahua\": \"Chihuahua, La Paz, Mazatlan\",\n  \"America/Phoenix\": \"Arizona\",\n  \"America/Chicago\": \"Central Time\",\n  \"America/Regina\": \"Saskatchewan\",\n  \"America/Mexico_City\": \"Guadalajara, Mexico City, Monterrey\",\n  \"America/Belize\": \"Central America\",\n  \"America/Detroit\": \"Eastern Time\",\n  \"America/Bogota\": \"Bogota, Lima, Quito\",\n  \"America/Caracas\": \"Caracas, La Paz\",\n  \"America/Santiago\": \"Santiago\",\n  \"America/St_Johns\": \"Newfoundland and Labrador\",\n  \"America/Sao_Paulo\": \"Brasilia\",\n  \"America/Tijuana\": \"Tijuana\",\n  \"America/Montevideo\": \"Montevideo\",\n  \"America/Argentina/Buenos_Aires\": \"Buenos Aires, Georgetown\",\n  \"America/Godthab\": \"Greenland\",\n  \"America/Los_Angeles\": \"Pacific Time\",\n  \"Atlantic/Azores\": \"Azores\",\n  \"Atlantic/Cape_Verde\": \"Cape Verde Islands\",\n  GMT: \"UTC\",\n  \"Europe/London\": \"Edinburgh, London\",\n  \"Europe/Dublin\": \"Dublin\",\n  \"Europe/Lisbon\": \"Lisbon\",\n  \"Africa/Casablanca\": \"Casablanca, Monrovia\",\n  \"Atlantic/Canary\": \"Canary Islands\",\n  \"Europe/Belgrade\": \"Belgrade, Bratislava, Budapest, Ljubljana, Prague\",\n  \"Europe/Sarajevo\": \"Sarajevo, Skopje, Warsaw, Zagreb\",\n  \"Europe/Brussels\": \"Brussels, Copenhagen, Madrid, Paris\",\n  \"Europe/Amsterdam\": \"Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna\",\n  \"Africa/Algiers\": \"West Central Africa\",\n  \"Europe/Bucharest\": \"Bucharest\",\n  \"Africa/Cairo\": \"Cairo\",\n  \"Europe/Helsinki\": \"Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius\",\n  \"Europe/Athens\": \"Athens, Minsk\",\n  \"Asia/Jerusalem\": \"Jerusalem\",\n  \"Africa/Harare\": \"Harare, Pretoria\",\n  \"Europe/Moscow\": \"Istanbul, Moscow, St. Petersburg, Volgograd\",\n  \"Asia/Kuwait\": \"Kuwait, Riyadh\",\n  \"Africa/Nairobi\": \"Nairobi\",\n  \"Asia/Baghdad\": \"Baghdad\",\n  \"Asia/Tehran\": \"Tehran\",\n  \"Asia/Dubai\": \"Abu Dhabi, Muscat\",\n  \"Asia/Baku\": \"Baku, Tbilisi, Yerevan\",\n  \"Asia/Kabul\": \"Kabul\",\n  \"Asia/Yekaterinburg\": \"Ekaterinburg\",\n  \"Asia/Karachi\": \"Islamabad, Karachi, Tashkent\",\n  \"Asia/Kolkata\": \"Chennai, Kolkata, Mumbai, New Delhi\",\n  \"Asia/Kathmandu\": \"Kathmandu\",\n  \"Asia/Dhaka\": \"Astana, Dhaka\",\n  \"Asia/Colombo\": \"Sri Jayawardenepura\",\n  \"Asia/Almaty\": \"Almaty, Novosibirsk\",\n  \"Asia/Rangoon\": \"Yangon Rangoon\",\n  \"Asia/Bangkok\": \"Bangkok, Hanoi, Jakarta\",\n  \"Asia/Krasnoyarsk\": \"Krasnoyarsk\",\n  \"Asia/Shanghai\": \"Beijing, Chongqing, Hong Kong SAR, Urumqi\",\n  \"Asia/Kuala_Lumpur\": \"Kuala Lumpur, Singapore\",\n  \"Asia/Taipei\": \"Taipei\",\n  \"Australia/Perth\": \"Perth\",\n  \"Asia/Irkutsk\": \"Irkutsk, Ulaanbaatar\",\n  \"Asia/Seoul\": \"Seoul\",\n  \"Asia/Tokyo\": \"Osaka, Sapporo, Tokyo\",\n  \"Asia/Yakutsk\": \"Yakutsk\",\n  \"Australia/Darwin\": \"Darwin\",\n  \"Australia/Adelaide\": \"Adelaide\",\n  \"Australia/Sydney\": \"Canberra, Melbourne, Sydney\",\n  \"Australia/Brisbane\": \"Brisbane\",\n  \"Australia/Hobart\": \"Hobart\",\n  \"Asia/Vladivostok\": \"Vladivostok\",\n  \"Pacific/Guam\": \"Guam, Port Moresby\",\n  \"Asia/Magadan\": \"Magadan, Solomon Islands, New Caledonia\",\n  \"Asia/Kamchatka\": \"Kamchatka, Marshall Islands\",\n  \"Pacific/Fiji\": \"Fiji Islands\",\n  \"Pacific/Auckland\": \"Auckland, Wellington\",\n  \"Pacific/Tongatapu\": \"Nuku'alofa\",\n}\n\nexport default allTimezones\n","import { computed, unref, Ref } from \"vue\";\nimport spacetime from \"spacetime\";\nimport soft from \"timezone-soft\";\nimport AllTimezones from \"../utils/timezone-list\";\nimport { ITimezoneOption, ICustomTimezone } from \"../utils/timezone\";\n\nfunction initTimezoneOptions(labelStyle?: string | Ref<string>, timezones?: ICustomTimezone) {\n  if (!timezones) timezones = AllTimezones;\n\n  return Object.entries(timezones)\n    .reduce<ITimezoneOption[]>((selectOptions, zone) => {\n      const now = spacetime.now(zone[0]);\n      const tz = now.timezone();\n      const tzStrings = soft(zone[0]);\n\n      let label = \"\";\n      let abbr = now.isDST()\n        ? // @ts-expect-error\n          tzStrings[0].daylight?.abbr\n        : // @ts-expect-error\n          tzStrings[0].standard?.abbr;\n      let altName = now.isDST() ? tzStrings[0].daylight?.name : tzStrings[0].standard?.name;\n\n      const min = tz.current.offset * 60;\n      const hr = `${(min / 60) ^ 0}:` + (min % 60 === 0 ? \"00\" : Math.abs(min % 60));\n      const prefix = `(GMT${hr.includes(\"-\") ? hr : `+${hr}`}) ${zone[1]}`;\n\n      switch (labelStyle) {\n        case \"original\":\n          label = prefix;\n          break;\n        case \"altName\":\n          label = `${prefix} ${altName?.length ? `(${altName})` : \"\"}`;\n          break;\n        case \"abbrev\":\n          label = `${prefix} ${abbr?.length < 5 ? `(${abbr})` : \"\"}`;\n          break;\n        default:\n          label = `${prefix}`;\n      }\n\n      selectOptions.push({\n        value: tz.name,\n        label: label,\n        offset: tz.current.offset,\n        abbrev: abbr,\n        altName: altName,\n      });\n\n      return selectOptions;\n    }, [])\n    .sort((a: ITimezoneOption, b: ITimezoneOption) => a.offset - b.offset);\n}\n\nfunction getSelectedInfo(value: string, timezones: ITimezoneOption[] | Ref<ITimezoneOption[]>): ITimezoneOption {\n  return unref(timezones).find((item) => item.value === value);\n}\n\nexport type UseTimezoneSelectProps = {\n  labelStyle?: string | Ref<string>;\n  timezones?: ICustomTimezone | Ref<ICustomTimezone>;\n};\n\nexport type TimezoneSelectInstance = {\n  timezoneOptions: Ref<ITimezoneOption[]>;\n  getSelectedInfo: (value: string, timezones: ITimezoneOption[] | Ref<ITimezoneOption[]>) => ITimezoneOption;\n};\n\nexport function useTimezoneSelect({ labelStyle, timezones }: UseTimezoneSelectProps = {}): TimezoneSelectInstance {\n  const timezoneOptions = computed(() => initTimezoneOptions(unref(labelStyle), unref(timezones)));\n  return { timezoneOptions, getSelectedInfo };\n}\n","<template>\n  <div class=\"vue-timezone-select\" style=\"width: 100%\">\n    <el-select\n      style=\"width: 100%\"\n      :placeholder=\"placeholder\"\n      :filterable=\"filterable\"\n      :model-value=\"props.modelValue\"\n      @change=\"selectChange\"\n    >\n      <template v-for=\"item in timezoneOptions\" :key=\"item.value\">\n        <el-option :label=\"item.label\" :value=\"item.value\"></el-option>\n      </template>\n    </el-select>\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  name: \"TimezoneSelect\",\n};\n</script>\n\n<script setup lang=\"ts\">\nimport { toRef } from \"vue\";\nimport { useTimezoneSelect } from \"../hooks/useTimezoneSelect\";\nimport AllTimezones from \"../utils/timezone-list\";\n\nconst emit = defineEmits([\"update:modelValue\", \"change\"]);\n\nconst props = defineProps({\n  modelValue: {\n    type: String,\n    default: \"\",\n  },\n  timezones: {\n    type: Object,\n    default: () => AllTimezones,\n  },\n  labelStyle: {\n    type: String,\n    default: \"original\",\n  },\n  filterable: {\n    type: Boolean,\n    default: true,\n  },\n  placeholder: {\n    type: String,\n    default: \"\",\n  },\n});\n\nconst { timezoneOptions, getSelectedInfo } = useTimezoneSelect({\n  labelStyle: toRef(props, \"labelStyle\"),\n  timezones: toRef(props, \"timezones\"),\n});\n\nfunction selectChange(val: string): void {\n  emit(\"update:modelValue\", val);\n\n  const selectInfo = getSelectedInfo(val, timezoneOptions);\n  emit(\"change\", { ...selectInfo });\n}\n</script>\n"],"names":["isSummer","isOffset","isNumber","utcOffset","gmtOffset","toIana","parseOffset","guessTz","tzs","normalize","defaults","parseArray","parseObject","parseNumber","o","units","months","mapping","validate","monthLengths","walkTo","parseTime","misc","parseString","aliases","titleCase","_short","short","isoOffset","pad","diff","diffOne","main","toISO","inSummerTime","methods","timezone","format","unixFmt","_startOf","_endOf","progress","nearest","since","every","order","_time","_date","_dayOfYear","_week","_month","long","_year","year","addMethods","setD","setM","setTcf","setAmpm","quickOffset","whereIts","version","AllTimezones","soft"],"mappings":"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"}